/*! For license information please see bundle.js.LICENSE.txt */
(()=>{var n,t,e={271:(n,t,e)=>{"use strict";e.d(t,{Z:()=>s});var r=e(537),i=e.n(r),o=e(645),a=e.n(o)()(i());a.push([n.id,"@tailwind components;\n","",{version:3,sources:["webpack://./node_modules/tailwindcss/components.css"],names:[],mappings:"AAAA,oBAAoB",sourcesContent:["@tailwind components;\n"],sourceRoot:""}]);const s=a},721:(n,t,e)=>{"use strict";e.d(t,{Z:()=>s});var r=e(537),i=e.n(r),o=e(645),a=e.n(o)()(i());a.push([n.id,"@tailwind utilities;\n","",{version:3,sources:["webpack://./node_modules/tailwindcss/utilities.css"],names:[],mappings:"AAAA,mBAAmB",sourcesContent:["@tailwind utilities;\n"],sourceRoot:""}]);const s=a},166:(n,t,e)=>{"use strict";e.d(t,{Z:()=>p});var r=e(537),i=e.n(r),o=e(645),a=e.n(o),s=e(667),c=e.n(s),l=new URL(e(975),e.b),u=new URL(e(113),e.b),A=a()(i()),d=c()(l),f=c()(u);A.push([n.id,`/* CONTAINER */\n.full-width-container{\n  display: flex;\n  position: relative;\n  justify-content: center;\n  width: 100vw;\n  background-color: rgb(25,26,31);\n  align-items: start;\n  height: 100vh; \n}\n\n.h1-stubby {\n  position: absolute;\n  top: 0;\n  left: 0;\n  margin: 0;\n  padding: 1rem 2rem;\n  background: none;\n  font-style: italic;\n  font-size: 80px;\n  color: white;\n}\n\n\n.bg-dark{\n  background-color: rgb(25,26,31);\n\n}\n\n.bg-none{\n  background: none;\n}\n\n.profile-image-preview {\n  width: 100px; \n  height: 100px;\n  object-fit: cover;\n  border-radius: 50%;\n  margin-top: 1rem; \n}\n\n\n\n/* SIDE ALIGNED DIVS */\n.right-aligned-div {\n  width: 38%;\n  margin-left: auto;\n  margin-right: 0;\n  text-align: right;\n  background: none;\n}\n\n.left-aligned-div {\n  width: 30%;\n  margin-right: auto;\n  margin-left: 0;\n  text-align: left;\n}\n\n/* NO BACKGROUND */\n.no-background{\n  background: none;\n}\n/* ------------------------------------------------------------------------------------ */\n\n/* NAVBAR */\n.Navbar{\n  display: flex;\n  padding: 30px 0;\n  margin-left: 10%;\n}\n\n.Navbar h1{\n  font-size: 50px;\n}\n\n.App{\n  background-color: rgb(25,26,31);\n\n}\n\n/* HOME */\n.background-hero {\n  background-image: url(${d}); \n  scroll-snap-align: start;\n  background-size: cover;\n  background-attachment: fixed;\n  background-repeat: no-repeat;\n  background-position: center;\n  min-height: 100vh;\n  position: relative; \n}\n\n\n\n.scrollable-section {\n  height: 100vh; \n  background-color: #f0f0f0; \n  \n}\n\n.background-hero-dark {\n  background-image: url(${f});\n  background-size: cover;\n  background-position: center;\n  min-height: 100vh;\n}\n\n/* LOGIN & SIGNUP */\n#LogIn{\n  background: none;\n  padding-bottom: 5px;\n\n}\n\n#SignUp{\n  background: none;\n  padding-bottom: 5px;\n}\n.LogIn{\n  display: flex;\n  justify-content: center;\n  width: 300px;\n  text-align: center;\n  padding: 20px; \n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1); \n  border-radius: 8px; \n  background: white; \n  margin-top: 10%;\n}\n\n.LogIn input {\n  margin-bottom: 15px; \n  padding: 12px; \n  border: 1px solid #ddd; \n  border-radius: 4px; \n  font-size: 15px;\n  background-color: #F2E3FE;\n}\n\n.LogIn input:focus {\n  outline: none;\n  border-color: #4A90E2; \n}\n\n.divider {\n  display: flex;\n  align-items: center;\n  margin: 20px 0;\n}\n\n.divider-line {\n  flex: 1;\n  border: none;\n  border-top: 1px solid #000;\n  margin: 0 10px;\n}\n\n.divider-text {\n  padding: 0 10px;\n}\n\n.google-btn {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  padding: 10px 20px;\n  margin-top: 10px; \n  margin-right: 20px;\n  border: none;\n  border-radius: 20px;\n  background-color: #4285F4;\n  color: white;\n  font-weight: bold;\n  cursor: pointer;\n  font-size: 16px; \n}\n\n.google-icon {\n  width: 30px;\n  margin-right: 25px;\n  border-radius: 50%;\n}\n\n.signup-prompt {\n  margin-top: 20px;\n  font-size: 14px; \n}\n\n.signup-link {\n  color: #4285F4;\n  text-decoration: none;\n  font-weight: bold;\n}\n\n.signup-link:hover {\n  text-decoration: underline;\n}\n\n\n/* PROFILE INFORMATION */\n\n.form-container{\n  display: flex;\n  justify-content: center;\n  text-align: center;\n}\n\n.form-container label, div{\n  background-color: rgb(25,26,31);\n  color: white;\n\n}\n\n.custom-hr{\n  width: 100vw;\n  border: 0.5px solid lightgray;\n  margin-bottom: 50px;\n}\n\n.name{\n  display: flex;\n\n}\n\n\n.left-half {\n  width: 100%;\n}\n\n.right-half {\n  width: 50%;\n}\n\n.input-field{\n  padding: 5px;\n  display: flex;\n  flex-direction: column;\n  align-items: start;\n  font-family: monospace;\n\n}\n\n/* STEP 1 */\n\n.step1-input, select.step-1input {\n  width: 75%;\n  padding: 10px;\n  border: 0.5px solid rgb(67, 63, 63); \n  border-radius: 8px;\n  background-color: black;\n  font-size: 15px;\n  font-family: monospace;\n  color: lightgray;\n  margin: 5px 0px;\n}\n\nselect.step1-input{\n  width: 79%;\n  cursor: pointer;\n}\n\n.step1-input:focus {\n  outline: none;\n  border: 1px solid rgb(255, 255, 255);\n}\n\n.form-container label{\n  font-size: 17px;\n\n}\n\n\n.next-back{\n  position: absolute;\n  bottom: 15px;\n  left: 50%; \n  transform: translateX(-50%);\n}\n.step1{\n  background-color: white;\n}\n\n.gender-birthday-image{\n  display: flex;\n}\n.gender-birthday{\n  width: 50%;\n}\n\n.image-input-container {\n  max-width: 200px;\n  height: 300px; \n  margin: 0 auto; \n  flex: 1;\n  \n}\n\n.image-input-container label {\n  display: block;\n  position: relative; \n  width: 78%;\n  height: 70%;\n  outline: 4px dashed #73787e; \n  border-radius: 8px; \n  background-size: cover; \n  cursor: pointer;\n  background-color: rgb(48, 46, 46);\n  overflow: visible;\n}\n\n.image-input-container label::after {\n  content: '+'; \n  position: absolute;\n  bottom: -13px;\n  right: -15px;\n  width: 30px; \n  height: 30px;\n  background: rgb(214, 90, 255); \n  border-radius: 50%; \n  border: 2px solid white;\n  display: flex;\n  z-index: 10;\n  align-items: center;\n  justify-content: center;\n  color: white; \n  font-size: 35px; \n  transition: transform 0.3s ease; \n}\n\n.image-input-container label:hover::after {\n  transform: rotate(90deg); \n}\n\n\n.image-input-container img {\n  width: 100%;\n  height: 100%;\n  object-fit: cover; \n  border-radius: 8px; \n}\n\n\n/* STEP 2 */\n.step-2-flex{\n  display: flex;\n}\n\n.step-2-container {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  flex: 0.6;\n}\n\n.selected-subjects {\n  margin-bottom: 20px;\n  margin-right: 20px;\n  flex: 0.4;\n  padding: 10px;\n  overflow: visible;\n}\n.select-topics-text{\n  width: 70%;\n  text-align: center;\n  font-family: monospace;\n  font-size: 20px;\n}\n.selected-topics-text{\n  width: 100%;\n  text-align: center;\n  font-family: monospace;\n  font-size: 20px;\n}\n\n.custom-subject-input input{\n  width: 80%;\n  padding: 10px;\n  border: 0.5px solid rgb(67, 63, 63); \n  border-radius: 8px;\n  background-color: black;\n  font-size: 15px;\n  font-family: monospace;\n  color: lightgray;\n  margin: 10px;\n\n}\n\n.custom-subject-input input:focus{\n  outline: none;\n  border: 1px solid rgb(255, 255, 255);\n}\n\n.picks{\n  flex: 0.5;\n  display: flex;\n  flex-direction: column;\n  gap: 20px;\n}\n\n\n.predefined-subjects {\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(150px, 1fr)); \n  gap: 10px;\n  width: 100%;\n  max-width: 600px; \n  margin: 0 auto; \n  padding: 10px;\n  \n}\n\n.selected-subjects{\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(150px, 1fr)); \n  gap: 10px;\n  width: 100%;\n  max-width: 600px; \n  margin: 0 auto; \n  height: fit-content;\n\n  \n}\n\n.subject-button, .subject-tag {\n  padding: 10px;\n  border-radius: 20px;\n  cursor: pointer;\n  border: 2px solid rgba(118, 115, 115, 0.5); \n  text-align: center;\n  font-family: monospace;\n  font-size: 15px;\n  color: white;\n  transition: background-color 0.5s ease-out;\n  \n}\n\n.subject-tag{\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 130%;\n  min-height: 30px; \n  max-height: 30px;\n}\n\n.subject-button:hover, .subject-tag:hover {\n  border: 1.5px solid white;\n}\n\n.subject-tag:hover{\n  border: 2px solid rgb(255, 122, 122);\n\n}\n\n.custom-subject-input {\n  margin-top: 20px; \n\n}\n\n.custom-subject-textbox {\n  padding: 10px;\n  border-radius: 5px;\n  border: 1px solid #ddd;\n  background-color: white;\n}\n\n/* STEP 3 */\n.step-3-container {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  margin-top: 20px;\n  gap: 10px;\n  \n}\n\n.step-3-container h4{\n  color: rgb(183, 135, 245);\n  font-weight: bold;\n\n}\n.description-textarea {\n  width: 70%; \n  height: 250px; \n  resize: none; \n  background-color: white;\n  border: none;\n  border-radius: 8px; \n  padding: 15px; \n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1); \n  font-size: 16px;\n  margin-bottom: 10px; \n}\n\n.description-textarea:focus {\n  outline: none; \n}\n\n.character-count {\n  align-self: flex-end; \n  margin-right: 10%; \n  font-size: 14px;\n  color: rgb(183, 135, 245);\n}\n\n/* EXPLORE HOME */\n.explore-home-container {\n  display: flex;\n  width: 100%;\n  height: 100vh;\n  background-color: #F3F8FF;\n}\n\n.user-profile-card h2{\n  font-size: 32px;\n}\n\n.explore-left{\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n  width: 100%;\n  flex: 0.3;\n  overflow-x: hidden;\n  overflow-y: auto;\n  background-color: #161616;\n  border-right: 1px solid #2D2D2D;\n\n}\n\n.explore-hr{\n  width: 100%;\n  border: 0.5px solid #2D2D2D;\n}\n\n.explore-right {\n  display: flex;\n  justify-content: start;\n  align-items: center;\n  flex: 1;\n  height: 100%;\n  width: 100%;\n  flex-direction: column;\n  background-color: #161616; \n  background-image: \n  radial-gradient(circle at top left, rgba(176, 175, 178, 0.1), transparent 30%),\n  radial-gradient(circle at bottom right, rgba(176, 175, 178, 0.1), transparent 30%);\n  position: relative;\n  overflow: hidden;\n\n}\n\n.explore-right h1{\n  font-size: 60px;\n  padding-bottom: 20px;\n  font-style: italic;\n  background-color: #F3F8FF;\n  color: rgb(183, 135, 245);\n  z-index: 10;\n}\n\n.matches-messages-container {\n  margin: 10px auto;\n  width: 70%; \n  padding: 3px;\n  height: 30px; \n  background-color: #161616; \n  border-radius: 20px; \n  border: 1px solid rgba(81, 77, 77, 0.5);\n\n}\n\n.slider-indicator {\n  width: 50%;\n  height: 100%;\n  transition: all 0.3s ease;\n  z-index: 0;\n  background-color: #373737;\n}\n\n.toggle-button {\n  width: 50%; \n  padding: 10px 0;\n  border: none;\n  background: transparent; \n  color: white;\n  cursor: pointer;\n  z-index: 1; \n  transition: all 0.3s ease;\n  text-align: center;\n\n}\n\n.text-gray-400 {\n  color: #666; \n}\n\n.left-0 {\n  left: 0;\n}\n\n.right-0 {\n  right: 0;\n}\n\n.slider-indicator.matches {\n  transform: translateX(0%);\n}\n\n.slider-indicator.messages {\n  transform: translateX(100%);\n}\n\n.user-profile-card {\n  position: absolute;\n  top: -20px;\n  left: 50%; \n  transform: translate(-50%);\n  display: flex;\n  flex-direction: column;\n  border-radius: 10px;\n  padding: 35px;\n  margin-top: 80px;\n  width: 50%;\n  height: 500px;\n  align-items: center;\n  background-color: #161616;\n  border: 2px solid #272727;\n  z-index: 1;\n}\n.user-profile-card-match {\n  position: absolute;\n  top: 20px;\n  left: 50%; \n  transform: translate(-50%);\n  display: flex;\n  flex-direction: column;\n  border-radius: 10px;\n  padding: 35px;\n  margin-top: 80px;\n  width: 50%;\n  height: 500px;\n  align-items: center;\n  background-color: #161616;\n  border: 2px solid #272727;\n  z-index: 1;\n}\n\n.user-info {\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  background-color: #161616;\n  overflow: visible;\n}\n\n.user-card-top h2,h3,p{\n  background-color: #161616;\n}\n\n.user-details {\n  margin-left: 20px;\n  background-color: #161616;\n}\n\n\n\n.user-card-top{\n  display: flex;\n  gap: 5%;\n  width: 100%;\n  justify-content: start;\n  align-items: center;\n  flex: 0.5;\n  background-color: #161616;\n  overflow: visible;\n\n}\n\n.user-card-bottom{\n  flex: 0.8;\n  background-color: #161616;\n  display: flex;\n  margin-top: 25px;\n  flex-direction: column;\n  justify-content: start;\n  height: 100%;\n}\n\n.user-card-right p{\n  font-size: 18px;\n}\n\n.user-card-right h2{\n  background-color: #161616;\n  \n}\n\n.profile-image {\n  width: 200px; \n  height: 200px;\n  object-fit: cover;\n  border-radius: 3%;\n}\n\n.message-button{\n  position: absolute;\n  bottom: 25px;\n  left: 0;\n  right: 0;\n  margin-left: auto;\n  margin-right: auto;\n  background-color: #7B00FE;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 100px;\n  padding: 4px 6px;\n  height: 30px;\n  border: 1.5px solid #272727;\n  border-radius: 10px;\n  cursor: pointer;\n  gap: 5px;\n}\n\n.message-button h4{\n  background-color: inherit;\n  padding-bottom: 3px;\n  font-weight: normal;\n\n}\n\n.message-button:hover{\n  border: 1.5px solid white;\n}\n\n.message-icon{\n  background-color: inherit;\n}\n\n.message-container {\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n  width: 100%;\n  background-color: #161616; \n  background-image: \n  radial-gradient(circle at top left, rgba(176, 175, 178, 0.1), transparent 30%),\n  radial-gradient(circle at bottom right, rgba(176, 175, 178, 0.1), transparent 30%);\n}\n.message-container-hr{\n  display: flex;\n  flex-direction: column;\n  background-color: inherit;\n}\n\n\n.message-subcontainer{\n  height: 95%;\n  width: 95%;  \n  background-color: #161616; \n  margin: auto;\n  border: 2px solid #2D2D2D;\n  border-radius: 10px;\n  display: flex;\n  flex-direction: column;\n  overflow-x: hidden;\n  box-sizing: border-box;\n}\n\n.message-list {\n  overflow-y: auto;\n  width: 100%;\n  height: 90%;\n  padding: 10px;\n  background-color: inherit;\n  box-sizing: border-box;\n}\n\n.message-separate {\n  background-color: red;\n}\n\n.match-info {\n  background-color: #252525;\n  display: flex;\n  align-items: center;\n  width: 100%;\n  padding: 5px;\n}\n\n.dots-vertical{\n  margin-left: auto;\n  padding: 5px;\n  margin-right: 10px;\n  border-radius: 5px;\n  cursor: pointer;\n  background-color: rgba(255,255,255,0.1);\n}\n\n.timestamp-right{\n  text-align: right;\n\n}\n.message-and-timestamp, .timestamp{\n  width: 100%;\n  background-color: #161616;\n}\n\n\n.timestamp-left{\n  text-align: left;\n}\n\n.send-button{\n  background-color: #7B00FE;\n  margin-left: auto;\n  padding: 5px;\n  margin-right: 10px;\n  border-radius: 5px;\n  cursor: pointer;\n}\n\n.match-info h2{\n  background-color: inherit;\n}\n\n.message-sent, .message-received {\n  display: block;\n  margin-bottom: 15px;\n  padding: 10px;\n  border-radius: 10px;\n  max-width: 60%;\n  width: fit-content;\n  word-break: break-word;\n  position: relative;\n  overflow: visible;\n}\n\n.message-sent::after {\n  content: '';\n  position: absolute;\n  bottom: -10px;\n  right: -5px; /* Adjust for sent messages */\n  border-width: 10px;\n  border-style: solid;\n  border-color: rgb(81, 178, 237) transparent transparent rgb(81, 178, 237);\n  transform: rotate(45deg);\n  overflow: visible;\n}\n\n.message-received::after {\n  content: '';\n  position: absolute;\n  bottom: -10px;\n  left: -5px; /* Adjust for received messages */\n  border-width: 10px;\n  border-style: solid;\n  border-color: white transparent transparent white;\n  transform: rotate(45deg);\n  overflow: visible;\n\n}\n\n.message-sent {\n  color: white;\n  justify-content: end;\n  margin-left: auto; \n  margin-right: 10px;\n  background-color: rgb(81, 178, 237);\n}\n\n.active-status {\n  color: rgb(5, 185, 5);\n  font-family: system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\n}\n\n.inactive-status {\n  color: gray;\n}\n\n.status-dot {\n  width: 10px;\n  height: 10px;\n  border-radius: 50%;\n  position: absolute;\n  bottom: 17px; \n  right: 10px;\n  border: 2px solid white;\n  transform: translate(50%, 50%);\n}\n\n.status-dot.active {\n  background-color: rgb(6, 180, 6);\n}\n\n.status-dot.inactive {\n  background-color: gray;\n}\n\n.user-image-message-container {\n  border-radius: 50%; \n  object-fit: cover;\n  background: none;\n  position: relative; \n  display: inline-block;\n  overflow: visible;\n}\n\n.user-image-message {\n  width: 50px; \n  height: 50px; \n  margin: 10px 0 10px 10px;\n  border-radius: 50%; \n  object-fit: cover;\n  background: none;\n  border: 1px solid white;\n}\n\n.active-status, .inactive-status {\n  margin-top: 5px;\n  background-color: inherit;\n  font-family: 'Trebuchet MS', 'Lucida Sans Unicode', 'Lucida Grande', 'Lucida Sans', Arial, sans-serif;\n  font-weight: lighter;\n}\n\n.user-details {\n  display: flex;\n  flex-direction: column;\n  background-color: inherit;\n}\n.message-input{\n  background-color: #131313;\n  display: flex; \n  padding: 10px; \n  border-top: 2px solid #2D2D2D;\n  height: 50px;\n  padding: 10px;\n  color: white;\n  font-weight: bold;\n}\n\n.message-image {\n  flex: 0.5;\n  width: 50px;\n  height: 50px;\n  object-fit: cover;\n  border-radius: 50%;\n}\n\n.message-hr{\n  border: 1px solid #2D2D2D;\n  margin: 5px 0 5px 0;\n\n}\n.message-info{\n  color: white;\n  display: flex;\n}\n\n.message-send{\n  display: flex;\n  justify-content: space-around;\n  align-items: center;\n  border: 1px solid #2D2D2D;\n  width: 100%;\n  background-color: #2B2B2B;\n  border-radius: 5px;\n}\n\n.message-input input{\n  background-color: inherit;\n  width: 95%;\n  text-decoration: none;\n  border: none;\n  outline: none;\n  color: white;\n  font-size: 15px;\n  padding: 0px 10px;\n\n}\n\n.message-received {\n  color: black;\n  align-self: flex-start;\n  background-color: white;\n  margin-left: 10px;\n}\n\n\n.interest-card-container{\n  display: flex;\n  gap: 10px;\n  background-color: #161616;\n  padding: 10px 0;\n\n}\n\n.user-interests{\n  background-color: #202020;\n  width: fit-content;\n  padding: 7px 15px;\n  border-radius: 25px;\n}\n\n.user-description {\n  background-color: #161616;\n  text-align: justify;\n  display: flex;\n  justify-content: start;\n  padding-bottom: 20px;\n  line-height: 1.5;\n}\n\n.user-description p{\n  color: rgb(173, 172, 172);\n}\n\n.gray{\n  color: rgb(173, 172, 172);\n}\n\n.interaction-buttons {\n  display: flex;\n  justify-content: space-between;\n  position: absolute;\n  bottom: 20px;\n  left: 0;\n  right: 0;\n  margin-left: auto;\n  margin-right: auto;\n  width: fit-content;\n  background-color: #161616; \n  gap: 20px;\n\n}\n\n.explore-right button {\n  padding: 10px 20px;\n  margin: 0 5px;\n  border-radius: 5px;\n  cursor: pointer;\n  border: 1px solid #4285F4;\n  background-color: #F3F8FF;\n  transition: background-color 0.3s;\n}\n\n.explore-right button:hover {\n  background-color: #4285F4;\n  color: white;\n}\n\n.user-image {\n  width: 40px; \n  height: 40px; \n  border-radius: 50%; \n  object-fit: cover;\n  background: none;\n}\n\n\n\n\n\n\n.current-user{\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background: none;\n  gap: 15px;\n  padding: 20px;\n}\n\n.current-user-info h4{\n  background-color: #161616;\n  padding: 5px 0;\n}\n\n.user-information{\n  background-color: inherit;\n  display: flex;\n  flex-direction: column;\n  gap: 5px;\n}\n\n.current-email{\n  font-weight: 300;\n  font-size: 15px;\n}\n\n.current-user img{\n  width: 90px;\n  height: 90px;\n  border: 2px solid #373737;\n}\n\n\n\n.explore {\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  background-color: #161616;\n  padding: 20px;\n  text-align: center;\n\n}\n\n.match-image {\n  border: 2px solid #2D2D2D;\n  width: 100px;\n  height: 100px;\n  object-fit: cover;\n  border-radius: 50%;\n}\n\n.message-image {\n  width: 50px;\n  height: 50px;\n  object-fit: cover;\n  border-radius: 50%;\n}\n\n.match-name {\n  color: white;\n  background-color: inherit;\n}\n\n.match-description{\n  font-size: 12px;\n  background-color: inherit;\n  text-align: justify;\n  color: lightgray;\n}\n\n.match {\n  display: flex;\n  gap: 10px;\n  border-radius: 20px;\n  background-color: #161616;\n  padding: 5px;\n  cursor: pointer;\n}\n\n.message {\n  display: flex;\n  gap: 10px;\n  border-radius: 20px;\n  background-color: #161616;\n  padding: 5px;\n  cursor: pointer;\n}\n\n.match:hover{\n  background-color: #373737;\n}\n\n.message:hover{\n  background-color: #373737;\n}\n\n.match-text{\n  display: flex;\n  flex-direction: column;\n  align-items: start;\n  flex: 1;\n  background-color: inherit;\n  justify-content: center;\n  height: 90%;\n}\n\n.message-text{\n  display: flex;\n  flex-direction: column;\n  align-items: start;\n  flex: 2;\n  background-color: inherit;\n  justify-content: center;\n  height: 90%;\n}\n\n\n.like{\n  cursor: pointer;\n  color: white;\n  background-color: #7B00FE;\n  border-radius: 10px;\n  display: flex;\n  justify-content: space-around;\n  align-items: center;\n  width: 100px;\n  padding: 4px 0;\n  padding-right: 10px;\n  height: 30px;\n}\n\n\n.card-wrapper{\n  width: 100%;\n  height: 100%;\n  position: relative;\n  background-color: inherit; \n  background-image: inherit;\n}\n\n#explore-end{\n  background-color: inherit;\n  font-size: 20px;\n  position: absolute;\n  top: 50%;\n  transform: translateY(-50%);\n}\n\n\n\n#loading-match-details{\n  margin: auto;\n  background-color: #161616;\n}\n.next-card-icon{\n  width: fit-content;\n  height: auto;\n  position: absolute;\n  top: 45%;\n  right: 18%;\n  z-index: 4;\n  border-radius: 50%;\n  background-color: rgba(68, 58, 87, 0.3);\n  border: 2px solid #272727;\n  padding: 2px;\n}\n\n.next-card-icon:hover{\n  background-color: rgba(68, 58, 87, 0.7);\n  cursor: pointer;\n\n}\n\n.next-card-placeholder {\n  position: absolute;\n  top: 0;\n  left: 36%; \n  transform: translate(-20%, 13%);\n  width: 56%; \n  height: 75%; \n  z-index: 0; \n  border: 2px solid #272727;\n  background-color: #161616;\n  border-radius: 10px;\n}\n\n\n.next{\n  cursor: pointer;\n  background-color: inherit;\n  border-radius: 10px;\n  display: flex;\n  justify-content: space-around;\n  align-items: center;\n  width: 100px;\n  padding: 4px 0;\n  padding-right: 15px;\n  height: 30px;\n  border: 2px solid #272727;\n}\n\n.explore-nav{\n  background-color: #171717;\n  border-bottom: 1.5px solid #2D2D2D;\n}\n\n.explore-nav h3{\n  padding: 10px;\n  background-color: #171717;\n\n}\n@keyframes fadeOut {\n  from {\n    opacity: 1;\n  }\n  to {\n    opacity: 0;\n  }\n}\n\n.fade-out-animation {\n  animation-name: fadeOut;\n  animation-duration: 0.5s; /* Adjust duration as needed */\n  animation-fill-mode: forwards; /* Keeps the element in the end state of the animation */\n}\n\n.navbarStyle{\n  display: flex;\n  justify-content: flex-end;\n  align-items: center;\n  gap: 20px;\n  align-items: center;\n  height: 55px;\n  width: 100%;\n  background-color: #171717;\n  padding: 0 10px; \n};\n\n.next:hover .next-icon{\n  color: white;\n}\n\n.next:hover{\n  border-color: lightgray;\n}\n\n.like-icon{\n  background-color: inherit;\n}\n\n.like:hover .like-icon{\n\n}\n\n.next-icon{\n  background-color: inherit;\n}\n\n.like h3{\n  background-color: #7B00FE;\n}\n\n.three-dots-icon {\n  transition: transform 0.3s ease; \n}\n\n.subject-button:hover .three-dots-icon{\n  transform: rotate(90deg); \n}\n\n.modal {\n  position: fixed; \n  top: 0;\n  left: 0;\n  width: 100%; \n  height: 100%; \n  display: flex;\n  justify-content: center; \n  align-items: center; \n  background-color: rgba(0, 0, 0, 0.5); \n  z-index: 1000; \n}\n\n\n\n.close {\n  position: absolute;\n  top: 10px;\n  right: 15px;\n  cursor: pointer;\n  font-size: 25px;\n}\n\n.modal-subject {\n  padding: 10px;\n  margin: 5px 0;\n  cursor: pointer;\n  border-radius: 4px;\n  transition: background-color 0.3s ease;\n  background-color: inherit;\n  color: black;\n  margin: 10px;\n  border: 2px solid lightgray;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n\n}\n\n.home-container {\n  overflow-y: scroll;\n  height: 100vh;\n  scroll-behavior: smooth;\n}\n\n.checkbox-icon {\n  display: inline-flex;\n  align-items: center;\n  justify-content: center;\n  width: 20px;\n  height: 20px;\n  margin-left: 10px;\n  border: 2px solid black;\n}\n\n.empty-checkbox {\n  width: 100%;\n  height: 100%;\n  background-color: white; \n}\n\n.home-buttons{\n  position: absolute;\n  width: 350px;\n  top: 40%;\n  right: 5%;\n}\n\n\n`,"",{version:3,sources:["webpack://./src/styles/App.css"],names:[],mappings:"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",sourcesContent:["/* CONTAINER */\n.full-width-container{\n  display: flex;\n  position: relative;\n  justify-content: center;\n  width: 100vw;\n  background-color: rgb(25,26,31);\n  align-items: start;\n  height: 100vh; \n}\n\n.h1-stubby {\n  position: absolute;\n  top: 0;\n  left: 0;\n  margin: 0;\n  padding: 1rem 2rem;\n  background: none;\n  font-style: italic;\n  font-size: 80px;\n  color: white;\n}\n\n\n.bg-dark{\n  background-color: rgb(25,26,31);\n\n}\n\n.bg-none{\n  background: none;\n}\n\n.profile-image-preview {\n  width: 100px; \n  height: 100px;\n  object-fit: cover;\n  border-radius: 50%;\n  margin-top: 1rem; \n}\n\n\n\n/* SIDE ALIGNED DIVS */\n.right-aligned-div {\n  width: 38%;\n  margin-left: auto;\n  margin-right: 0;\n  text-align: right;\n  background: none;\n}\n\n.left-aligned-div {\n  width: 30%;\n  margin-right: auto;\n  margin-left: 0;\n  text-align: left;\n}\n\n/* NO BACKGROUND */\n.no-background{\n  background: none;\n}\n/* ------------------------------------------------------------------------------------ */\n\n/* NAVBAR */\n.Navbar{\n  display: flex;\n  padding: 30px 0;\n  margin-left: 10%;\n}\n\n.Navbar h1{\n  font-size: 50px;\n}\n\n.App{\n  background-color: rgb(25,26,31);\n\n}\n\n/* HOME */\n.background-hero {\n  background-image: url('../images/home.jpg'); \n  scroll-snap-align: start;\n  background-size: cover;\n  background-attachment: fixed;\n  background-repeat: no-repeat;\n  background-position: center;\n  min-height: 100vh;\n  position: relative; \n}\n\n\n\n.scrollable-section {\n  height: 100vh; \n  background-color: #f0f0f0; \n  \n}\n\n.background-hero-dark {\n  background-image: url('../images/dark-bg.jpg');\n  background-size: cover;\n  background-position: center;\n  min-height: 100vh;\n}\n\n/* LOGIN & SIGNUP */\n#LogIn{\n  background: none;\n  padding-bottom: 5px;\n\n}\n\n#SignUp{\n  background: none;\n  padding-bottom: 5px;\n}\n.LogIn{\n  display: flex;\n  justify-content: center;\n  width: 300px;\n  text-align: center;\n  padding: 20px; \n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1); \n  border-radius: 8px; \n  background: white; \n  margin-top: 10%;\n}\n\n.LogIn input {\n  margin-bottom: 15px; \n  padding: 12px; \n  border: 1px solid #ddd; \n  border-radius: 4px; \n  font-size: 15px;\n  background-color: #F2E3FE;\n}\n\n.LogIn input:focus {\n  outline: none;\n  border-color: #4A90E2; \n}\n\n.divider {\n  display: flex;\n  align-items: center;\n  margin: 20px 0;\n}\n\n.divider-line {\n  flex: 1;\n  border: none;\n  border-top: 1px solid #000;\n  margin: 0 10px;\n}\n\n.divider-text {\n  padding: 0 10px;\n}\n\n.google-btn {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  padding: 10px 20px;\n  margin-top: 10px; \n  margin-right: 20px;\n  border: none;\n  border-radius: 20px;\n  background-color: #4285F4;\n  color: white;\n  font-weight: bold;\n  cursor: pointer;\n  font-size: 16px; \n}\n\n.google-icon {\n  width: 30px;\n  margin-right: 25px;\n  border-radius: 50%;\n}\n\n.signup-prompt {\n  margin-top: 20px;\n  font-size: 14px; \n}\n\n.signup-link {\n  color: #4285F4;\n  text-decoration: none;\n  font-weight: bold;\n}\n\n.signup-link:hover {\n  text-decoration: underline;\n}\n\n\n/* PROFILE INFORMATION */\n\n.form-container{\n  display: flex;\n  justify-content: center;\n  text-align: center;\n}\n\n.form-container label, div{\n  background-color: rgb(25,26,31);\n  color: white;\n\n}\n\n.custom-hr{\n  width: 100vw;\n  border: 0.5px solid lightgray;\n  margin-bottom: 50px;\n}\n\n.name{\n  display: flex;\n\n}\n\n\n.left-half {\n  width: 100%;\n}\n\n.right-half {\n  width: 50%;\n}\n\n.input-field{\n  padding: 5px;\n  display: flex;\n  flex-direction: column;\n  align-items: start;\n  font-family: monospace;\n\n}\n\n/* STEP 1 */\n\n.step1-input, select.step-1input {\n  width: 75%;\n  padding: 10px;\n  border: 0.5px solid rgb(67, 63, 63); \n  border-radius: 8px;\n  background-color: black;\n  font-size: 15px;\n  font-family: monospace;\n  color: lightgray;\n  margin: 5px 0px;\n}\n\nselect.step1-input{\n  width: 79%;\n  cursor: pointer;\n}\n\n.step1-input:focus {\n  outline: none;\n  border: 1px solid rgb(255, 255, 255);\n}\n\n.form-container label{\n  font-size: 17px;\n\n}\n\n\n.next-back{\n  position: absolute;\n  bottom: 15px;\n  left: 50%; \n  transform: translateX(-50%);\n}\n.step1{\n  background-color: white;\n}\n\n.gender-birthday-image{\n  display: flex;\n}\n.gender-birthday{\n  width: 50%;\n}\n\n.image-input-container {\n  max-width: 200px;\n  height: 300px; \n  margin: 0 auto; \n  flex: 1;\n  \n}\n\n.image-input-container label {\n  display: block;\n  position: relative; \n  width: 78%;\n  height: 70%;\n  outline: 4px dashed #73787e; \n  border-radius: 8px; \n  background-size: cover; \n  cursor: pointer;\n  background-color: rgb(48, 46, 46);\n  overflow: visible;\n}\n\n.image-input-container label::after {\n  content: '+'; \n  position: absolute;\n  bottom: -13px;\n  right: -15px;\n  width: 30px; \n  height: 30px;\n  background: rgb(214, 90, 255); \n  border-radius: 50%; \n  border: 2px solid white;\n  display: flex;\n  z-index: 10;\n  align-items: center;\n  justify-content: center;\n  color: white; \n  font-size: 35px; \n  transition: transform 0.3s ease; \n}\n\n.image-input-container label:hover::after {\n  transform: rotate(90deg); \n}\n\n\n.image-input-container img {\n  width: 100%;\n  height: 100%;\n  object-fit: cover; \n  border-radius: 8px; \n}\n\n\n/* STEP 2 */\n.step-2-flex{\n  display: flex;\n}\n\n.step-2-container {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  flex: 0.6;\n}\n\n.selected-subjects {\n  margin-bottom: 20px;\n  margin-right: 20px;\n  flex: 0.4;\n  padding: 10px;\n  overflow: visible;\n}\n.select-topics-text{\n  width: 70%;\n  text-align: center;\n  font-family: monospace;\n  font-size: 20px;\n}\n.selected-topics-text{\n  width: 100%;\n  text-align: center;\n  font-family: monospace;\n  font-size: 20px;\n}\n\n.custom-subject-input input{\n  width: 80%;\n  padding: 10px;\n  border: 0.5px solid rgb(67, 63, 63); \n  border-radius: 8px;\n  background-color: black;\n  font-size: 15px;\n  font-family: monospace;\n  color: lightgray;\n  margin: 10px;\n\n}\n\n.custom-subject-input input:focus{\n  outline: none;\n  border: 1px solid rgb(255, 255, 255);\n}\n\n.picks{\n  flex: 0.5;\n  display: flex;\n  flex-direction: column;\n  gap: 20px;\n}\n\n\n.predefined-subjects {\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(150px, 1fr)); \n  gap: 10px;\n  width: 100%;\n  max-width: 600px; \n  margin: 0 auto; \n  padding: 10px;\n  \n}\n\n.selected-subjects{\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(150px, 1fr)); \n  gap: 10px;\n  width: 100%;\n  max-width: 600px; \n  margin: 0 auto; \n  height: fit-content;\n\n  \n}\n\n.subject-button, .subject-tag {\n  padding: 10px;\n  border-radius: 20px;\n  cursor: pointer;\n  border: 2px solid rgba(118, 115, 115, 0.5); \n  text-align: center;\n  font-family: monospace;\n  font-size: 15px;\n  color: white;\n  transition: background-color 0.5s ease-out;\n  \n}\n\n.subject-tag{\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 130%;\n  min-height: 30px; \n  max-height: 30px;\n}\n\n.subject-button:hover, .subject-tag:hover {\n  border: 1.5px solid white;\n}\n\n.subject-tag:hover{\n  border: 2px solid rgb(255, 122, 122);\n\n}\n\n.custom-subject-input {\n  margin-top: 20px; \n\n}\n\n.custom-subject-textbox {\n  padding: 10px;\n  border-radius: 5px;\n  border: 1px solid #ddd;\n  background-color: white;\n}\n\n/* STEP 3 */\n.step-3-container {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  margin-top: 20px;\n  gap: 10px;\n  \n}\n\n.step-3-container h4{\n  color: rgb(183, 135, 245);\n  font-weight: bold;\n\n}\n.description-textarea {\n  width: 70%; \n  height: 250px; \n  resize: none; \n  background-color: white;\n  border: none;\n  border-radius: 8px; \n  padding: 15px; \n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1); \n  font-size: 16px;\n  margin-bottom: 10px; \n}\n\n.description-textarea:focus {\n  outline: none; \n}\n\n.character-count {\n  align-self: flex-end; \n  margin-right: 10%; \n  font-size: 14px;\n  color: rgb(183, 135, 245);\n}\n\n/* EXPLORE HOME */\n.explore-home-container {\n  display: flex;\n  width: 100%;\n  height: 100vh;\n  background-color: #F3F8FF;\n}\n\n.user-profile-card h2{\n  font-size: 32px;\n}\n\n.explore-left{\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n  width: 100%;\n  flex: 0.3;\n  overflow-x: hidden;\n  overflow-y: auto;\n  background-color: #161616;\n  border-right: 1px solid #2D2D2D;\n\n}\n\n.explore-hr{\n  width: 100%;\n  border: 0.5px solid #2D2D2D;\n}\n\n.explore-right {\n  display: flex;\n  justify-content: start;\n  align-items: center;\n  flex: 1;\n  height: 100%;\n  width: 100%;\n  flex-direction: column;\n  background-color: #161616; \n  background-image: \n  radial-gradient(circle at top left, rgba(176, 175, 178, 0.1), transparent 30%),\n  radial-gradient(circle at bottom right, rgba(176, 175, 178, 0.1), transparent 30%);\n  position: relative;\n  overflow: hidden;\n\n}\n\n.explore-right h1{\n  font-size: 60px;\n  padding-bottom: 20px;\n  font-style: italic;\n  background-color: #F3F8FF;\n  color: rgb(183, 135, 245);\n  z-index: 10;\n}\n\n.matches-messages-container {\n  margin: 10px auto;\n  width: 70%; \n  padding: 3px;\n  height: 30px; \n  background-color: #161616; \n  border-radius: 20px; \n  border: 1px solid rgba(81, 77, 77, 0.5);\n\n}\n\n.slider-indicator {\n  width: 50%;\n  height: 100%;\n  transition: all 0.3s ease;\n  z-index: 0;\n  background-color: #373737;\n}\n\n.toggle-button {\n  width: 50%; \n  padding: 10px 0;\n  border: none;\n  background: transparent; \n  color: white;\n  cursor: pointer;\n  z-index: 1; \n  transition: all 0.3s ease;\n  text-align: center;\n\n}\n\n.text-gray-400 {\n  color: #666; \n}\n\n.left-0 {\n  left: 0;\n}\n\n.right-0 {\n  right: 0;\n}\n\n.slider-indicator.matches {\n  transform: translateX(0%);\n}\n\n.slider-indicator.messages {\n  transform: translateX(100%);\n}\n\n.user-profile-card {\n  position: absolute;\n  top: -20px;\n  left: 50%; \n  transform: translate(-50%);\n  display: flex;\n  flex-direction: column;\n  border-radius: 10px;\n  padding: 35px;\n  margin-top: 80px;\n  width: 50%;\n  height: 500px;\n  align-items: center;\n  background-color: #161616;\n  border: 2px solid #272727;\n  z-index: 1;\n}\n.user-profile-card-match {\n  position: absolute;\n  top: 20px;\n  left: 50%; \n  transform: translate(-50%);\n  display: flex;\n  flex-direction: column;\n  border-radius: 10px;\n  padding: 35px;\n  margin-top: 80px;\n  width: 50%;\n  height: 500px;\n  align-items: center;\n  background-color: #161616;\n  border: 2px solid #272727;\n  z-index: 1;\n}\n\n.user-info {\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  background-color: #161616;\n  overflow: visible;\n}\n\n.user-card-top h2,h3,p{\n  background-color: #161616;\n}\n\n.user-details {\n  margin-left: 20px;\n  background-color: #161616;\n}\n\n\n\n.user-card-top{\n  display: flex;\n  gap: 5%;\n  width: 100%;\n  justify-content: start;\n  align-items: center;\n  flex: 0.5;\n  background-color: #161616;\n  overflow: visible;\n\n}\n\n.user-card-bottom{\n  flex: 0.8;\n  background-color: #161616;\n  display: flex;\n  margin-top: 25px;\n  flex-direction: column;\n  justify-content: start;\n  height: 100%;\n}\n\n.user-card-right p{\n  font-size: 18px;\n}\n\n.user-card-right h2{\n  background-color: #161616;\n  \n}\n\n.profile-image {\n  width: 200px; \n  height: 200px;\n  object-fit: cover;\n  border-radius: 3%;\n}\n\n.message-button{\n  position: absolute;\n  bottom: 25px;\n  left: 0;\n  right: 0;\n  margin-left: auto;\n  margin-right: auto;\n  background-color: #7B00FE;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 100px;\n  padding: 4px 6px;\n  height: 30px;\n  border: 1.5px solid #272727;\n  border-radius: 10px;\n  cursor: pointer;\n  gap: 5px;\n}\n\n.message-button h4{\n  background-color: inherit;\n  padding-bottom: 3px;\n  font-weight: normal;\n\n}\n\n.message-button:hover{\n  border: 1.5px solid white;\n}\n\n.message-icon{\n  background-color: inherit;\n}\n\n.message-container {\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n  width: 100%;\n  background-color: #161616; \n  background-image: \n  radial-gradient(circle at top left, rgba(176, 175, 178, 0.1), transparent 30%),\n  radial-gradient(circle at bottom right, rgba(176, 175, 178, 0.1), transparent 30%);\n}\n.message-container-hr{\n  display: flex;\n  flex-direction: column;\n  background-color: inherit;\n}\n\n\n.message-subcontainer{\n  height: 95%;\n  width: 95%;  \n  background-color: #161616; \n  margin: auto;\n  border: 2px solid #2D2D2D;\n  border-radius: 10px;\n  display: flex;\n  flex-direction: column;\n  overflow-x: hidden;\n  box-sizing: border-box;\n}\n\n.message-list {\n  overflow-y: auto;\n  width: 100%;\n  height: 90%;\n  padding: 10px;\n  background-color: inherit;\n  box-sizing: border-box;\n}\n\n.message-separate {\n  background-color: red;\n}\n\n.match-info {\n  background-color: #252525;\n  display: flex;\n  align-items: center;\n  width: 100%;\n  padding: 5px;\n}\n\n.dots-vertical{\n  margin-left: auto;\n  padding: 5px;\n  margin-right: 10px;\n  border-radius: 5px;\n  cursor: pointer;\n  background-color: rgba(255,255,255,0.1);\n}\n\n.timestamp-right{\n  text-align: right;\n\n}\n.message-and-timestamp, .timestamp{\n  width: 100%;\n  background-color: #161616;\n}\n\n\n.timestamp-left{\n  text-align: left;\n}\n\n.send-button{\n  background-color: #7B00FE;\n  margin-left: auto;\n  padding: 5px;\n  margin-right: 10px;\n  border-radius: 5px;\n  cursor: pointer;\n}\n\n.match-info h2{\n  background-color: inherit;\n}\n\n.message-sent, .message-received {\n  display: block;\n  margin-bottom: 15px;\n  padding: 10px;\n  border-radius: 10px;\n  max-width: 60%;\n  width: fit-content;\n  word-break: break-word;\n  position: relative;\n  overflow: visible;\n}\n\n.message-sent::after {\n  content: '';\n  position: absolute;\n  bottom: -10px;\n  right: -5px; /* Adjust for sent messages */\n  border-width: 10px;\n  border-style: solid;\n  border-color: rgb(81, 178, 237) transparent transparent rgb(81, 178, 237);\n  transform: rotate(45deg);\n  overflow: visible;\n}\n\n.message-received::after {\n  content: '';\n  position: absolute;\n  bottom: -10px;\n  left: -5px; /* Adjust for received messages */\n  border-width: 10px;\n  border-style: solid;\n  border-color: white transparent transparent white;\n  transform: rotate(45deg);\n  overflow: visible;\n\n}\n\n.message-sent {\n  color: white;\n  justify-content: end;\n  margin-left: auto; \n  margin-right: 10px;\n  background-color: rgb(81, 178, 237);\n}\n\n.active-status {\n  color: rgb(5, 185, 5);\n  font-family: system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\n}\n\n.inactive-status {\n  color: gray;\n}\n\n.status-dot {\n  width: 10px;\n  height: 10px;\n  border-radius: 50%;\n  position: absolute;\n  bottom: 17px; \n  right: 10px;\n  border: 2px solid white;\n  transform: translate(50%, 50%);\n}\n\n.status-dot.active {\n  background-color: rgb(6, 180, 6);\n}\n\n.status-dot.inactive {\n  background-color: gray;\n}\n\n.user-image-message-container {\n  border-radius: 50%; \n  object-fit: cover;\n  background: none;\n  position: relative; \n  display: inline-block;\n  overflow: visible;\n}\n\n.user-image-message {\n  width: 50px; \n  height: 50px; \n  margin: 10px 0 10px 10px;\n  border-radius: 50%; \n  object-fit: cover;\n  background: none;\n  border: 1px solid white;\n}\n\n.active-status, .inactive-status {\n  margin-top: 5px;\n  background-color: inherit;\n  font-family: 'Trebuchet MS', 'Lucida Sans Unicode', 'Lucida Grande', 'Lucida Sans', Arial, sans-serif;\n  font-weight: lighter;\n}\n\n.user-details {\n  display: flex;\n  flex-direction: column;\n  background-color: inherit;\n}\n.message-input{\n  background-color: #131313;\n  display: flex; \n  padding: 10px; \n  border-top: 2px solid #2D2D2D;\n  height: 50px;\n  padding: 10px;\n  color: white;\n  font-weight: bold;\n}\n\n.message-image {\n  flex: 0.5;\n  width: 50px;\n  height: 50px;\n  object-fit: cover;\n  border-radius: 50%;\n}\n\n.message-hr{\n  border: 1px solid #2D2D2D;\n  margin: 5px 0 5px 0;\n\n}\n.message-info{\n  color: white;\n  display: flex;\n}\n\n.message-send{\n  display: flex;\n  justify-content: space-around;\n  align-items: center;\n  border: 1px solid #2D2D2D;\n  width: 100%;\n  background-color: #2B2B2B;\n  border-radius: 5px;\n}\n\n.message-input input{\n  background-color: inherit;\n  width: 95%;\n  text-decoration: none;\n  border: none;\n  outline: none;\n  color: white;\n  font-size: 15px;\n  padding: 0px 10px;\n\n}\n\n.message-received {\n  color: black;\n  align-self: flex-start;\n  background-color: white;\n  margin-left: 10px;\n}\n\n\n.interest-card-container{\n  display: flex;\n  gap: 10px;\n  background-color: #161616;\n  padding: 10px 0;\n\n}\n\n.user-interests{\n  background-color: #202020;\n  width: fit-content;\n  padding: 7px 15px;\n  border-radius: 25px;\n}\n\n.user-description {\n  background-color: #161616;\n  text-align: justify;\n  display: flex;\n  justify-content: start;\n  padding-bottom: 20px;\n  line-height: 1.5;\n}\n\n.user-description p{\n  color: rgb(173, 172, 172);\n}\n\n.gray{\n  color: rgb(173, 172, 172);\n}\n\n.interaction-buttons {\n  display: flex;\n  justify-content: space-between;\n  position: absolute;\n  bottom: 20px;\n  left: 0;\n  right: 0;\n  margin-left: auto;\n  margin-right: auto;\n  width: fit-content;\n  background-color: #161616; \n  gap: 20px;\n\n}\n\n.explore-right button {\n  padding: 10px 20px;\n  margin: 0 5px;\n  border-radius: 5px;\n  cursor: pointer;\n  border: 1px solid #4285F4;\n  background-color: #F3F8FF;\n  transition: background-color 0.3s;\n}\n\n.explore-right button:hover {\n  background-color: #4285F4;\n  color: white;\n}\n\n.user-image {\n  width: 40px; \n  height: 40px; \n  border-radius: 50%; \n  object-fit: cover;\n  background: none;\n}\n\n\n\n\n\n\n.current-user{\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background: none;\n  gap: 15px;\n  padding: 20px;\n}\n\n.current-user-info h4{\n  background-color: #161616;\n  padding: 5px 0;\n}\n\n.user-information{\n  background-color: inherit;\n  display: flex;\n  flex-direction: column;\n  gap: 5px;\n}\n\n.current-email{\n  font-weight: 300;\n  font-size: 15px;\n}\n\n.current-user img{\n  width: 90px;\n  height: 90px;\n  border: 2px solid #373737;\n}\n\n\n\n.explore {\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  background-color: #161616;\n  padding: 20px;\n  text-align: center;\n\n}\n\n.match-image {\n  border: 2px solid #2D2D2D;\n  width: 100px;\n  height: 100px;\n  object-fit: cover;\n  border-radius: 50%;\n}\n\n.message-image {\n  width: 50px;\n  height: 50px;\n  object-fit: cover;\n  border-radius: 50%;\n}\n\n.match-name {\n  color: white;\n  background-color: inherit;\n}\n\n.match-description{\n  font-size: 12px;\n  background-color: inherit;\n  text-align: justify;\n  color: lightgray;\n}\n\n.match {\n  display: flex;\n  gap: 10px;\n  border-radius: 20px;\n  background-color: #161616;\n  padding: 5px;\n  cursor: pointer;\n}\n\n.message {\n  display: flex;\n  gap: 10px;\n  border-radius: 20px;\n  background-color: #161616;\n  padding: 5px;\n  cursor: pointer;\n}\n\n.match:hover{\n  background-color: #373737;\n}\n\n.message:hover{\n  background-color: #373737;\n}\n\n.match-text{\n  display: flex;\n  flex-direction: column;\n  align-items: start;\n  flex: 1;\n  background-color: inherit;\n  justify-content: center;\n  height: 90%;\n}\n\n.message-text{\n  display: flex;\n  flex-direction: column;\n  align-items: start;\n  flex: 2;\n  background-color: inherit;\n  justify-content: center;\n  height: 90%;\n}\n\n\n.like{\n  cursor: pointer;\n  color: white;\n  background-color: #7B00FE;\n  border-radius: 10px;\n  display: flex;\n  justify-content: space-around;\n  align-items: center;\n  width: 100px;\n  padding: 4px 0;\n  padding-right: 10px;\n  height: 30px;\n}\n\n\n.card-wrapper{\n  width: 100%;\n  height: 100%;\n  position: relative;\n  background-color: inherit; \n  background-image: inherit;\n}\n\n#explore-end{\n  background-color: inherit;\n  font-size: 20px;\n  position: absolute;\n  top: 50%;\n  transform: translateY(-50%);\n}\n\n\n\n#loading-match-details{\n  margin: auto;\n  background-color: #161616;\n}\n.next-card-icon{\n  width: fit-content;\n  height: auto;\n  position: absolute;\n  top: 45%;\n  right: 18%;\n  z-index: 4;\n  border-radius: 50%;\n  background-color: rgba(68, 58, 87, 0.3);\n  border: 2px solid #272727;\n  padding: 2px;\n}\n\n.next-card-icon:hover{\n  background-color: rgba(68, 58, 87, 0.7);\n  cursor: pointer;\n\n}\n\n.next-card-placeholder {\n  position: absolute;\n  top: 0;\n  left: 36%; \n  transform: translate(-20%, 13%);\n  width: 56%; \n  height: 75%; \n  z-index: 0; \n  border: 2px solid #272727;\n  background-color: #161616;\n  border-radius: 10px;\n}\n\n\n.next{\n  cursor: pointer;\n  background-color: inherit;\n  border-radius: 10px;\n  display: flex;\n  justify-content: space-around;\n  align-items: center;\n  width: 100px;\n  padding: 4px 0;\n  padding-right: 15px;\n  height: 30px;\n  border: 2px solid #272727;\n}\n\n.explore-nav{\n  background-color: #171717;\n  border-bottom: 1.5px solid #2D2D2D;\n}\n\n.explore-nav h3{\n  padding: 10px;\n  background-color: #171717;\n\n}\n@keyframes fadeOut {\n  from {\n    opacity: 1;\n  }\n  to {\n    opacity: 0;\n  }\n}\n\n.fade-out-animation {\n  animation-name: fadeOut;\n  animation-duration: 0.5s; /* Adjust duration as needed */\n  animation-fill-mode: forwards; /* Keeps the element in the end state of the animation */\n}\n\n.navbarStyle{\n  display: flex;\n  justify-content: flex-end;\n  align-items: center;\n  gap: 20px;\n  align-items: center;\n  height: 55px;\n  width: 100%;\n  background-color: #171717;\n  padding: 0 10px; \n};\n\n.next:hover .next-icon{\n  color: white;\n}\n\n.next:hover{\n  border-color: lightgray;\n}\n\n.like-icon{\n  background-color: inherit;\n}\n\n.like:hover .like-icon{\n\n}\n\n.next-icon{\n  background-color: inherit;\n}\n\n.like h3{\n  background-color: #7B00FE;\n}\n\n.three-dots-icon {\n  transition: transform 0.3s ease; \n}\n\n.subject-button:hover .three-dots-icon{\n  transform: rotate(90deg); \n}\n\n.modal {\n  position: fixed; \n  top: 0;\n  left: 0;\n  width: 100%; \n  height: 100%; \n  display: flex;\n  justify-content: center; \n  align-items: center; \n  background-color: rgba(0, 0, 0, 0.5); \n  z-index: 1000; \n}\n\n\n\n.close {\n  position: absolute;\n  top: 10px;\n  right: 15px;\n  cursor: pointer;\n  font-size: 25px;\n}\n\n.modal-subject {\n  padding: 10px;\n  margin: 5px 0;\n  cursor: pointer;\n  border-radius: 4px;\n  transition: background-color 0.3s ease;\n  background-color: inherit;\n  color: black;\n  margin: 10px;\n  border: 2px solid lightgray;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n\n}\n\n.home-container {\n  overflow-y: scroll;\n  height: 100vh;\n  scroll-behavior: smooth;\n}\n\n.checkbox-icon {\n  display: inline-flex;\n  align-items: center;\n  justify-content: center;\n  width: 20px;\n  height: 20px;\n  margin-left: 10px;\n  border: 2px solid black;\n}\n\n.empty-checkbox {\n  width: 100%;\n  height: 100%;\n  background-color: white; \n}\n\n.home-buttons{\n  position: absolute;\n  width: 350px;\n  top: 40%;\n  right: 5%;\n}\n\n\n"],sourceRoot:""}]);const p=A},439:(n,t,e)=>{"use strict";e.d(t,{Z:()=>s});var r=e(537),i=e.n(r),o=e(645),a=e.n(o)()(i());a.push([n.id,"@keyframes fadeInScaleUp {\n    from {\n      opacity: 0;\n      transform: scale(0.95);\n    }\n    to {\n      opacity: 1;\n      transform: scale(1);\n    }\n  }\n  \n  .modal-content {\n    width: 20%; \n    padding: 20px;\n    background: white; \n    border-radius: 8px;\n    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1); \n    z-index: 1001; \n    animation: fadeInScaleUp 0.5s ease-out forwards; \n  \n  \n  }\n\n  /* ANIMATIONS */\n.blinker {\n    display: inline-block;\n    vertical-align: relative;\n    height: 20px;\n    width: 3px;\n    background-color: white;\n    animation: blink-animation 1s step-start infinite;\n}\n\n@keyframes blink-animation {\n50% {\n    background-color: transparent;\n}\n}\n\n@keyframes matchAnimation {\n  0% { transform: scale(0); opacity: 0; }\n  50% { transform: scale(1.2); opacity: 1; }\n  100% { transform: scale(1); opacity: 1; }\n}\n\n.match-confirmed {\n  animation: matchAnimation 2s ease-in-out;\n  width: 100%;\n}\n\n/* Add this CSS in your stylesheet */\n@keyframes spin {\n  0%, 100% {\n    transform: rotate(0deg);\n  }\n  25% {\n    transform: rotate(180deg);\n  }\n  50% {\n    transform: rotate(360deg);\n  }\n  75% {\n    transform: rotate(540deg);\n  }\n}\n\n@keyframes spin-slow {\n  0%, 100% {\n    transform: rotate(0deg);\n  }\n  50% {\n    transform: rotate(180deg);\n  }\n}\n\n.loading-ring {\n  content: ' ';\n  display: inline-block;\n  width: 50px;\n  height: 50px;\n  border: 4px solid #f3f3f3;\n  border-radius: 50%;\n  border-top: 4px solid #865dd7;\n  animation: spin 3s linear infinite;\n  margin: auto;\n  z-index: 1002;\n}\n\n\n@keyframes slideInGrow {\n  from {\n    opacity: 0;\n    transform: translateX(-30px) scale(0.9);\n  }\n  to {\n    opacity: 1;\n    transform: translateX(0) scale(1);\n  }\n}\n\n.slideInGrow {\n  animation: slideInGrow 1s ease forwards;\n}\n","",{version:3,sources:["webpack://./src/styles/animations.css"],names:[],mappings:"AAAA;IACI;MACE,UAAU;MACV,sBAAsB;IACxB;IACA;MACE,UAAU;MACV,mBAAmB;IACrB;EACF;;EAEA;IACE,UAAU;IACV,aAAa;IACb,iBAAiB;IACjB,kBAAkB;IAClB,wCAAwC;IACxC,aAAa;IACb,+CAA+C;;;EAGjD;;EAEA,eAAe;AACjB;IACI,qBAAqB;IACrB,wBAAwB;IACxB,YAAY;IACZ,UAAU;IACV,uBAAuB;IACvB,iDAAiD;AACrD;;AAEA;AACA;IACI,6BAA6B;AACjC;AACA;;AAEA;EACE,KAAK,mBAAmB,EAAE,UAAU,EAAE;EACtC,MAAM,qBAAqB,EAAE,UAAU,EAAE;EACzC,OAAO,mBAAmB,EAAE,UAAU,EAAE;AAC1C;;AAEA;EACE,wCAAwC;EACxC,WAAW;AACb;;AAEA,oCAAoC;AACpC;EACE;IACE,uBAAuB;EACzB;EACA;IACE,yBAAyB;EAC3B;EACA;IACE,yBAAyB;EAC3B;EACA;IACE,yBAAyB;EAC3B;AACF;;AAEA;EACE;IACE,uBAAuB;EACzB;EACA;IACE,yBAAyB;EAC3B;AACF;;AAEA;EACE,YAAY;EACZ,qBAAqB;EACrB,WAAW;EACX,YAAY;EACZ,yBAAyB;EACzB,kBAAkB;EAClB,6BAA6B;EAC7B,kCAAkC;EAClC,YAAY;EACZ,aAAa;AACf;;;AAGA;EACE;IACE,UAAU;IACV,uCAAuC;EACzC;EACA;IACE,UAAU;IACV,iCAAiC;EACnC;AACF;;AAEA;EACE,uCAAuC;AACzC",sourcesContent:["@keyframes fadeInScaleUp {\n    from {\n      opacity: 0;\n      transform: scale(0.95);\n    }\n    to {\n      opacity: 1;\n      transform: scale(1);\n    }\n  }\n  \n  .modal-content {\n    width: 20%; \n    padding: 20px;\n    background: white; \n    border-radius: 8px;\n    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1); \n    z-index: 1001; \n    animation: fadeInScaleUp 0.5s ease-out forwards; \n  \n  \n  }\n\n  /* ANIMATIONS */\n.blinker {\n    display: inline-block;\n    vertical-align: relative;\n    height: 20px;\n    width: 3px;\n    background-color: white;\n    animation: blink-animation 1s step-start infinite;\n}\n\n@keyframes blink-animation {\n50% {\n    background-color: transparent;\n}\n}\n\n@keyframes matchAnimation {\n  0% { transform: scale(0); opacity: 0; }\n  50% { transform: scale(1.2); opacity: 1; }\n  100% { transform: scale(1); opacity: 1; }\n}\n\n.match-confirmed {\n  animation: matchAnimation 2s ease-in-out;\n  width: 100%;\n}\n\n/* Add this CSS in your stylesheet */\n@keyframes spin {\n  0%, 100% {\n    transform: rotate(0deg);\n  }\n  25% {\n    transform: rotate(180deg);\n  }\n  50% {\n    transform: rotate(360deg);\n  }\n  75% {\n    transform: rotate(540deg);\n  }\n}\n\n@keyframes spin-slow {\n  0%, 100% {\n    transform: rotate(0deg);\n  }\n  50% {\n    transform: rotate(180deg);\n  }\n}\n\n.loading-ring {\n  content: ' ';\n  display: inline-block;\n  width: 50px;\n  height: 50px;\n  border: 4px solid #f3f3f3;\n  border-radius: 50%;\n  border-top: 4px solid #865dd7;\n  animation: spin 3s linear infinite;\n  margin: auto;\n  z-index: 1002;\n}\n\n\n@keyframes slideInGrow {\n  from {\n    opacity: 0;\n    transform: translateX(-30px) scale(0.9);\n  }\n  to {\n    opacity: 1;\n    transform: translateX(0) scale(1);\n  }\n}\n\n.slideInGrow {\n  animation: slideInGrow 1s ease forwards;\n}\n"],sourceRoot:""}]);const s=a},236:(n,t,e)=>{"use strict";e.d(t,{Z:()=>u});var r=e(537),i=e.n(r),o=e(645),a=e.n(o),s=e(271),c=e(721),l=a()(i());l.i(s.Z),l.i(c.Z),l.push([n.id,"\nbody {\n    margin: 0;\n    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',\n      'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',\n      sans-serif;\n    -webkit-font-smoothing: antialiased;\n    -moz-osx-font-smoothing: grayscale;\n  }\n  \n  code {\n    font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',\n      monospace;\n}\n\n*{\n  margin: 0;\n  padding: 0;\n  background-color: rgb(25,26,31);\n  overflow-y: hidden;\n  user-select: none;\n}\n\nbody, html {\n  margin: 0;\n  padding: 0;\n}\na{\n  text-decoration: none;\n  color: inherit;\n}\n  ","",{version:3,sources:["webpack://./src/styles/base.css"],names:[],mappings:";AAIA;IACI,SAAS;IACT;;gBAEY;IACZ,mCAAmC;IACnC,kCAAkC;EACpC;;EAEA;IACE;eACW;AACf;;AAEA;EACE,SAAS;EACT,UAAU;EACV,+BAA+B;EAC/B,kBAAkB;EAClB,iBAAiB;AACnB;;AAEA;EACE,SAAS;EACT,UAAU;AACZ;AACA;EACE,qBAAqB;EACrB,cAAc;AAChB",sourcesContent:["\n@import 'tailwindcss/components';\n@import 'tailwindcss/utilities';\n\nbody {\n    margin: 0;\n    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',\n      'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',\n      sans-serif;\n    -webkit-font-smoothing: antialiased;\n    -moz-osx-font-smoothing: grayscale;\n  }\n  \n  code {\n    font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',\n      monospace;\n}\n\n*{\n  margin: 0;\n  padding: 0;\n  background-color: rgb(25,26,31);\n  overflow-y: hidden;\n  user-select: none;\n}\n\nbody, html {\n  margin: 0;\n  padding: 0;\n}\na{\n  text-decoration: none;\n  color: inherit;\n}\n  "],sourceRoot:""}]);const u=l},79:(n,t,e)=>{"use strict";e.d(t,{Z:()=>s});var r=e(537),i=e.n(r),o=e(645),a=e.n(o)()(i());a.push([n.id,".dev-buttons{\n    position: absolute;\n    bottom: 0;\n    margin-left: 50%;\n}","",{version:3,sources:["webpack://./src/styles/components.css"],names:[],mappings:"AAAA;IACI,kBAAkB;IAClB,SAAS;IACT,gBAAgB;AACpB",sourcesContent:[".dev-buttons{\n    position: absolute;\n    bottom: 0;\n    margin-left: 50%;\n}"],sourceRoot:""}]);const s=a},626:(n,t,e)=>{"use strict";e.d(t,{Z:()=>s});var r=e(537),i=e.n(r),o=e(645),a=e.n(o)()(i());a.push([n.id,"\n\n.button-container{\n    display: flex;\n    gap: 10%;\n  }\n  \n\n\n.button-signup, .button-login{\n    border: 2px solid rgba(131, 69, 203, 0.5);\n}\n.flex-col{\n    display: flex;\n    flex-direction: column;\n}\n\n.link{\ncolor: blue;\n}","",{version:3,sources:["webpack://./src/styles/helpers.css"],names:[],mappings:";;AAEA;IACI,aAAa;IACb,QAAQ;EACV;;;;AAIF;IACI,yCAAyC;AAC7C;AACA;IACI,aAAa;IACb,sBAAsB;AAC1B;;AAEA;AACA,WAAW;AACX",sourcesContent:["\n\n.button-container{\n    display: flex;\n    gap: 10%;\n  }\n  \n\n\n.button-signup, .button-login{\n    border: 2px solid rgba(131, 69, 203, 0.5);\n}\n.flex-col{\n    display: flex;\n    flex-direction: column;\n}\n\n.link{\ncolor: blue;\n}"],sourceRoot:""}]);const s=a},309:(n,t,e)=>{"use strict";e.d(t,{Z:()=>s});var r=e(537),i=e.n(r),o=e(645),a=e.n(o)()(i());a.push([n.id," /* HOME */\n\n.stubby-home{\n     position: fixed;\n     top: 0px;\n     right: 100px;\n     z-index: 6;\n}\n\n.app-info-image{\n    width: 150px;\n    height: 200px;\n    object-fit: cover;\n    border-radius: 10px;\n}\n.scrollable-content {\n    background-color: #2d2d2d; \n    color: white;\n    padding: 20px;\n    text-align: center;\n    height: 100vh;\n}\n.contact-section{\n    background-color: #2d2d2d; \n\n}\n\n.scroll-indicator {\n    background: none;\n    position: fixed;\n    right: 20px;\n    bottom: 20px;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    cursor: pointer;\n    z-index: 1000; /* Ensure it's visible above other content */\n    animation: bounce 2s infinite;\n  }\n  \n  .scroll-arrow {\n    background: none;\n    border: solid currentColor; \n    border-width: 0 6px 6px 0;\n    display: inline-block;\n    padding: 3px;\n    transform: rotate(45deg);\n    transition: transform 0.3s ease-in-out;\n    width: 20px;\n    height: 20px;\n    margin: 20px;\n  }\n  \n  .flipped .scroll-arrow {\n    transform: rotate(-135deg); /* Flips the arrow */\n  }\n  \n  @keyframes bounce {\n    0%, 20%, 50%, 80%, 100% {\n      transform: translateY(0);\n    }\n    40% {\n      transform: translateY(-30px);\n    }\n    60% {\n      transform: translateY(-15px);\n    }\n  }\n  ","",{version:3,sources:["webpack://./src/styles/home.css"],names:[],mappings:"CAAC,SAAS;;AAEV;KACK,eAAe;KACf,QAAQ;KACR,YAAY;KACZ,UAAU;AACf;;AAEA;IACI,YAAY;IACZ,aAAa;IACb,iBAAiB;IACjB,mBAAmB;AACvB;AACA;IACI,yBAAyB;IACzB,YAAY;IACZ,aAAa;IACb,kBAAkB;IAClB,aAAa;AACjB;AACA;IACI,yBAAyB;;AAE7B;;AAEA;IACI,gBAAgB;IAChB,eAAe;IACf,WAAW;IACX,YAAY;IACZ,aAAa;IACb,sBAAsB;IACtB,mBAAmB;IACnB,eAAe;IACf,aAAa,EAAE,4CAA4C;IAC3D,6BAA6B;EAC/B;;EAEA;IACE,gBAAgB;IAChB,0BAA0B;IAC1B,yBAAyB;IACzB,qBAAqB;IACrB,YAAY;IACZ,wBAAwB;IACxB,sCAAsC;IACtC,WAAW;IACX,YAAY;IACZ,YAAY;EACd;;EAEA;IACE,0BAA0B,EAAE,oBAAoB;EAClD;;EAEA;IACE;MACE,wBAAwB;IAC1B;IACA;MACE,4BAA4B;IAC9B;IACA;MACE,4BAA4B;IAC9B;EACF",sourcesContent:[" /* HOME */\n\n.stubby-home{\n     position: fixed;\n     top: 0px;\n     right: 100px;\n     z-index: 6;\n}\n\n.app-info-image{\n    width: 150px;\n    height: 200px;\n    object-fit: cover;\n    border-radius: 10px;\n}\n.scrollable-content {\n    background-color: #2d2d2d; \n    color: white;\n    padding: 20px;\n    text-align: center;\n    height: 100vh;\n}\n.contact-section{\n    background-color: #2d2d2d; \n\n}\n\n.scroll-indicator {\n    background: none;\n    position: fixed;\n    right: 20px;\n    bottom: 20px;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    cursor: pointer;\n    z-index: 1000; /* Ensure it's visible above other content */\n    animation: bounce 2s infinite;\n  }\n  \n  .scroll-arrow {\n    background: none;\n    border: solid currentColor; \n    border-width: 0 6px 6px 0;\n    display: inline-block;\n    padding: 3px;\n    transform: rotate(45deg);\n    transition: transform 0.3s ease-in-out;\n    width: 20px;\n    height: 20px;\n    margin: 20px;\n  }\n  \n  .flipped .scroll-arrow {\n    transform: rotate(-135deg); /* Flips the arrow */\n  }\n  \n  @keyframes bounce {\n    0%, 20%, 50%, 80%, 100% {\n      transform: translateY(0);\n    }\n    40% {\n      transform: translateY(-30px);\n    }\n    60% {\n      transform: translateY(-15px);\n    }\n  }\n  "],sourceRoot:""}]);const s=a},331:(n,t,e)=>{"use strict";e.d(t,{Z:()=>s});var r=e(537),i=e.n(r),o=e(645),a=e.n(o)()(i());a.push([n.id,".profile-preview {\n    border: 1px solid #ccc;\n    padding: 20px;\n    border-radius: 10px;\n    text-align: center;\n    width: 400px;\n    height: 400px;\n    background-color: rgb(23, 23, 23);\n  }\n  \n.preview-image {\n    width: 140px;\n    height: 140px;\n    border-radius: 10px;\n    object-fit: cover;\n    margin-bottom: 10px;\n}\n\n.preview-interest-card-container{\n    display: flex;\n    gap: 10px;\n    background-color: #161616;\n    padding: 10px 0;\n    background: none;\n  }\n  \n  .preview-user-interests{\n    background-color: #202020;\n    width: fit-content;\n    padding: 3px 10px;\n    border-radius: 25px;\n  }","",{version:3,sources:["webpack://./src/styles/signUpForm.css"],names:[],mappings:"AAAA;IACI,sBAAsB;IACtB,aAAa;IACb,mBAAmB;IACnB,kBAAkB;IAClB,YAAY;IACZ,aAAa;IACb,iCAAiC;EACnC;;AAEF;IACI,YAAY;IACZ,aAAa;IACb,mBAAmB;IACnB,iBAAiB;IACjB,mBAAmB;AACvB;;AAEA;IACI,aAAa;IACb,SAAS;IACT,yBAAyB;IACzB,eAAe;IACf,gBAAgB;EAClB;;EAEA;IACE,yBAAyB;IACzB,kBAAkB;IAClB,iBAAiB;IACjB,mBAAmB;EACrB",sourcesContent:[".profile-preview {\n    border: 1px solid #ccc;\n    padding: 20px;\n    border-radius: 10px;\n    text-align: center;\n    width: 400px;\n    height: 400px;\n    background-color: rgb(23, 23, 23);\n  }\n  \n.preview-image {\n    width: 140px;\n    height: 140px;\n    border-radius: 10px;\n    object-fit: cover;\n    margin-bottom: 10px;\n}\n\n.preview-interest-card-container{\n    display: flex;\n    gap: 10px;\n    background-color: #161616;\n    padding: 10px 0;\n    background: none;\n  }\n  \n  .preview-user-interests{\n    background-color: #202020;\n    width: fit-content;\n    padding: 3px 10px;\n    border-radius: 25px;\n  }"],sourceRoot:""}]);const s=a},645:n=>{"use strict";n.exports=function(n){var t=[];return t.toString=function(){return this.map((function(t){var e="",r=void 0!==t[5];return t[4]&&(e+="@supports (".concat(t[4],") {")),t[2]&&(e+="@media ".concat(t[2]," {")),r&&(e+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),e+=n(t),r&&(e+="}"),t[2]&&(e+="}"),t[4]&&(e+="}"),e})).join("")},t.i=function(n,e,r,i,o){"string"==typeof n&&(n=[[null,n,void 0]]);var a={};if(r)for(var s=0;s<this.length;s++){var c=this[s][0];null!=c&&(a[c]=!0)}for(var l=0;l<n.length;l++){var u=[].concat(n[l]);r&&a[u[0]]||(void 0!==o&&(void 0===u[5]||(u[1]="@layer".concat(u[5].length>0?" ".concat(u[5]):""," {").concat(u[1],"}")),u[5]=o),e&&(u[2]?(u[1]="@media ".concat(u[2]," {").concat(u[1],"}"),u[2]=e):u[2]=e),i&&(u[4]?(u[1]="@supports (".concat(u[4],") {").concat(u[1],"}"),u[4]=i):u[4]="".concat(i)),t.push(u))}},t}},667:n=>{"use strict";n.exports=function(n,t){return t||(t={}),n?(n=String(n.__esModule?n.default:n),/^['"].*['"]$/.test(n)&&(n=n.slice(1,-1)),t.hash&&(n+=t.hash),/["'() \t\n]|(%20)/.test(n)||t.needQuotes?'"'.concat(n.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):n):n}},537:n=>{"use strict";n.exports=function(n){var t=n[1],e=n[3];if(!e)return t;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(e)))),i="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),o="/*# ".concat(i," */");return[t].concat([o]).join("\n")}return[t].join("\n")}},408:(n,t)=>{"use strict";var e=Symbol.for("react.element"),r=Symbol.for("react.portal"),i=Symbol.for("react.fragment"),o=Symbol.for("react.strict_mode"),a=Symbol.for("react.profiler"),s=Symbol.for("react.provider"),c=Symbol.for("react.context"),l=Symbol.for("react.forward_ref"),u=Symbol.for("react.suspense"),A=Symbol.for("react.memo"),d=Symbol.for("react.lazy"),f=Symbol.iterator,p={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},h=Object.assign,m={};function g(n,t,e){this.props=n,this.context=t,this.refs=m,this.updater=e||p}function b(){}function y(n,t,e){this.props=n,this.context=t,this.refs=m,this.updater=e||p}g.prototype.isReactComponent={},g.prototype.setState=function(n,t){if("object"!=typeof n&&"function"!=typeof n&&null!=n)throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");this.updater.enqueueSetState(this,n,t,"setState")},g.prototype.forceUpdate=function(n){this.updater.enqueueForceUpdate(this,n,"forceUpdate")},b.prototype=g.prototype;var E=y.prototype=new b;E.constructor=y,h(E,g.prototype),E.isPureReactComponent=!0;var C=Array.isArray,B=Object.prototype.hasOwnProperty,x={current:null},v={key:!0,ref:!0,__self:!0,__source:!0};function w(n,t,r){var i,o={},a=null,s=null;if(null!=t)for(i in void 0!==t.ref&&(s=t.ref),void 0!==t.key&&(a=""+t.key),t)B.call(t,i)&&!v.hasOwnProperty(i)&&(o[i]=t[i]);var c=arguments.length-2;if(1===c)o.children=r;else if(1<c){for(var l=Array(c),u=0;u<c;u++)l[u]=arguments[u+2];o.children=l}if(n&&n.defaultProps)for(i in c=n.defaultProps)void 0===o[i]&&(o[i]=c[i]);return{$$typeof:e,type:n,key:a,ref:s,props:o,_owner:x.current}}function k(n){return"object"==typeof n&&null!==n&&n.$$typeof===e}var _=/\/+/g;function S(n,t){return"object"==typeof n&&null!==n&&null!=n.key?function(n){var t={"=":"=0",":":"=2"};return"$"+n.replace(/[=:]/g,(function(n){return t[n]}))}(""+n.key):t.toString(36)}function O(n,t,i,o,a){var s=typeof n;"undefined"!==s&&"boolean"!==s||(n=null);var c=!1;if(null===n)c=!0;else switch(s){case"string":case"number":c=!0;break;case"object":switch(n.$$typeof){case e:case r:c=!0}}if(c)return a=a(c=n),n=""===o?"."+S(c,0):o,C(a)?(i="",null!=n&&(i=n.replace(_,"$&/")+"/"),O(a,t,i,"",(function(n){return n}))):null!=a&&(k(a)&&(a=function(n,t){return{$$typeof:e,type:n.type,key:t,ref:n.ref,props:n.props,_owner:n._owner}}(a,i+(!a.key||c&&c.key===a.key?"":(""+a.key).replace(_,"$&/")+"/")+n)),t.push(a)),1;if(c=0,o=""===o?".":o+":",C(n))for(var l=0;l<n.length;l++){var u=o+S(s=n[l],l);c+=O(s,t,i,u,a)}else if(u=function(n){return null===n||"object"!=typeof n?null:"function"==typeof(n=f&&n[f]||n["@@iterator"])?n:null}(n),"function"==typeof u)for(n=u.call(n),l=0;!(s=n.next()).done;)c+=O(s=s.value,t,i,u=o+S(s,l++),a);else if("object"===s)throw t=String(n),Error("Objects are not valid as a React child (found: "+("[object Object]"===t?"object with keys {"+Object.keys(n).join(", ")+"}":t)+"). If you meant to render a collection of children, use an array instead.");return c}function j(n,t,e){if(null==n)return n;var r=[],i=0;return O(n,r,"","",(function(n){return t.call(e,n,i++)})),r}function I(n){if(-1===n._status){var t=n._result;(t=t()).then((function(t){0!==n._status&&-1!==n._status||(n._status=1,n._result=t)}),(function(t){0!==n._status&&-1!==n._status||(n._status=2,n._result=t)})),-1===n._status&&(n._status=0,n._result=t)}if(1===n._status)return n._result.default;throw n._result}var R={current:null},P={transition:null},T={ReactCurrentDispatcher:R,ReactCurrentBatchConfig:P,ReactCurrentOwner:x};t.Children={map:j,forEach:function(n,t,e){j(n,(function(){t.apply(this,arguments)}),e)},count:function(n){var t=0;return j(n,(function(){t++})),t},toArray:function(n){return j(n,(function(n){return n}))||[]},only:function(n){if(!k(n))throw Error("React.Children.only expected to receive a single React element child.");return n}},t.Component=g,t.Fragment=i,t.Profiler=a,t.PureComponent=y,t.StrictMode=o,t.Suspense=u,t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=T,t.cloneElement=function(n,t,r){if(null==n)throw Error("React.cloneElement(...): The argument must be a React element, but you passed "+n+".");var i=h({},n.props),o=n.key,a=n.ref,s=n._owner;if(null!=t){if(void 0!==t.ref&&(a=t.ref,s=x.current),void 0!==t.key&&(o=""+t.key),n.type&&n.type.defaultProps)var c=n.type.defaultProps;for(l in t)B.call(t,l)&&!v.hasOwnProperty(l)&&(i[l]=void 0===t[l]&&void 0!==c?c[l]:t[l])}var l=arguments.length-2;if(1===l)i.children=r;else if(1<l){c=Array(l);for(var u=0;u<l;u++)c[u]=arguments[u+2];i.children=c}return{$$typeof:e,type:n.type,key:o,ref:a,props:i,_owner:s}},t.createContext=function(n){return(n={$$typeof:c,_currentValue:n,_currentValue2:n,_threadCount:0,Provider:null,Consumer:null,_defaultValue:null,_globalName:null}).Provider={$$typeof:s,_context:n},n.Consumer=n},t.createElement=w,t.createFactory=function(n){var t=w.bind(null,n);return t.type=n,t},t.createRef=function(){return{current:null}},t.forwardRef=function(n){return{$$typeof:l,render:n}},t.isValidElement=k,t.lazy=function(n){return{$$typeof:d,_payload:{_status:-1,_result:n},_init:I}},t.memo=function(n,t){return{$$typeof:A,type:n,compare:void 0===t?null:t}},t.startTransition=function(n){var t=P.transition;P.transition={};try{n()}finally{P.transition=t}},t.unstable_act=function(){throw Error("act(...) is not supported in production builds of React.")},t.useCallback=function(n,t){return R.current.useCallback(n,t)},t.useContext=function(n){return R.current.useContext(n)},t.useDebugValue=function(){},t.useDeferredValue=function(n){return R.current.useDeferredValue(n)},t.useEffect=function(n,t){return R.current.useEffect(n,t)},t.useId=function(){return R.current.useId()},t.useImperativeHandle=function(n,t,e){return R.current.useImperativeHandle(n,t,e)},t.useInsertionEffect=function(n,t){return R.current.useInsertionEffect(n,t)},t.useLayoutEffect=function(n,t){return R.current.useLayoutEffect(n,t)},t.useMemo=function(n,t){return R.current.useMemo(n,t)},t.useReducer=function(n,t,e){return R.current.useReducer(n,t,e)},t.useRef=function(n){return R.current.useRef(n)},t.useState=function(n){return R.current.useState(n)},t.useSyncExternalStore=function(n,t,e){return R.current.useSyncExternalStore(n,t,e)},t.useTransition=function(){return R.current.useTransition()},t.version="18.2.0"},294:(n,t,e)=>{"use strict";n.exports=e(408)},379:n=>{"use strict";var t=[];function e(n){for(var e=-1,r=0;r<t.length;r++)if(t[r].identifier===n){e=r;break}return e}function r(n,r){for(var o={},a=[],s=0;s<n.length;s++){var c=n[s],l=r.base?c[0]+r.base:c[0],u=o[l]||0,A="".concat(l," ").concat(u);o[l]=u+1;var d=e(A),f={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==d)t[d].references++,t[d].updater(f);else{var p=i(f,r);r.byIndex=s,t.splice(s,0,{identifier:A,updater:p,references:1})}a.push(A)}return a}function i(n,t){var e=t.domAPI(t);return e.update(n),function(t){if(t){if(t.css===n.css&&t.media===n.media&&t.sourceMap===n.sourceMap&&t.supports===n.supports&&t.layer===n.layer)return;e.update(n=t)}else e.remove()}}n.exports=function(n,i){var o=r(n=n||[],i=i||{});return function(n){n=n||[];for(var a=0;a<o.length;a++){var s=e(o[a]);t[s].references--}for(var c=r(n,i),l=0;l<o.length;l++){var u=e(o[l]);0===t[u].references&&(t[u].updater(),t.splice(u,1))}o=c}}},569:n=>{"use strict";var t={};n.exports=function(n,e){var r=function(n){if(void 0===t[n]){var e=document.querySelector(n);if(window.HTMLIFrameElement&&e instanceof window.HTMLIFrameElement)try{e=e.contentDocument.head}catch(n){e=null}t[n]=e}return t[n]}(n);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(e)}},216:n=>{"use strict";n.exports=function(n){var t=document.createElement("style");return n.setAttributes(t,n.attributes),n.insert(t,n.options),t}},565:(n,t,e)=>{"use strict";n.exports=function(n){var t=e.nc;t&&n.setAttribute("nonce",t)}},795:n=>{"use strict";n.exports=function(n){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var t=n.insertStyleElement(n);return{update:function(e){!function(n,t,e){var r="";e.supports&&(r+="@supports (".concat(e.supports,") {")),e.media&&(r+="@media ".concat(e.media," {"));var i=void 0!==e.layer;i&&(r+="@layer".concat(e.layer.length>0?" ".concat(e.layer):""," {")),r+=e.css,i&&(r+="}"),e.media&&(r+="}"),e.supports&&(r+="}");var o=e.sourceMap;o&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),t.styleTagTransform(r,n,t.options)}(t,n,e)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(t)}}}},589:n=>{"use strict";n.exports=function(n,t){if(t.styleSheet)t.styleSheet.cssText=n;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(n))}}},250:(n,t,e)=>{"use strict";var r=e(294),i="function"==typeof Object.is?Object.is:function(n,t){return n===t&&(0!==n||1/n==1/t)||n!=n&&t!=t},o=r.useState,a=r.useEffect,s=r.useLayoutEffect,c=r.useDebugValue;function l(n){var t=n.getSnapshot;n=n.value;try{var e=t();return!i(n,e)}catch(n){return!0}}var u="undefined"==typeof window||void 0===window.document||void 0===window.document.createElement?function(n,t){return t()}:function(n,t){var e=t(),r=o({inst:{value:e,getSnapshot:t}}),i=r[0].inst,u=r[1];return s((function(){i.value=e,i.getSnapshot=t,l(i)&&u({inst:i})}),[n,e,t]),a((function(){return l(i)&&u({inst:i}),n((function(){l(i)&&u({inst:i})}))}),[n]),c(e),e};t.useSyncExternalStore=void 0!==r.useSyncExternalStore?r.useSyncExternalStore:u},688:(n,t,e)=>{"use strict";n.exports=e(250)},823:(n,t,e)=>{n.exports=function(n){var t={};function e(r){if(t[r])return t[r].exports;var i=t[r]={i:r,l:!1,exports:{}};return n[r].call(i.exports,i,i.exports,e),i.l=!0,i.exports}return e.m=n,e.c=t,e.d=function(n,t,r){e.o(n,t)||Object.defineProperty(n,t,{enumerable:!0,get:r})},e.r=function(n){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(n,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(n,"__esModule",{value:!0})},e.t=function(n,t){if(1&t&&(n=e(n)),8&t)return n;if(4&t&&"object"==typeof n&&n&&n.__esModule)return n;var r=Object.create(null);if(e.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:n}),2&t&&"string"!=typeof n)for(var i in n)e.d(r,i,function(t){return n[t]}.bind(null,i));return r},e.n=function(n){var t=n&&n.__esModule?function(){return n.default}:function(){return n};return e.d(t,"a",t),t},e.o=function(n,t){return Object.prototype.hasOwnProperty.call(n,t)},e.p="",e(e.s=2)}([function(n,t){n.exports=e(615)},function(n,t){n.exports=e(378)},function(n,t,e){"use strict";e.r(t);var r=e(1),i=e(0),o=function(){return(o=Object.assign||function(n){for(var t,e=1,r=arguments.length;e<r;e++)for(var i in t=arguments[e])Object.prototype.hasOwnProperty.call(t,i)&&(n[i]=t[i]);return n}).apply(this,arguments)},a=0,s=r.forwardRef((function(n,t){var e=n.title,i=void 0===e?null:e,s=n.description,c=void 0===s?null:s,l=n.size,u=void 0===l?null:l,A=n.color,d=void 0===A?"currentColor":A,f=n.horizontal,p=void 0===f?null:f,h=n.vertical,m=void 0===h?null:h,g=n.rotate,b=void 0===g?null:g,y=n.spin,E=void 0===y?null:y,C=n.style,B=void 0===C?{}:C,x=n.children,v=function(n,t){var e={};for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&t.indexOf(r)<0&&(e[r]=n[r]);if(null!=n&&"function"==typeof Object.getOwnPropertySymbols){var i=0;for(r=Object.getOwnPropertySymbols(n);i<r.length;i++)t.indexOf(r[i])<0&&Object.prototype.propertyIsEnumerable.call(n,r[i])&&(e[r[i]]=n[r[i]])}return e}(n,["title","description","size","color","horizontal","vertical","rotate","spin","style","children"]);a++;var w,k=null!==E&&E,_=r.Children.map(x,(function(n){var t=n;!0!==k&&(k=!0===(null===E?t.props.spin:E));var e=t.props.size;"number"==typeof u&&"number"==typeof t.props.size&&(e=t.props.size/u);var i={size:e,color:null===d?t.props.color:d,horizontal:null===p?t.props.horizontal:p,vertical:null===m?t.props.vertical:m,rotate:null===b?t.props.rotate:b,spin:null===E?t.props.spin:E,inStack:!0};return r.cloneElement(t,i)}));null!==u&&(B.width="string"==typeof u?u:1.5*u+"rem");var S,O="stack_labelledby_"+a,j="stack_describedby_"+a;if(i)w=c?O+" "+j:O;else if(S="presentation",c)throw new Error("title attribute required when description is set");return r.createElement("svg",o({ref:t,viewBox:"0 0 24 24",style:B,role:S,"aria-labelledby":w},v),i&&r.createElement("title",{id:O},i),c&&r.createElement("desc",{id:j},c),k&&r.createElement("style",null,"@keyframes spin { from { transform: rotate(0deg) } to { transform: rotate(360deg) } }","@keyframes spin-inverse { from { transform: rotate(0deg) } to { transform: rotate(-360deg) } }"),_)}));s.displayName="Stack",s.propTypes={size:i.oneOfType([i.number,i.string]),color:i.string,horizontal:i.bool,vertical:i.bool,rotate:i.number,spin:i.oneOfType([i.bool,i.number]),children:i.oneOfType([i.arrayOf(i.node),i.node]).isRequired,className:i.string,style:i.object},s.defaultProps={size:null,color:null,horizontal:null,vertical:null,rotate:null,spin:null};var c=s;e.d(t,"Icon",(function(){return A})),e.d(t,"Stack",(function(){return c}));var l=function(){return(l=Object.assign||function(n){for(var t,e=1,r=arguments.length;e<r;e++)for(var i in t=arguments[e])Object.prototype.hasOwnProperty.call(t,i)&&(n[i]=t[i]);return n}).apply(this,arguments)},u=0,A=r.forwardRef((function(n,t){var e=n.path,i=n.id,o=void 0===i?++u:i,a=n.title,s=void 0===a?null:a,c=n.description,A=void 0===c?null:c,d=n.size,f=void 0===d?null:d,p=n.color,h=void 0===p?"currentColor":p,m=n.horizontal,g=void 0!==m&&m,b=n.vertical,y=void 0!==b&&b,E=n.rotate,C=void 0===E?0:E,B=n.spin,x=void 0!==B&&B,v=n.style,w=void 0===v?{}:v,k=n.inStack,_=void 0!==k&&k,S=function(n,t){var e={};for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&t.indexOf(r)<0&&(e[r]=n[r]);if(null!=n&&"function"==typeof Object.getOwnPropertySymbols){var i=0;for(r=Object.getOwnPropertySymbols(n);i<r.length;i++)t.indexOf(r[i])<0&&Object.prototype.propertyIsEnumerable.call(n,r[i])&&(e[r[i]]=n[r[i]])}return e}(n,["path","id","title","description","size","color","horizontal","vertical","rotate","spin","style","inStack"]),O={},j=[];null!==f&&(_?j.push("scale("+f+")"):(w.width="string"==typeof f?f:1.5*f+"rem",w.height=w.width)),g&&j.push("scaleX(-1)"),y&&j.push("scaleY(-1)"),0!==C&&j.push("rotate("+C+"deg)"),null!==h&&(O.fill=h);var I=r.createElement("path",l({d:e,style:O},_?S:{})),R=I;j.length>0&&(w.transform=j.join(" "),w.transformOrigin="center",_&&(R=r.createElement("g",{style:w},I,r.createElement("rect",{width:"24",height:"24",fill:"transparent"}))));var P,T=R,N=!0===x||"number"!=typeof x?2:x,z=!_&&(g||y);if(N<0&&(z=!z),x&&(T=r.createElement("g",{style:{animation:"spin"+(z?"-inverse":"")+" linear "+Math.abs(N)+"s infinite",transformOrigin:"center"}},R,!(g||y||0!==C)&&r.createElement("rect",{width:"24",height:"24",fill:"transparent"}))),_)return T;var Y,L="icon_labelledby_"+o,U="icon_describedby_"+o;if(s)P=A?L+" "+U:L;else if(Y="presentation",A)throw new Error("title attribute required when description is set");return r.createElement("svg",l({ref:t,viewBox:"0 0 24 24",style:w,role:Y,"aria-labelledby":P},S),s&&r.createElement("title",{id:L},s),A&&r.createElement("desc",{id:U},A),!_&&x&&(z?r.createElement("style",null,"@keyframes spin-inverse { from { transform: rotate(0deg) } to { transform: rotate(-360deg) } }"):r.createElement("style",null,"@keyframes spin { from { transform: rotate(0deg) } to { transform: rotate(360deg) } }")),T)}));A.displayName="Icon",A.propTypes={path:i.string.isRequired,size:i.oneOfType([i.number,i.string]),color:i.string,horizontal:i.bool,vertical:i.bool,rotate:i.number,spin:i.oneOfType([i.bool,i.number]),style:i.object,inStack:i.bool,className:i.string},A.defaultProps={size:null,color:"currentColor",horizontal:!1,vertical:!1,rotate:0,spin:!1},t.default=A}])},772:(n,t,e)=>{"use strict";var r=e(90);function i(){}function o(){}o.resetWarningCache=i,n.exports=function(){function n(n,t,e,i,o,a){if(a!==r){var s=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw s.name="Invariant Violation",s}}function t(){return n}n.isRequired=n;var e={array:n,bigint:n,bool:n,func:n,number:n,object:n,string:n,symbol:n,any:n,arrayOf:t,element:n,elementType:n,instanceOf:t,node:n,objectOf:t,oneOf:t,oneOfType:t,shape:t,exact:t,checkPropTypes:o,resetWarningCache:i};return e.PropTypes=e,e}},615:(n,t,e)=>{n.exports=e(772)()},90:n=>{"use strict";n.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},535:(n,t)=>{"use strict";var e=Symbol.for("react.element"),r=Symbol.for("react.portal"),i=Symbol.for("react.fragment"),o=Symbol.for("react.strict_mode"),a=Symbol.for("react.profiler"),s=Symbol.for("react.provider"),c=Symbol.for("react.context"),l=Symbol.for("react.forward_ref"),u=Symbol.for("react.suspense"),A=Symbol.for("react.memo"),d=Symbol.for("react.lazy"),f=Symbol.iterator,p={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},h=Object.assign,m={};function g(n,t,e){this.props=n,this.context=t,this.refs=m,this.updater=e||p}function b(){}function y(n,t,e){this.props=n,this.context=t,this.refs=m,this.updater=e||p}g.prototype.isReactComponent={},g.prototype.setState=function(n,t){if("object"!=typeof n&&"function"!=typeof n&&null!=n)throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");this.updater.enqueueSetState(this,n,t,"setState")},g.prototype.forceUpdate=function(n){this.updater.enqueueForceUpdate(this,n,"forceUpdate")},b.prototype=g.prototype;var E=y.prototype=new b;E.constructor=y,h(E,g.prototype),E.isPureReactComponent=!0;var C=Array.isArray,B=Object.prototype.hasOwnProperty,x={current:null},v={key:!0,ref:!0,__self:!0,__source:!0};function w(n,t,r){var i,o={},a=null,s=null;if(null!=t)for(i in void 0!==t.ref&&(s=t.ref),void 0!==t.key&&(a=""+t.key),t)B.call(t,i)&&!v.hasOwnProperty(i)&&(o[i]=t[i]);var c=arguments.length-2;if(1===c)o.children=r;else if(1<c){for(var l=Array(c),u=0;u<c;u++)l[u]=arguments[u+2];o.children=l}if(n&&n.defaultProps)for(i in c=n.defaultProps)void 0===o[i]&&(o[i]=c[i]);return{$$typeof:e,type:n,key:a,ref:s,props:o,_owner:x.current}}function k(n){return"object"==typeof n&&null!==n&&n.$$typeof===e}var _=/\/+/g;function S(n,t){return"object"==typeof n&&null!==n&&null!=n.key?function(n){var t={"=":"=0",":":"=2"};return"$"+n.replace(/[=:]/g,(function(n){return t[n]}))}(""+n.key):t.toString(36)}function O(n,t,i,o,a){var s=typeof n;"undefined"!==s&&"boolean"!==s||(n=null);var c=!1;if(null===n)c=!0;else switch(s){case"string":case"number":c=!0;break;case"object":switch(n.$$typeof){case e:case r:c=!0}}if(c)return a=a(c=n),n=""===o?"."+S(c,0):o,C(a)?(i="",null!=n&&(i=n.replace(_,"$&/")+"/"),O(a,t,i,"",(function(n){return n}))):null!=a&&(k(a)&&(a=function(n,t){return{$$typeof:e,type:n.type,key:t,ref:n.ref,props:n.props,_owner:n._owner}}(a,i+(!a.key||c&&c.key===a.key?"":(""+a.key).replace(_,"$&/")+"/")+n)),t.push(a)),1;if(c=0,o=""===o?".":o+":",C(n))for(var l=0;l<n.length;l++){var u=o+S(s=n[l],l);c+=O(s,t,i,u,a)}else if(u=function(n){return null===n||"object"!=typeof n?null:"function"==typeof(n=f&&n[f]||n["@@iterator"])?n:null}(n),"function"==typeof u)for(n=u.call(n),l=0;!(s=n.next()).done;)c+=O(s=s.value,t,i,u=o+S(s,l++),a);else if("object"===s)throw t=String(n),Error("Objects are not valid as a React child (found: "+("[object Object]"===t?"object with keys {"+Object.keys(n).join(", ")+"}":t)+"). If you meant to render a collection of children, use an array instead.");return c}function j(n,t,e){if(null==n)return n;var r=[],i=0;return O(n,r,"","",(function(n){return t.call(e,n,i++)})),r}function I(n){if(-1===n._status){var t=n._result;(t=t()).then((function(t){0!==n._status&&-1!==n._status||(n._status=1,n._result=t)}),(function(t){0!==n._status&&-1!==n._status||(n._status=2,n._result=t)})),-1===n._status&&(n._status=0,n._result=t)}if(1===n._status)return n._result.default;throw n._result}var R={current:null},P={transition:null},T={ReactCurrentDispatcher:R,ReactCurrentBatchConfig:P,ReactCurrentOwner:x};t.Children={map:j,forEach:function(n,t,e){j(n,(function(){t.apply(this,arguments)}),e)},count:function(n){var t=0;return j(n,(function(){t++})),t},toArray:function(n){return j(n,(function(n){return n}))||[]},only:function(n){if(!k(n))throw Error("React.Children.only expected to receive a single React element child.");return n}},t.Component=g,t.Fragment=i,t.Profiler=a,t.PureComponent=y,t.StrictMode=o,t.Suspense=u,t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=T,t.cloneElement=function(n,t,r){if(null==n)throw Error("React.cloneElement(...): The argument must be a React element, but you passed "+n+".");var i=h({},n.props),o=n.key,a=n.ref,s=n._owner;if(null!=t){if(void 0!==t.ref&&(a=t.ref,s=x.current),void 0!==t.key&&(o=""+t.key),n.type&&n.type.defaultProps)var c=n.type.defaultProps;for(l in t)B.call(t,l)&&!v.hasOwnProperty(l)&&(i[l]=void 0===t[l]&&void 0!==c?c[l]:t[l])}var l=arguments.length-2;if(1===l)i.children=r;else if(1<l){c=Array(l);for(var u=0;u<l;u++)c[u]=arguments[u+2];i.children=c}return{$$typeof:e,type:n.type,key:o,ref:a,props:i,_owner:s}},t.createContext=function(n){return(n={$$typeof:c,_currentValue:n,_currentValue2:n,_threadCount:0,Provider:null,Consumer:null,_defaultValue:null,_globalName:null}).Provider={$$typeof:s,_context:n},n.Consumer=n},t.createElement=w,t.createFactory=function(n){var t=w.bind(null,n);return t.type=n,t},t.createRef=function(){return{current:null}},t.forwardRef=function(n){return{$$typeof:l,render:n}},t.isValidElement=k,t.lazy=function(n){return{$$typeof:d,_payload:{_status:-1,_result:n},_init:I}},t.memo=function(n,t){return{$$typeof:A,type:n,compare:void 0===t?null:t}},t.startTransition=function(n){var t=P.transition;P.transition={};try{n()}finally{P.transition=t}},t.unstable_act=function(){throw Error("act(...) is not supported in production builds of React.")},t.useCallback=function(n,t){return R.current.useCallback(n,t)},t.useContext=function(n){return R.current.useContext(n)},t.useDebugValue=function(){},t.useDeferredValue=function(n){return R.current.useDeferredValue(n)},t.useEffect=function(n,t){return R.current.useEffect(n,t)},t.useId=function(){return R.current.useId()},t.useImperativeHandle=function(n,t,e){return R.current.useImperativeHandle(n,t,e)},t.useInsertionEffect=function(n,t){return R.current.useInsertionEffect(n,t)},t.useLayoutEffect=function(n,t){return R.current.useLayoutEffect(n,t)},t.useMemo=function(n,t){return R.current.useMemo(n,t)},t.useReducer=function(n,t,e){return R.current.useReducer(n,t,e)},t.useRef=function(n){return R.current.useRef(n)},t.useState=function(n){return R.current.useState(n)},t.useSyncExternalStore=function(n,t,e){return R.current.useSyncExternalStore(n,t,e)},t.useTransition=function(){return R.current.useTransition()},t.version="18.2.0"},378:(n,t,e)=>{"use strict";n.exports=e(535)},113:(n,t,e)=>{"use strict";n.exports=e.p+"0a37be191a66dd2e3b45.jpg"},975:(n,t,e)=>{"use strict";n.exports=e.p+"6637e2d73eb70b8242b4.jpg"}},r={};function i(n){var t=r[n];if(void 0!==t)return t.exports;var o=r[n]={id:n,exports:{}};return e[n](o,o.exports,i),o.exports}i.m=e,i.n=n=>{var t=n&&n.__esModule?()=>n.default:()=>n;return i.d(t,{a:t}),t},t=Object.getPrototypeOf?n=>Object.getPrototypeOf(n):n=>n.__proto__,i.t=function(e,r){if(1&r&&(e=this(e)),8&r)return e;if("object"==typeof e&&e){if(4&r&&e.__esModule)return e;if(16&r&&"function"==typeof e.then)return e}var o=Object.create(null);i.r(o);var a={};n=n||[null,t({}),t([]),t(t)];for(var s=2&r&&e;"object"==typeof s&&!~n.indexOf(s);s=t(s))Object.getOwnPropertyNames(s).forEach((n=>a[n]=()=>e[n]));return a.default=()=>e,i.d(o,a),o},i.d=(n,t)=>{for(var e in t)i.o(t,e)&&!i.o(n,e)&&Object.defineProperty(n,e,{enumerable:!0,get:t[e]})},i.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(n){if("object"==typeof window)return window}}(),i.o=(n,t)=>Object.prototype.hasOwnProperty.call(n,t),i.r=n=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(n,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(n,"__esModule",{value:!0})},(()=>{var n;i.g.importScripts&&(n=i.g.location+"");var t=i.g.document;if(!n&&t&&(t.currentScript&&(n=t.currentScript.src),!n)){var e=t.getElementsByTagName("script");if(e.length)for(var r=e.length-1;r>-1&&!n;)n=e[r--].src}if(!n)throw new Error("Automatic publicPath is not supported in this browser");n=n.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),i.p=n})(),i.b=document.baseURI||self.location.href,i.nc=void 0,(()=>{"use strict";var n={};i.r(n),i.d(n,{APIConnectionError:()=>qr,APIConnectionTimeoutError:()=>Zr,APIError:()=>$r,APIUserAbortError:()=>Wr,AuthenticationError:()=>Vr,BadRequestError:()=>Xr,ConflictError:()=>Gr,InternalServerError:()=>ni,NotFoundError:()=>Kr,OpenAIError:()=>Dr,PermissionDeniedError:()=>Hr,RateLimitError:()=>Qr,UnprocessableEntityError:()=>Jr});var t={};i.r(t),i.d(t,{Decoder:()=>Ys,Encoder:()=>Ns,PacketType:()=>Ts,protocol:()=>Ps});var e=i(294),r=i.t(e,2),o=i(379),a=i.n(o),s=i(795),c=i.n(s),l=i(569),u=i.n(l),A=i(565),d=i.n(A),f=i(216),p=i.n(f),h=i(589),m=i.n(h),g=i(439),b={};b.styleTagTransform=m(),b.setAttributes=d(),b.insert=u().bind(null,"head"),b.domAPI=c(),b.insertStyleElement=p(),a()(g.Z,b),g.Z&&g.Z.locals&&g.Z.locals;var y=i(236),E={};E.styleTagTransform=m(),E.setAttributes=d(),E.insert=u().bind(null,"head"),E.domAPI=c(),E.insertStyleElement=p(),a()(y.Z,E),y.Z&&y.Z.locals&&y.Z.locals;var C=i(79),B={};B.styleTagTransform=m(),B.setAttributes=d(),B.insert=u().bind(null,"head"),B.domAPI=c(),B.insertStyleElement=p(),a()(C.Z,B),C.Z&&C.Z.locals&&C.Z.locals;var x=i(626),v={};v.styleTagTransform=m(),v.setAttributes=d(),v.insert=u().bind(null,"head"),v.domAPI=c(),v.insertStyleElement=p(),a()(x.Z,v),x.Z&&x.Z.locals&&x.Z.locals;var w=i(166),k={};k.styleTagTransform=m(),k.setAttributes=d(),k.insert=u().bind(null,"head"),k.domAPI=c(),k.insertStyleElement=p(),a()(w.Z,k),w.Z&&w.Z.locals&&w.Z.locals;var _=i(309),S={};S.styleTagTransform=m(),S.setAttributes=d(),S.insert=u().bind(null,"head"),S.domAPI=c(),S.insertStyleElement=p(),a()(_.Z,S),_.Z&&_.Z.locals&&_.Z.locals;var O=i(331),j={};j.styleTagTransform=m(),j.setAttributes=d(),j.insert=u().bind(null,"head"),j.domAPI=c(),j.insertStyleElement=p(),a()(O.Z,j),O.Z&&O.Z.locals&&O.Z.locals;var I=i(688);const{useEffect:R,useLayoutEffect:P,useRef:T,useInsertionEffect:N}=r,z=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),Y=N||(z?P:R),L=n=>{const t=T([n,(...n)=>t[0](...n)]).current;return Y((()=>{t[0]=n})),t[1]},U=(n="",t=location.pathname)=>t.toLowerCase().indexOf(n.toLowerCase())?"~"+t:t.slice(n.length)||"/",M="pushState",F="replaceState",D=["popstate",M,F,"hashchange"],$=n=>{for(const t of D)addEventListener(t,n);return()=>{for(const t of D)removeEventListener(t,n)}},W=()=>location.pathname,q=({ssrPath:n}={})=>{return t=W,e=n?()=>n:W,(0,I.useSyncExternalStore)($,t,e);var t,e};if("undefined"!=typeof history)for(const n of[M,F]){const t=history[n];history[n]=function(){const e=t.apply(this,arguments),r=new Event(n);return r.arguments=arguments,dispatchEvent(r),e}}const Z=n=>n.replace(/([.+*?=^!:${}()[\]|/\\])/g,"\\$1"),X=(n,t,e)=>{let r=n?"((?:[^\\/]+?)(?:\\/(?:[^\\/]+?))*)":"([^\\/]+?)";return t&&e&&(r="(?:\\/"+r+")"),r+(t?"?":"")},V=n=>{const t=/:([A-Za-z0-9_]+)([?+*]?)/g;let e=null,r=0,i=[],o="";for(;null!==(e=t.exec(n));){const[a,s,c]=e,l="+"===c||"*"===c,u="?"===c||"*"===c,A=u&&"/"===n[e.index-1]?1:0,d=n.substring(r,e.index-A);i.push({name:s}),r=t.lastIndex,o+=Z(d)+X(l,u,A)}return o+=Z(n.substring(r)),{keys:i,regexp:new RegExp("^"+o+"(?:\\/)?$","i")}},H={hook:(n={})=>[U(n.base,q(n)),L(((t,e)=>((n,{replace:t=!1}={})=>history[t?F:M](null,"",n))(((n,t="")=>"~"===n[0]?n.slice(1):t+n)(t,n.base),e)))],matcher:function(n=V){let t={};return(e,r)=>{const{regexp:i,keys:o}=(e=>t[e]||(t[e]=n(e)))(e||""),a=i.exec(r);if(!a)return[!1,null];const s=o.reduce(((n,t,e)=>(n[t.name]=a[e+1],n)),{});return[!0,s]}}(),base:""},K=(0,e.createContext)(H);function G(n,t){var e=Object.keys(n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(n);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(n,t).enumerable}))),e.push.apply(e,r)}return e}function J(n){for(var t=1;t<arguments.length;t++){var e=null!=arguments[t]?arguments[t]:{};t%2?G(Object(e),!0).forEach((function(t){tn(n,t,e[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(e)):G(Object(e)).forEach((function(t){Object.defineProperty(n,t,Object.getOwnPropertyDescriptor(e,t))}))}return n}function Q(n){return Q="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(n){return typeof n}:function(n){return n&&"function"==typeof Symbol&&n.constructor===Symbol&&n!==Symbol.prototype?"symbol":typeof n},Q(n)}function nn(n,t){for(var e=0;e<t.length;e++){var r=t[e];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(n,r.key,r)}}function tn(n,t,e){return t in n?Object.defineProperty(n,t,{value:e,enumerable:!0,configurable:!0,writable:!0}):n[t]=e,n}function en(n,t){return function(n){if(Array.isArray(n))return n}(n)||function(n,t){var e=null==n?null:"undefined"!=typeof Symbol&&n[Symbol.iterator]||n["@@iterator"];if(null!=e){var r,i,o=[],a=!0,s=!1;try{for(e=e.call(n);!(a=(r=e.next()).done)&&(o.push(r.value),!t||o.length!==t);a=!0);}catch(n){s=!0,i=n}finally{try{a||null==e.return||e.return()}finally{if(s)throw i}}return o}}(n,t)||on(n,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function rn(n){return function(n){if(Array.isArray(n))return an(n)}(n)||function(n){if("undefined"!=typeof Symbol&&null!=n[Symbol.iterator]||null!=n["@@iterator"])return Array.from(n)}(n)||on(n)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function on(n,t){if(n){if("string"==typeof n)return an(n,t);var e=Object.prototype.toString.call(n).slice(8,-1);return"Object"===e&&n.constructor&&(e=n.constructor.name),"Map"===e||"Set"===e?Array.from(n):"Arguments"===e||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(e)?an(n,t):void 0}}function an(n,t){(null==t||t>n.length)&&(t=n.length);for(var e=0,r=new Array(t);e<t;e++)r[e]=n[e];return r}(0,e.createContext)({params:{}}),(0,e.forwardRef)(((n,t)=>{const r=(0,e.useContext)(K),[,i]=(n=>n.hook(n))(r),{to:o,href:a=o,children:s,onClick:c}=n,l=L((t=>{t.ctrlKey||t.metaKey||t.altKey||t.shiftKey||0!==t.button||(c&&c(t),t.defaultPrevented||(t.preventDefault(),i(o||a,n)))})),u={href:"~"===a[0]?a.slice(1):r.base+a,onClick:l,to:null,ref:t},A=(0,e.isValidElement)(s)?s:(0,e.createElement)("a",n);return(0,e.cloneElement)(A,u)})),i.p,i.p,i.p;var sn=function(){},cn={},ln={},un=null,An={mark:sn,measure:sn};try{"undefined"!=typeof window&&(cn=window),"undefined"!=typeof document&&(ln=document),"undefined"!=typeof MutationObserver&&(un=MutationObserver),"undefined"!=typeof performance&&(An=performance)}catch(n){}var dn,fn,pn,hn,mn,gn=(cn.navigator||{}).userAgent,bn=void 0===gn?"":gn,yn=cn,En=ln,Cn=un,Bn=An,xn=(yn.document,!!En.documentElement&&!!En.head&&"function"==typeof En.addEventListener&&"function"==typeof En.createElement),vn=~bn.indexOf("MSIE")||~bn.indexOf("Trident/"),wn="___FONT_AWESOME___",kn="fa",_n="svg-inline--fa",Sn="data-fa-i2svg",On="data-fa-pseudo-element",jn="data-fa-pseudo-element-pending",In="data-prefix",Rn="data-icon",Pn="fontawesome-i2svg",Tn="async",Nn=["HTML","HEAD","STYLE","SCRIPT"],zn=function(){try{return!0}catch(n){return!1}}(),Yn="classic",Ln="sharp",Un=[Yn,Ln];function Mn(n){return new Proxy(n,{get:function(n,t){return t in n?n[t]:n[Yn]}})}var Fn=Mn((tn(dn={},Yn,{fa:"solid",fas:"solid","fa-solid":"solid",far:"regular","fa-regular":"regular",fal:"light","fa-light":"light",fat:"thin","fa-thin":"thin",fad:"duotone","fa-duotone":"duotone",fab:"brands","fa-brands":"brands",fak:"kit",fakd:"kit","fa-kit":"kit","fa-kit-duotone":"kit"}),tn(dn,Ln,{fa:"solid",fass:"solid","fa-solid":"solid",fasr:"regular","fa-regular":"regular",fasl:"light","fa-light":"light",fast:"thin","fa-thin":"thin"}),dn)),Dn=Mn((tn(fn={},Yn,{solid:"fas",regular:"far",light:"fal",thin:"fat",duotone:"fad",brands:"fab",kit:"fak"}),tn(fn,Ln,{solid:"fass",regular:"fasr",light:"fasl",thin:"fast"}),fn)),$n=Mn((tn(pn={},Yn,{fab:"fa-brands",fad:"fa-duotone",fak:"fa-kit",fal:"fa-light",far:"fa-regular",fas:"fa-solid",fat:"fa-thin"}),tn(pn,Ln,{fass:"fa-solid",fasr:"fa-regular",fasl:"fa-light",fast:"fa-thin"}),pn)),Wn=Mn((tn(hn={},Yn,{"fa-brands":"fab","fa-duotone":"fad","fa-kit":"fak","fa-light":"fal","fa-regular":"far","fa-solid":"fas","fa-thin":"fat"}),tn(hn,Ln,{"fa-solid":"fass","fa-regular":"fasr","fa-light":"fasl","fa-thin":"fast"}),hn)),qn=/fa(s|r|l|t|d|b|k|ss|sr|sl|st)?[\-\ ]/,Zn="fa-layers-text",Xn=/Font ?Awesome ?([56 ]*)(Solid|Regular|Light|Thin|Duotone|Brands|Free|Pro|Sharp|Kit)?.*/i,Vn=Mn((tn(mn={},Yn,{900:"fas",400:"far",normal:"far",300:"fal",100:"fat"}),tn(mn,Ln,{900:"fass",400:"fasr",300:"fasl",100:"fast"}),mn)),Hn=[1,2,3,4,5,6,7,8,9,10],Kn=Hn.concat([11,12,13,14,15,16,17,18,19,20]),Gn=["class","data-prefix","data-icon","data-fa-transform","data-fa-mask"],Jn={GROUP:"duotone-group",SWAP_OPACITY:"swap-opacity",PRIMARY:"primary",SECONDARY:"secondary"},Qn=new Set;Object.keys(Dn[Yn]).map(Qn.add.bind(Qn)),Object.keys(Dn[Ln]).map(Qn.add.bind(Qn));var nt=[].concat(Un,rn(Qn),["2xs","xs","sm","lg","xl","2xl","beat","border","fade","beat-fade","bounce","flip-both","flip-horizontal","flip-vertical","flip","fw","inverse","layers-counter","layers-text","layers","li","pull-left","pull-right","pulse","rotate-180","rotate-270","rotate-90","rotate-by","shake","spin-pulse","spin-reverse","spin","stack-1x","stack-2x","stack","ul",Jn.GROUP,Jn.SWAP_OPACITY,Jn.PRIMARY,Jn.SECONDARY]).concat(Hn.map((function(n){return"".concat(n,"x")}))).concat(Kn.map((function(n){return"w-".concat(n)}))),tt=yn.FontAwesomeConfig||{};En&&"function"==typeof En.querySelector&&[["data-family-prefix","familyPrefix"],["data-css-prefix","cssPrefix"],["data-family-default","familyDefault"],["data-style-default","styleDefault"],["data-replacement-class","replacementClass"],["data-auto-replace-svg","autoReplaceSvg"],["data-auto-add-css","autoAddCss"],["data-auto-a11y","autoA11y"],["data-search-pseudo-elements","searchPseudoElements"],["data-observe-mutations","observeMutations"],["data-mutate-approach","mutateApproach"],["data-keep-original-source","keepOriginalSource"],["data-measure-performance","measurePerformance"],["data-show-missing-icons","showMissingIcons"]].forEach((function(n){var t=en(n,2),e=t[0],r=t[1],i=function(n){return""===n||"false"!==n&&("true"===n||n)}(function(n){var t=En.querySelector("script["+n+"]");if(t)return t.getAttribute(n)}(e));null!=i&&(tt[r]=i)}));var et={styleDefault:"solid",familyDefault:"classic",cssPrefix:kn,replacementClass:_n,autoReplaceSvg:!0,autoAddCss:!0,autoA11y:!0,searchPseudoElements:!1,observeMutations:!0,mutateApproach:"async",keepOriginalSource:!0,measurePerformance:!1,showMissingIcons:!0};tt.familyPrefix&&(tt.cssPrefix=tt.familyPrefix);var rt=J(J({},et),tt);rt.autoReplaceSvg||(rt.observeMutations=!1);var it={};Object.keys(et).forEach((function(n){Object.defineProperty(it,n,{enumerable:!0,set:function(t){rt[n]=t,ot.forEach((function(n){return n(it)}))},get:function(){return rt[n]}})})),Object.defineProperty(it,"familyPrefix",{enumerable:!0,set:function(n){rt.cssPrefix=n,ot.forEach((function(n){return n(it)}))},get:function(){return rt.cssPrefix}}),yn.FontAwesomeConfig=it;var ot=[],at=16,st={size:16,x:0,y:0,rotate:0,flipX:!1,flipY:!1},ct="0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";function lt(){for(var n=12,t="";n-- >0;)t+=ct[62*Math.random()|0];return t}function ut(n){for(var t=[],e=(n||[]).length>>>0;e--;)t[e]=n[e];return t}function At(n){return n.classList?ut(n.classList):(n.getAttribute("class")||"").split(" ").filter((function(n){return n}))}function dt(n){return"".concat(n).replace(/&/g,"&amp;").replace(/"/g,"&quot;").replace(/'/g,"&#39;").replace(/</g,"&lt;").replace(/>/g,"&gt;")}function ft(n){return Object.keys(n||{}).reduce((function(t,e){return t+"".concat(e,": ").concat(n[e].trim(),";")}),"")}function pt(n){return n.size!==st.size||n.x!==st.x||n.y!==st.y||n.rotate!==st.rotate||n.flipX||n.flipY}var ht=':root, :host {\n  --fa-font-solid: normal 900 1em/1 "Font Awesome 6 Solid";\n  --fa-font-regular: normal 400 1em/1 "Font Awesome 6 Regular";\n  --fa-font-light: normal 300 1em/1 "Font Awesome 6 Light";\n  --fa-font-thin: normal 100 1em/1 "Font Awesome 6 Thin";\n  --fa-font-duotone: normal 900 1em/1 "Font Awesome 6 Duotone";\n  --fa-font-sharp-solid: normal 900 1em/1 "Font Awesome 6 Sharp";\n  --fa-font-sharp-regular: normal 400 1em/1 "Font Awesome 6 Sharp";\n  --fa-font-sharp-light: normal 300 1em/1 "Font Awesome 6 Sharp";\n  --fa-font-sharp-thin: normal 100 1em/1 "Font Awesome 6 Sharp";\n  --fa-font-brands: normal 400 1em/1 "Font Awesome 6 Brands";\n}\n\nsvg:not(:root).svg-inline--fa, svg:not(:host).svg-inline--fa {\n  overflow: visible;\n  box-sizing: content-box;\n}\n\n.svg-inline--fa {\n  display: var(--fa-display, inline-block);\n  height: 1em;\n  overflow: visible;\n  vertical-align: -0.125em;\n}\n.svg-inline--fa.fa-2xs {\n  vertical-align: 0.1em;\n}\n.svg-inline--fa.fa-xs {\n  vertical-align: 0em;\n}\n.svg-inline--fa.fa-sm {\n  vertical-align: -0.0714285705em;\n}\n.svg-inline--fa.fa-lg {\n  vertical-align: -0.2em;\n}\n.svg-inline--fa.fa-xl {\n  vertical-align: -0.25em;\n}\n.svg-inline--fa.fa-2xl {\n  vertical-align: -0.3125em;\n}\n.svg-inline--fa.fa-pull-left {\n  margin-right: var(--fa-pull-margin, 0.3em);\n  width: auto;\n}\n.svg-inline--fa.fa-pull-right {\n  margin-left: var(--fa-pull-margin, 0.3em);\n  width: auto;\n}\n.svg-inline--fa.fa-li {\n  width: var(--fa-li-width, 2em);\n  top: 0.25em;\n}\n.svg-inline--fa.fa-fw {\n  width: var(--fa-fw-width, 1.25em);\n}\n\n.fa-layers svg.svg-inline--fa {\n  bottom: 0;\n  left: 0;\n  margin: auto;\n  position: absolute;\n  right: 0;\n  top: 0;\n}\n\n.fa-layers-counter, .fa-layers-text {\n  display: inline-block;\n  position: absolute;\n  text-align: center;\n}\n\n.fa-layers {\n  display: inline-block;\n  height: 1em;\n  position: relative;\n  text-align: center;\n  vertical-align: -0.125em;\n  width: 1em;\n}\n.fa-layers svg.svg-inline--fa {\n  -webkit-transform-origin: center center;\n          transform-origin: center center;\n}\n\n.fa-layers-text {\n  left: 50%;\n  top: 50%;\n  -webkit-transform: translate(-50%, -50%);\n          transform: translate(-50%, -50%);\n  -webkit-transform-origin: center center;\n          transform-origin: center center;\n}\n\n.fa-layers-counter {\n  background-color: var(--fa-counter-background-color, #ff253a);\n  border-radius: var(--fa-counter-border-radius, 1em);\n  box-sizing: border-box;\n  color: var(--fa-inverse, #fff);\n  line-height: var(--fa-counter-line-height, 1);\n  max-width: var(--fa-counter-max-width, 5em);\n  min-width: var(--fa-counter-min-width, 1.5em);\n  overflow: hidden;\n  padding: var(--fa-counter-padding, 0.25em 0.5em);\n  right: var(--fa-right, 0);\n  text-overflow: ellipsis;\n  top: var(--fa-top, 0);\n  -webkit-transform: scale(var(--fa-counter-scale, 0.25));\n          transform: scale(var(--fa-counter-scale, 0.25));\n  -webkit-transform-origin: top right;\n          transform-origin: top right;\n}\n\n.fa-layers-bottom-right {\n  bottom: var(--fa-bottom, 0);\n  right: var(--fa-right, 0);\n  top: auto;\n  -webkit-transform: scale(var(--fa-layers-scale, 0.25));\n          transform: scale(var(--fa-layers-scale, 0.25));\n  -webkit-transform-origin: bottom right;\n          transform-origin: bottom right;\n}\n\n.fa-layers-bottom-left {\n  bottom: var(--fa-bottom, 0);\n  left: var(--fa-left, 0);\n  right: auto;\n  top: auto;\n  -webkit-transform: scale(var(--fa-layers-scale, 0.25));\n          transform: scale(var(--fa-layers-scale, 0.25));\n  -webkit-transform-origin: bottom left;\n          transform-origin: bottom left;\n}\n\n.fa-layers-top-right {\n  top: var(--fa-top, 0);\n  right: var(--fa-right, 0);\n  -webkit-transform: scale(var(--fa-layers-scale, 0.25));\n          transform: scale(var(--fa-layers-scale, 0.25));\n  -webkit-transform-origin: top right;\n          transform-origin: top right;\n}\n\n.fa-layers-top-left {\n  left: var(--fa-left, 0);\n  right: auto;\n  top: var(--fa-top, 0);\n  -webkit-transform: scale(var(--fa-layers-scale, 0.25));\n          transform: scale(var(--fa-layers-scale, 0.25));\n  -webkit-transform-origin: top left;\n          transform-origin: top left;\n}\n\n.fa-1x {\n  font-size: 1em;\n}\n\n.fa-2x {\n  font-size: 2em;\n}\n\n.fa-3x {\n  font-size: 3em;\n}\n\n.fa-4x {\n  font-size: 4em;\n}\n\n.fa-5x {\n  font-size: 5em;\n}\n\n.fa-6x {\n  font-size: 6em;\n}\n\n.fa-7x {\n  font-size: 7em;\n}\n\n.fa-8x {\n  font-size: 8em;\n}\n\n.fa-9x {\n  font-size: 9em;\n}\n\n.fa-10x {\n  font-size: 10em;\n}\n\n.fa-2xs {\n  font-size: 0.625em;\n  line-height: 0.1em;\n  vertical-align: 0.225em;\n}\n\n.fa-xs {\n  font-size: 0.75em;\n  line-height: 0.0833333337em;\n  vertical-align: 0.125em;\n}\n\n.fa-sm {\n  font-size: 0.875em;\n  line-height: 0.0714285718em;\n  vertical-align: 0.0535714295em;\n}\n\n.fa-lg {\n  font-size: 1.25em;\n  line-height: 0.05em;\n  vertical-align: -0.075em;\n}\n\n.fa-xl {\n  font-size: 1.5em;\n  line-height: 0.0416666682em;\n  vertical-align: -0.125em;\n}\n\n.fa-2xl {\n  font-size: 2em;\n  line-height: 0.03125em;\n  vertical-align: -0.1875em;\n}\n\n.fa-fw {\n  text-align: center;\n  width: 1.25em;\n}\n\n.fa-ul {\n  list-style-type: none;\n  margin-left: var(--fa-li-margin, 2.5em);\n  padding-left: 0;\n}\n.fa-ul > li {\n  position: relative;\n}\n\n.fa-li {\n  left: calc(var(--fa-li-width, 2em) * -1);\n  position: absolute;\n  text-align: center;\n  width: var(--fa-li-width, 2em);\n  line-height: inherit;\n}\n\n.fa-border {\n  border-color: var(--fa-border-color, #eee);\n  border-radius: var(--fa-border-radius, 0.1em);\n  border-style: var(--fa-border-style, solid);\n  border-width: var(--fa-border-width, 0.08em);\n  padding: var(--fa-border-padding, 0.2em 0.25em 0.15em);\n}\n\n.fa-pull-left {\n  float: left;\n  margin-right: var(--fa-pull-margin, 0.3em);\n}\n\n.fa-pull-right {\n  float: right;\n  margin-left: var(--fa-pull-margin, 0.3em);\n}\n\n.fa-beat {\n  -webkit-animation-name: fa-beat;\n          animation-name: fa-beat;\n  -webkit-animation-delay: var(--fa-animation-delay, 0s);\n          animation-delay: var(--fa-animation-delay, 0s);\n  -webkit-animation-direction: var(--fa-animation-direction, normal);\n          animation-direction: var(--fa-animation-direction, normal);\n  -webkit-animation-duration: var(--fa-animation-duration, 1s);\n          animation-duration: var(--fa-animation-duration, 1s);\n  -webkit-animation-iteration-count: var(--fa-animation-iteration-count, infinite);\n          animation-iteration-count: var(--fa-animation-iteration-count, infinite);\n  -webkit-animation-timing-function: var(--fa-animation-timing, ease-in-out);\n          animation-timing-function: var(--fa-animation-timing, ease-in-out);\n}\n\n.fa-bounce {\n  -webkit-animation-name: fa-bounce;\n          animation-name: fa-bounce;\n  -webkit-animation-delay: var(--fa-animation-delay, 0s);\n          animation-delay: var(--fa-animation-delay, 0s);\n  -webkit-animation-direction: var(--fa-animation-direction, normal);\n          animation-direction: var(--fa-animation-direction, normal);\n  -webkit-animation-duration: var(--fa-animation-duration, 1s);\n          animation-duration: var(--fa-animation-duration, 1s);\n  -webkit-animation-iteration-count: var(--fa-animation-iteration-count, infinite);\n          animation-iteration-count: var(--fa-animation-iteration-count, infinite);\n  -webkit-animation-timing-function: var(--fa-animation-timing, cubic-bezier(0.28, 0.84, 0.42, 1));\n          animation-timing-function: var(--fa-animation-timing, cubic-bezier(0.28, 0.84, 0.42, 1));\n}\n\n.fa-fade {\n  -webkit-animation-name: fa-fade;\n          animation-name: fa-fade;\n  -webkit-animation-delay: var(--fa-animation-delay, 0s);\n          animation-delay: var(--fa-animation-delay, 0s);\n  -webkit-animation-direction: var(--fa-animation-direction, normal);\n          animation-direction: var(--fa-animation-direction, normal);\n  -webkit-animation-duration: var(--fa-animation-duration, 1s);\n          animation-duration: var(--fa-animation-duration, 1s);\n  -webkit-animation-iteration-count: var(--fa-animation-iteration-count, infinite);\n          animation-iteration-count: var(--fa-animation-iteration-count, infinite);\n  -webkit-animation-timing-function: var(--fa-animation-timing, cubic-bezier(0.4, 0, 0.6, 1));\n          animation-timing-function: var(--fa-animation-timing, cubic-bezier(0.4, 0, 0.6, 1));\n}\n\n.fa-beat-fade {\n  -webkit-animation-name: fa-beat-fade;\n          animation-name: fa-beat-fade;\n  -webkit-animation-delay: var(--fa-animation-delay, 0s);\n          animation-delay: var(--fa-animation-delay, 0s);\n  -webkit-animation-direction: var(--fa-animation-direction, normal);\n          animation-direction: var(--fa-animation-direction, normal);\n  -webkit-animation-duration: var(--fa-animation-duration, 1s);\n          animation-duration: var(--fa-animation-duration, 1s);\n  -webkit-animation-iteration-count: var(--fa-animation-iteration-count, infinite);\n          animation-iteration-count: var(--fa-animation-iteration-count, infinite);\n  -webkit-animation-timing-function: var(--fa-animation-timing, cubic-bezier(0.4, 0, 0.6, 1));\n          animation-timing-function: var(--fa-animation-timing, cubic-bezier(0.4, 0, 0.6, 1));\n}\n\n.fa-flip {\n  -webkit-animation-name: fa-flip;\n          animation-name: fa-flip;\n  -webkit-animation-delay: var(--fa-animation-delay, 0s);\n          animation-delay: var(--fa-animation-delay, 0s);\n  -webkit-animation-direction: var(--fa-animation-direction, normal);\n          animation-direction: var(--fa-animation-direction, normal);\n  -webkit-animation-duration: var(--fa-animation-duration, 1s);\n          animation-duration: var(--fa-animation-duration, 1s);\n  -webkit-animation-iteration-count: var(--fa-animation-iteration-count, infinite);\n          animation-iteration-count: var(--fa-animation-iteration-count, infinite);\n  -webkit-animation-timing-function: var(--fa-animation-timing, ease-in-out);\n          animation-timing-function: var(--fa-animation-timing, ease-in-out);\n}\n\n.fa-shake {\n  -webkit-animation-name: fa-shake;\n          animation-name: fa-shake;\n  -webkit-animation-delay: var(--fa-animation-delay, 0s);\n          animation-delay: var(--fa-animation-delay, 0s);\n  -webkit-animation-direction: var(--fa-animation-direction, normal);\n          animation-direction: var(--fa-animation-direction, normal);\n  -webkit-animation-duration: var(--fa-animation-duration, 1s);\n          animation-duration: var(--fa-animation-duration, 1s);\n  -webkit-animation-iteration-count: var(--fa-animation-iteration-count, infinite);\n          animation-iteration-count: var(--fa-animation-iteration-count, infinite);\n  -webkit-animation-timing-function: var(--fa-animation-timing, linear);\n          animation-timing-function: var(--fa-animation-timing, linear);\n}\n\n.fa-spin {\n  -webkit-animation-name: fa-spin;\n          animation-name: fa-spin;\n  -webkit-animation-delay: var(--fa-animation-delay, 0s);\n          animation-delay: var(--fa-animation-delay, 0s);\n  -webkit-animation-direction: var(--fa-animation-direction, normal);\n          animation-direction: var(--fa-animation-direction, normal);\n  -webkit-animation-duration: var(--fa-animation-duration, 2s);\n          animation-duration: var(--fa-animation-duration, 2s);\n  -webkit-animation-iteration-count: var(--fa-animation-iteration-count, infinite);\n          animation-iteration-count: var(--fa-animation-iteration-count, infinite);\n  -webkit-animation-timing-function: var(--fa-animation-timing, linear);\n          animation-timing-function: var(--fa-animation-timing, linear);\n}\n\n.fa-spin-reverse {\n  --fa-animation-direction: reverse;\n}\n\n.fa-pulse,\n.fa-spin-pulse {\n  -webkit-animation-name: fa-spin;\n          animation-name: fa-spin;\n  -webkit-animation-direction: var(--fa-animation-direction, normal);\n          animation-direction: var(--fa-animation-direction, normal);\n  -webkit-animation-duration: var(--fa-animation-duration, 1s);\n          animation-duration: var(--fa-animation-duration, 1s);\n  -webkit-animation-iteration-count: var(--fa-animation-iteration-count, infinite);\n          animation-iteration-count: var(--fa-animation-iteration-count, infinite);\n  -webkit-animation-timing-function: var(--fa-animation-timing, steps(8));\n          animation-timing-function: var(--fa-animation-timing, steps(8));\n}\n\n@media (prefers-reduced-motion: reduce) {\n  .fa-beat,\n.fa-bounce,\n.fa-fade,\n.fa-beat-fade,\n.fa-flip,\n.fa-pulse,\n.fa-shake,\n.fa-spin,\n.fa-spin-pulse {\n    -webkit-animation-delay: -1ms;\n            animation-delay: -1ms;\n    -webkit-animation-duration: 1ms;\n            animation-duration: 1ms;\n    -webkit-animation-iteration-count: 1;\n            animation-iteration-count: 1;\n    -webkit-transition-delay: 0s;\n            transition-delay: 0s;\n    -webkit-transition-duration: 0s;\n            transition-duration: 0s;\n  }\n}\n@-webkit-keyframes fa-beat {\n  0%, 90% {\n    -webkit-transform: scale(1);\n            transform: scale(1);\n  }\n  45% {\n    -webkit-transform: scale(var(--fa-beat-scale, 1.25));\n            transform: scale(var(--fa-beat-scale, 1.25));\n  }\n}\n@keyframes fa-beat {\n  0%, 90% {\n    -webkit-transform: scale(1);\n            transform: scale(1);\n  }\n  45% {\n    -webkit-transform: scale(var(--fa-beat-scale, 1.25));\n            transform: scale(var(--fa-beat-scale, 1.25));\n  }\n}\n@-webkit-keyframes fa-bounce {\n  0% {\n    -webkit-transform: scale(1, 1) translateY(0);\n            transform: scale(1, 1) translateY(0);\n  }\n  10% {\n    -webkit-transform: scale(var(--fa-bounce-start-scale-x, 1.1), var(--fa-bounce-start-scale-y, 0.9)) translateY(0);\n            transform: scale(var(--fa-bounce-start-scale-x, 1.1), var(--fa-bounce-start-scale-y, 0.9)) translateY(0);\n  }\n  30% {\n    -webkit-transform: scale(var(--fa-bounce-jump-scale-x, 0.9), var(--fa-bounce-jump-scale-y, 1.1)) translateY(var(--fa-bounce-height, -0.5em));\n            transform: scale(var(--fa-bounce-jump-scale-x, 0.9), var(--fa-bounce-jump-scale-y, 1.1)) translateY(var(--fa-bounce-height, -0.5em));\n  }\n  50% {\n    -webkit-transform: scale(var(--fa-bounce-land-scale-x, 1.05), var(--fa-bounce-land-scale-y, 0.95)) translateY(0);\n            transform: scale(var(--fa-bounce-land-scale-x, 1.05), var(--fa-bounce-land-scale-y, 0.95)) translateY(0);\n  }\n  57% {\n    -webkit-transform: scale(1, 1) translateY(var(--fa-bounce-rebound, -0.125em));\n            transform: scale(1, 1) translateY(var(--fa-bounce-rebound, -0.125em));\n  }\n  64% {\n    -webkit-transform: scale(1, 1) translateY(0);\n            transform: scale(1, 1) translateY(0);\n  }\n  100% {\n    -webkit-transform: scale(1, 1) translateY(0);\n            transform: scale(1, 1) translateY(0);\n  }\n}\n@keyframes fa-bounce {\n  0% {\n    -webkit-transform: scale(1, 1) translateY(0);\n            transform: scale(1, 1) translateY(0);\n  }\n  10% {\n    -webkit-transform: scale(var(--fa-bounce-start-scale-x, 1.1), var(--fa-bounce-start-scale-y, 0.9)) translateY(0);\n            transform: scale(var(--fa-bounce-start-scale-x, 1.1), var(--fa-bounce-start-scale-y, 0.9)) translateY(0);\n  }\n  30% {\n    -webkit-transform: scale(var(--fa-bounce-jump-scale-x, 0.9), var(--fa-bounce-jump-scale-y, 1.1)) translateY(var(--fa-bounce-height, -0.5em));\n            transform: scale(var(--fa-bounce-jump-scale-x, 0.9), var(--fa-bounce-jump-scale-y, 1.1)) translateY(var(--fa-bounce-height, -0.5em));\n  }\n  50% {\n    -webkit-transform: scale(var(--fa-bounce-land-scale-x, 1.05), var(--fa-bounce-land-scale-y, 0.95)) translateY(0);\n            transform: scale(var(--fa-bounce-land-scale-x, 1.05), var(--fa-bounce-land-scale-y, 0.95)) translateY(0);\n  }\n  57% {\n    -webkit-transform: scale(1, 1) translateY(var(--fa-bounce-rebound, -0.125em));\n            transform: scale(1, 1) translateY(var(--fa-bounce-rebound, -0.125em));\n  }\n  64% {\n    -webkit-transform: scale(1, 1) translateY(0);\n            transform: scale(1, 1) translateY(0);\n  }\n  100% {\n    -webkit-transform: scale(1, 1) translateY(0);\n            transform: scale(1, 1) translateY(0);\n  }\n}\n@-webkit-keyframes fa-fade {\n  50% {\n    opacity: var(--fa-fade-opacity, 0.4);\n  }\n}\n@keyframes fa-fade {\n  50% {\n    opacity: var(--fa-fade-opacity, 0.4);\n  }\n}\n@-webkit-keyframes fa-beat-fade {\n  0%, 100% {\n    opacity: var(--fa-beat-fade-opacity, 0.4);\n    -webkit-transform: scale(1);\n            transform: scale(1);\n  }\n  50% {\n    opacity: 1;\n    -webkit-transform: scale(var(--fa-beat-fade-scale, 1.125));\n            transform: scale(var(--fa-beat-fade-scale, 1.125));\n  }\n}\n@keyframes fa-beat-fade {\n  0%, 100% {\n    opacity: var(--fa-beat-fade-opacity, 0.4);\n    -webkit-transform: scale(1);\n            transform: scale(1);\n  }\n  50% {\n    opacity: 1;\n    -webkit-transform: scale(var(--fa-beat-fade-scale, 1.125));\n            transform: scale(var(--fa-beat-fade-scale, 1.125));\n  }\n}\n@-webkit-keyframes fa-flip {\n  50% {\n    -webkit-transform: rotate3d(var(--fa-flip-x, 0), var(--fa-flip-y, 1), var(--fa-flip-z, 0), var(--fa-flip-angle, -180deg));\n            transform: rotate3d(var(--fa-flip-x, 0), var(--fa-flip-y, 1), var(--fa-flip-z, 0), var(--fa-flip-angle, -180deg));\n  }\n}\n@keyframes fa-flip {\n  50% {\n    -webkit-transform: rotate3d(var(--fa-flip-x, 0), var(--fa-flip-y, 1), var(--fa-flip-z, 0), var(--fa-flip-angle, -180deg));\n            transform: rotate3d(var(--fa-flip-x, 0), var(--fa-flip-y, 1), var(--fa-flip-z, 0), var(--fa-flip-angle, -180deg));\n  }\n}\n@-webkit-keyframes fa-shake {\n  0% {\n    -webkit-transform: rotate(-15deg);\n            transform: rotate(-15deg);\n  }\n  4% {\n    -webkit-transform: rotate(15deg);\n            transform: rotate(15deg);\n  }\n  8%, 24% {\n    -webkit-transform: rotate(-18deg);\n            transform: rotate(-18deg);\n  }\n  12%, 28% {\n    -webkit-transform: rotate(18deg);\n            transform: rotate(18deg);\n  }\n  16% {\n    -webkit-transform: rotate(-22deg);\n            transform: rotate(-22deg);\n  }\n  20% {\n    -webkit-transform: rotate(22deg);\n            transform: rotate(22deg);\n  }\n  32% {\n    -webkit-transform: rotate(-12deg);\n            transform: rotate(-12deg);\n  }\n  36% {\n    -webkit-transform: rotate(12deg);\n            transform: rotate(12deg);\n  }\n  40%, 100% {\n    -webkit-transform: rotate(0deg);\n            transform: rotate(0deg);\n  }\n}\n@keyframes fa-shake {\n  0% {\n    -webkit-transform: rotate(-15deg);\n            transform: rotate(-15deg);\n  }\n  4% {\n    -webkit-transform: rotate(15deg);\n            transform: rotate(15deg);\n  }\n  8%, 24% {\n    -webkit-transform: rotate(-18deg);\n            transform: rotate(-18deg);\n  }\n  12%, 28% {\n    -webkit-transform: rotate(18deg);\n            transform: rotate(18deg);\n  }\n  16% {\n    -webkit-transform: rotate(-22deg);\n            transform: rotate(-22deg);\n  }\n  20% {\n    -webkit-transform: rotate(22deg);\n            transform: rotate(22deg);\n  }\n  32% {\n    -webkit-transform: rotate(-12deg);\n            transform: rotate(-12deg);\n  }\n  36% {\n    -webkit-transform: rotate(12deg);\n            transform: rotate(12deg);\n  }\n  40%, 100% {\n    -webkit-transform: rotate(0deg);\n            transform: rotate(0deg);\n  }\n}\n@-webkit-keyframes fa-spin {\n  0% {\n    -webkit-transform: rotate(0deg);\n            transform: rotate(0deg);\n  }\n  100% {\n    -webkit-transform: rotate(360deg);\n            transform: rotate(360deg);\n  }\n}\n@keyframes fa-spin {\n  0% {\n    -webkit-transform: rotate(0deg);\n            transform: rotate(0deg);\n  }\n  100% {\n    -webkit-transform: rotate(360deg);\n            transform: rotate(360deg);\n  }\n}\n.fa-rotate-90 {\n  -webkit-transform: rotate(90deg);\n          transform: rotate(90deg);\n}\n\n.fa-rotate-180 {\n  -webkit-transform: rotate(180deg);\n          transform: rotate(180deg);\n}\n\n.fa-rotate-270 {\n  -webkit-transform: rotate(270deg);\n          transform: rotate(270deg);\n}\n\n.fa-flip-horizontal {\n  -webkit-transform: scale(-1, 1);\n          transform: scale(-1, 1);\n}\n\n.fa-flip-vertical {\n  -webkit-transform: scale(1, -1);\n          transform: scale(1, -1);\n}\n\n.fa-flip-both,\n.fa-flip-horizontal.fa-flip-vertical {\n  -webkit-transform: scale(-1, -1);\n          transform: scale(-1, -1);\n}\n\n.fa-rotate-by {\n  -webkit-transform: rotate(var(--fa-rotate-angle, none));\n          transform: rotate(var(--fa-rotate-angle, none));\n}\n\n.fa-stack {\n  display: inline-block;\n  vertical-align: middle;\n  height: 2em;\n  position: relative;\n  width: 2.5em;\n}\n\n.fa-stack-1x,\n.fa-stack-2x {\n  bottom: 0;\n  left: 0;\n  margin: auto;\n  position: absolute;\n  right: 0;\n  top: 0;\n  z-index: var(--fa-stack-z-index, auto);\n}\n\n.svg-inline--fa.fa-stack-1x {\n  height: 1em;\n  width: 1.25em;\n}\n.svg-inline--fa.fa-stack-2x {\n  height: 2em;\n  width: 2.5em;\n}\n\n.fa-inverse {\n  color: var(--fa-inverse, #fff);\n}\n\n.sr-only,\n.fa-sr-only {\n  position: absolute;\n  width: 1px;\n  height: 1px;\n  padding: 0;\n  margin: -1px;\n  overflow: hidden;\n  clip: rect(0, 0, 0, 0);\n  white-space: nowrap;\n  border-width: 0;\n}\n\n.sr-only-focusable:not(:focus),\n.fa-sr-only-focusable:not(:focus) {\n  position: absolute;\n  width: 1px;\n  height: 1px;\n  padding: 0;\n  margin: -1px;\n  overflow: hidden;\n  clip: rect(0, 0, 0, 0);\n  white-space: nowrap;\n  border-width: 0;\n}\n\n.svg-inline--fa .fa-primary {\n  fill: var(--fa-primary-color, currentColor);\n  opacity: var(--fa-primary-opacity, 1);\n}\n\n.svg-inline--fa .fa-secondary {\n  fill: var(--fa-secondary-color, currentColor);\n  opacity: var(--fa-secondary-opacity, 0.4);\n}\n\n.svg-inline--fa.fa-swap-opacity .fa-primary {\n  opacity: var(--fa-secondary-opacity, 0.4);\n}\n\n.svg-inline--fa.fa-swap-opacity .fa-secondary {\n  opacity: var(--fa-primary-opacity, 1);\n}\n\n.svg-inline--fa mask .fa-primary,\n.svg-inline--fa mask .fa-secondary {\n  fill: black;\n}\n\n.fad.fa-inverse,\n.fa-duotone.fa-inverse {\n  color: var(--fa-inverse, #fff);\n}';function mt(){var n=kn,t=_n,e=it.cssPrefix,r=it.replacementClass,i=ht;if(e!==n||r!==t){var o=new RegExp("\\.".concat(n,"\\-"),"g"),a=new RegExp("\\--".concat(n,"\\-"),"g"),s=new RegExp("\\.".concat(t),"g");i=i.replace(o,".".concat(e,"-")).replace(a,"--".concat(e,"-")).replace(s,".".concat(r))}return i}var gt=!1;function bt(){it.autoAddCss&&!gt&&(function(n){if(n&&xn){var t=En.createElement("style");t.setAttribute("type","text/css"),t.innerHTML=n;for(var e=En.head.childNodes,r=null,i=e.length-1;i>-1;i--){var o=e[i],a=(o.tagName||"").toUpperCase();["STYLE","LINK"].indexOf(a)>-1&&(r=o)}En.head.insertBefore(t,r)}}(mt()),gt=!0)}var yt={mixout:function(){return{dom:{css:mt,insertCss:bt}}},hooks:function(){return{beforeDOMElementCreation:function(){bt()},beforeI2svg:function(){bt()}}}},Et=yn||{};Et[wn]||(Et[wn]={}),Et[wn].styles||(Et[wn].styles={}),Et[wn].hooks||(Et[wn].hooks={}),Et[wn].shims||(Et[wn].shims=[]);var Ct=Et[wn],Bt=[],xt=!1;function vt(n){var t=n.tag,e=n.attributes,r=void 0===e?{}:e,i=n.children,o=void 0===i?[]:i;return"string"==typeof n?dt(n):"<".concat(t," ").concat(function(n){return Object.keys(n||{}).reduce((function(t,e){return t+"".concat(e,'="').concat(dt(n[e]),'" ')}),"").trim()}(r),">").concat(o.map(vt).join(""),"</").concat(t,">")}function wt(n,t,e){if(n&&n[t]&&n[t][e])return{prefix:t,iconName:e,icon:n[t][e]}}xn&&((xt=(En.documentElement.doScroll?/^loaded|^c/:/^loaded|^i|^c/).test(En.readyState))||En.addEventListener("DOMContentLoaded",(function n(){En.removeEventListener("DOMContentLoaded",n),xt=1,Bt.map((function(n){return n()}))})));var kt=function(n,t,e,r){var i,o,a,s=Object.keys(n),c=s.length,l=void 0!==r?function(n,t){return function(e,r,i,o){return n.call(t,e,r,i,o)}}(t,r):t;for(void 0===e?(i=1,a=n[s[0]]):(i=0,a=e);i<c;i++)a=l(a,n[o=s[i]],o,n);return a};function _t(n){var t=function(n){for(var t=[],e=0,r=n.length;e<r;){var i=n.charCodeAt(e++);if(i>=55296&&i<=56319&&e<r){var o=n.charCodeAt(e++);56320==(64512&o)?t.push(((1023&i)<<10)+(1023&o)+65536):(t.push(i),e--)}else t.push(i)}return t}(n);return 1===t.length?t[0].toString(16):null}function St(n){return Object.keys(n).reduce((function(t,e){var r=n[e];return r.icon?t[r.iconName]=r.icon:t[e]=r,t}),{})}function Ot(n,t){var e=(arguments.length>2&&void 0!==arguments[2]?arguments[2]:{}).skipHooks,r=void 0!==e&&e,i=St(t);"function"!=typeof Ct.hooks.addPack||r?Ct.styles[n]=J(J({},Ct.styles[n]||{}),i):Ct.hooks.addPack(n,St(t)),"fas"===n&&Ot("fa",t)}var jt,It,Rt,Pt=Ct.styles,Tt=Ct.shims,Nt=(tn(jt={},Yn,Object.values($n[Yn])),tn(jt,Ln,Object.values($n[Ln])),jt),zt=null,Yt={},Lt={},Ut={},Mt={},Ft={},Dt=(tn(It={},Yn,Object.keys(Fn[Yn])),tn(It,Ln,Object.keys(Fn[Ln])),It);var $t,Wt=function(){var n=function(n){return kt(Pt,(function(t,e,r){return t[r]=kt(e,n,{}),t}),{})};Yt=n((function(n,t,e){return t[3]&&(n[t[3]]=e),t[2]&&t[2].filter((function(n){return"number"==typeof n})).forEach((function(t){n[t.toString(16)]=e})),n})),Lt=n((function(n,t,e){return n[e]=e,t[2]&&t[2].filter((function(n){return"string"==typeof n})).forEach((function(t){n[t]=e})),n})),Ft=n((function(n,t,e){var r=t[2];return n[e]=e,r.forEach((function(t){n[t]=e})),n}));var t="far"in Pt||it.autoFetchSvg,e=kt(Tt,(function(n,e){var r=e[0],i=e[1],o=e[2];return"far"!==i||t||(i="fas"),"string"==typeof r&&(n.names[r]={prefix:i,iconName:o}),"number"==typeof r&&(n.unicodes[r.toString(16)]={prefix:i,iconName:o}),n}),{names:{},unicodes:{}});Ut=e.names,Mt=e.unicodes,zt=Kt(it.styleDefault,{family:it.familyDefault})};function qt(n,t){return(Yt[n]||{})[t]}function Zt(n,t){return(Ft[n]||{})[t]}function Xt(n){return Ut[n]||{prefix:null,iconName:null}}function Vt(){return zt}$t=function(n){zt=Kt(n.styleDefault,{family:it.familyDefault})},ot.push($t),Wt();var Ht=function(){return{prefix:null,iconName:null,rest:[]}};function Kt(n){var t=(arguments.length>1&&void 0!==arguments[1]?arguments[1]:{}).family,e=void 0===t?Yn:t,r=Fn[e][n],i=Dn[e][n]||Dn[e][r],o=n in Ct.styles?n:null;return i||o||null}var Gt=(tn(Rt={},Yn,Object.keys($n[Yn])),tn(Rt,Ln,Object.keys($n[Ln])),Rt);function Jt(n){var t,e=(arguments.length>1&&void 0!==arguments[1]?arguments[1]:{}).skipLookups,r=void 0!==e&&e,i=(tn(t={},Yn,"".concat(it.cssPrefix,"-").concat(Yn)),tn(t,Ln,"".concat(it.cssPrefix,"-").concat(Ln)),t),o=null,a=Yn;(n.includes(i[Yn])||n.some((function(n){return Gt[Yn].includes(n)})))&&(a=Yn),(n.includes(i[Ln])||n.some((function(n){return Gt[Ln].includes(n)})))&&(a=Ln);var s=n.reduce((function(n,t){var e=function(n,t){var e,r=t.split("-"),i=r[0],o=r.slice(1).join("-");return i!==n||""===o||(e=o,~nt.indexOf(e))?null:o}(it.cssPrefix,t);if(Pt[t]?(t=Nt[a].includes(t)?Wn[a][t]:t,o=t,n.prefix=t):Dt[a].indexOf(t)>-1?(o=t,n.prefix=Kt(t,{family:a})):e?n.iconName=e:t!==it.replacementClass&&t!==i[Yn]&&t!==i[Ln]&&n.rest.push(t),!r&&n.prefix&&n.iconName){var s="fa"===o?Xt(n.iconName):{},c=Zt(n.prefix,n.iconName);s.prefix&&(o=null),n.iconName=s.iconName||c||n.iconName,n.prefix=s.prefix||n.prefix,"far"!==n.prefix||Pt.far||!Pt.fas||it.autoFetchSvg||(n.prefix="fas")}return n}),Ht());return(n.includes("fa-brands")||n.includes("fab"))&&(s.prefix="fab"),(n.includes("fa-duotone")||n.includes("fad"))&&(s.prefix="fad"),s.prefix||a!==Ln||!Pt.fass&&!it.autoFetchSvg||(s.prefix="fass",s.iconName=Zt(s.prefix,s.iconName)||s.iconName),"fa"!==s.prefix&&"fa"!==o||(s.prefix=Vt()||"fas"),s}var Qt=function(){function n(){!function(n,t){if(!(n instanceof t))throw new TypeError("Cannot call a class as a function")}(this,n),this.definitions={}}var t,e;return t=n,e=[{key:"add",value:function(){for(var n=this,t=arguments.length,e=new Array(t),r=0;r<t;r++)e[r]=arguments[r];var i=e.reduce(this._pullDefinitions,{});Object.keys(i).forEach((function(t){n.definitions[t]=J(J({},n.definitions[t]||{}),i[t]),Ot(t,i[t]);var e=$n[Yn][t];e&&Ot(e,i[t]),Wt()}))}},{key:"reset",value:function(){this.definitions={}}},{key:"_pullDefinitions",value:function(n,t){var e=t.prefix&&t.iconName&&t.icon?{0:t}:t;return Object.keys(e).map((function(t){var r=e[t],i=r.prefix,o=r.iconName,a=r.icon,s=a[2];n[i]||(n[i]={}),s.length>0&&s.forEach((function(t){"string"==typeof t&&(n[i][t]=a)})),n[i][o]=a})),n}}],e&&nn(t.prototype,e),Object.defineProperty(t,"prototype",{writable:!1}),n}(),ne=[],te={},ee={},re=Object.keys(ee);function ie(n,t){for(var e=arguments.length,r=new Array(e>2?e-2:0),i=2;i<e;i++)r[i-2]=arguments[i];return(te[n]||[]).forEach((function(n){t=n.apply(null,[t].concat(r))})),t}function oe(n){for(var t=arguments.length,e=new Array(t>1?t-1:0),r=1;r<t;r++)e[r-1]=arguments[r];(te[n]||[]).forEach((function(n){n.apply(null,e)}))}function ae(){var n=arguments[0],t=Array.prototype.slice.call(arguments,1);return ee[n]?ee[n].apply(null,t):void 0}function se(n){"fa"===n.prefix&&(n.prefix="fas");var t=n.iconName,e=n.prefix||Vt();if(t)return t=Zt(e,t)||t,wt(ce.definitions,e,t)||wt(Ct.styles,e,t)}var ce=new Qt,le={i2svg:function(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return xn?(oe("beforeI2svg",n),ae("pseudoElements2svg",n),ae("i2svg",n)):Promise.reject("Operation requires a DOM of some kind.")},watch:function(){var n,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},e=t.autoReplaceSvgRoot;!1===it.autoReplaceSvg&&(it.autoReplaceSvg=!0),it.observeMutations=!0,n=function(){Ae({autoReplaceSvgRoot:e}),oe("watch",t)},xn&&(xt?setTimeout(n,0):Bt.push(n))}},ue={noAuto:function(){it.autoReplaceSvg=!1,it.observeMutations=!1,oe("noAuto")},config:it,dom:le,parse:{icon:function(n){if(null===n)return null;if("object"===Q(n)&&n.prefix&&n.iconName)return{prefix:n.prefix,iconName:Zt(n.prefix,n.iconName)||n.iconName};if(Array.isArray(n)&&2===n.length){var t=0===n[1].indexOf("fa-")?n[1].slice(3):n[1],e=Kt(n[0]);return{prefix:e,iconName:Zt(e,t)||t}}if("string"==typeof n&&(n.indexOf("".concat(it.cssPrefix,"-"))>-1||n.match(qn))){var r=Jt(n.split(" "),{skipLookups:!0});return{prefix:r.prefix||Vt(),iconName:Zt(r.prefix,r.iconName)||r.iconName}}if("string"==typeof n){var i=Vt();return{prefix:i,iconName:Zt(i,n)||n}}}},library:ce,findIconDefinition:se,toHtml:vt},Ae=function(){var n=(arguments.length>0&&void 0!==arguments[0]?arguments[0]:{}).autoReplaceSvgRoot,t=void 0===n?En:n;(Object.keys(Ct.styles).length>0||it.autoFetchSvg)&&xn&&it.autoReplaceSvg&&ue.dom.i2svg({node:t})};function de(n,t){return Object.defineProperty(n,"abstract",{get:t}),Object.defineProperty(n,"html",{get:function(){return n.abstract.map((function(n){return vt(n)}))}}),Object.defineProperty(n,"node",{get:function(){if(xn){var t=En.createElement("div");return t.innerHTML=n.html,t.children}}}),n}function fe(n){var t=n.icons,e=t.main,r=t.mask,i=n.prefix,o=n.iconName,a=n.transform,s=n.symbol,c=n.title,l=n.maskId,u=n.titleId,A=n.extra,d=n.watchable,f=void 0!==d&&d,p=r.found?r:e,h=p.width,m=p.height,g="fak"===i,b=[it.replacementClass,o?"".concat(it.cssPrefix,"-").concat(o):""].filter((function(n){return-1===A.classes.indexOf(n)})).filter((function(n){return""!==n||!!n})).concat(A.classes).join(" "),y={children:[],attributes:J(J({},A.attributes),{},{"data-prefix":i,"data-icon":o,class:b,role:A.attributes.role||"img",xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 ".concat(h," ").concat(m)})},E=g&&!~A.classes.indexOf("fa-fw")?{width:"".concat(h/m*16*.0625,"em")}:{};f&&(y.attributes[Sn]=""),c&&(y.children.push({tag:"title",attributes:{id:y.attributes["aria-labelledby"]||"title-".concat(u||lt())},children:[c]}),delete y.attributes.title);var C=J(J({},y),{},{prefix:i,iconName:o,main:e,mask:r,maskId:l,transform:a,symbol:s,styles:J(J({},E),A.styles)}),B=r.found&&e.found?ae("generateAbstractMask",C)||{children:[],attributes:{}}:ae("generateAbstractIcon",C)||{children:[],attributes:{}},x=B.children,v=B.attributes;return C.children=x,C.attributes=v,s?function(n){var t=n.prefix,e=n.iconName,r=n.children,i=n.attributes,o=n.symbol,a=!0===o?"".concat(t,"-").concat(it.cssPrefix,"-").concat(e):o;return[{tag:"svg",attributes:{style:"display: none;"},children:[{tag:"symbol",attributes:J(J({},i),{},{id:a}),children:r}]}]}(C):function(n){var t=n.children,e=n.main,r=n.mask,i=n.attributes,o=n.styles,a=n.transform;if(pt(a)&&e.found&&!r.found){var s={x:e.width/e.height/2,y:.5};i.style=ft(J(J({},o),{},{"transform-origin":"".concat(s.x+a.x/16,"em ").concat(s.y+a.y/16,"em")}))}return[{tag:"svg",attributes:i,children:t}]}(C)}function pe(n){var t=n.content,e=n.width,r=n.height,i=n.transform,o=n.title,a=n.extra,s=n.watchable,c=void 0!==s&&s,l=J(J(J({},a.attributes),o?{title:o}:{}),{},{class:a.classes.join(" ")});c&&(l[Sn]="");var u=J({},a.styles);pt(i)&&(u.transform=function(n){var t=n.transform,e=n.width,r=void 0===e?16:e,i=n.height,o=void 0===i?16:i,a=n.startCentered,s=void 0!==a&&a,c="";return c+=s&&vn?"translate(".concat(t.x/at-r/2,"em, ").concat(t.y/at-o/2,"em) "):s?"translate(calc(-50% + ".concat(t.x/at,"em), calc(-50% + ").concat(t.y/at,"em)) "):"translate(".concat(t.x/at,"em, ").concat(t.y/at,"em) "),(c+="scale(".concat(t.size/at*(t.flipX?-1:1),", ").concat(t.size/at*(t.flipY?-1:1),") "))+"rotate(".concat(t.rotate,"deg) ")}({transform:i,startCentered:!0,width:e,height:r}),u["-webkit-transform"]=u.transform);var A=ft(u);A.length>0&&(l.style=A);var d=[];return d.push({tag:"span",attributes:l,children:[t]}),o&&d.push({tag:"span",attributes:{class:"sr-only"},children:[o]}),d}var he=Ct.styles;function me(n){var t=n[0],e=n[1],r=en(n.slice(4),1)[0];return{found:!0,width:t,height:e,icon:Array.isArray(r)?{tag:"g",attributes:{class:"".concat(it.cssPrefix,"-").concat(Jn.GROUP)},children:[{tag:"path",attributes:{class:"".concat(it.cssPrefix,"-").concat(Jn.SECONDARY),fill:"currentColor",d:r[0]}},{tag:"path",attributes:{class:"".concat(it.cssPrefix,"-").concat(Jn.PRIMARY),fill:"currentColor",d:r[1]}}]}:{tag:"path",attributes:{fill:"currentColor",d:r}}}}var ge={found:!1,width:512,height:512};function be(n,t){var e=t;return"fa"===t&&null!==it.styleDefault&&(t=Vt()),new Promise((function(r,i){if(ae("missingIconAbstract"),"fa"===e){var o=Xt(n)||{};n=o.iconName||n,t=o.prefix||t}if(n&&t&&he[t]&&he[t][n])return r(me(he[t][n]));!function(n,t){zn||it.showMissingIcons||!n||console.error('Icon with name "'.concat(n,'" and prefix "').concat(t,'" is missing.'))}(n,t),r(J(J({},ge),{},{icon:it.showMissingIcons&&n&&ae("missingIconAbstract")||{}}))}))}var ye=function(){},Ee=it.measurePerformance&&Bn&&Bn.mark&&Bn.measure?Bn:{mark:ye,measure:ye},Ce='FA "6.5.1"',Be=function(n){Ee.mark("".concat(Ce," ").concat(n," ends")),Ee.measure("".concat(Ce," ").concat(n),"".concat(Ce," ").concat(n," begins"),"".concat(Ce," ").concat(n," ends"))},xe={begin:function(n){return Ee.mark("".concat(Ce," ").concat(n," begins")),function(){return Be(n)}},end:Be},ve=function(){};function we(n){return"string"==typeof(n.getAttribute?n.getAttribute(Sn):null)}function ke(n){return En.createElementNS("http://www.w3.org/2000/svg",n)}function _e(n){return En.createElement(n)}function Se(n){var t=(arguments.length>1&&void 0!==arguments[1]?arguments[1]:{}).ceFn,e=void 0===t?"svg"===n.tag?ke:_e:t;if("string"==typeof n)return En.createTextNode(n);var r=e(n.tag);return Object.keys(n.attributes||[]).forEach((function(t){r.setAttribute(t,n.attributes[t])})),(n.children||[]).forEach((function(n){r.appendChild(Se(n,{ceFn:e}))})),r}var Oe={replace:function(n){var t=n[0];if(t.parentNode)if(n[1].forEach((function(n){t.parentNode.insertBefore(Se(n),t)})),null===t.getAttribute(Sn)&&it.keepOriginalSource){var e=En.createComment(function(n){var t=" ".concat(n.outerHTML," ");return"".concat(t,"Font Awesome fontawesome.com ")}(t));t.parentNode.replaceChild(e,t)}else t.remove()},nest:function(n){var t=n[0],e=n[1];if(~At(t).indexOf(it.replacementClass))return Oe.replace(n);var r=new RegExp("".concat(it.cssPrefix,"-.*"));if(delete e[0].attributes.id,e[0].attributes.class){var i=e[0].attributes.class.split(" ").reduce((function(n,t){return t===it.replacementClass||t.match(r)?n.toSvg.push(t):n.toNode.push(t),n}),{toNode:[],toSvg:[]});e[0].attributes.class=i.toSvg.join(" "),0===i.toNode.length?t.removeAttribute("class"):t.setAttribute("class",i.toNode.join(" "))}var o=e.map((function(n){return vt(n)})).join("\n");t.setAttribute(Sn,""),t.innerHTML=o}};function je(n){n()}function Ie(n,t){var e="function"==typeof t?t:ve;if(0===n.length)e();else{var r=je;it.mutateApproach===Tn&&(r=yn.requestAnimationFrame||je),r((function(){var t=!0===it.autoReplaceSvg?Oe.replace:Oe[it.autoReplaceSvg]||Oe.replace,r=xe.begin("mutate");n.map(t),r(),e()}))}}var Re=!1;function Pe(){Re=!0}function Te(){Re=!1}var Ne=null;function ze(n){if(Cn&&it.observeMutations){var t=n.treeCallback,e=void 0===t?ve:t,r=n.nodeCallback,i=void 0===r?ve:r,o=n.pseudoElementsCallback,a=void 0===o?ve:o,s=n.observeMutationsRoot,c=void 0===s?En:s;Ne=new Cn((function(n){if(!Re){var t=Vt();ut(n).forEach((function(n){if("childList"===n.type&&n.addedNodes.length>0&&!we(n.addedNodes[0])&&(it.searchPseudoElements&&a(n.target),e(n.target)),"attributes"===n.type&&n.target.parentNode&&it.searchPseudoElements&&a(n.target.parentNode),"attributes"===n.type&&we(n.target)&&~Gn.indexOf(n.attributeName))if("class"===n.attributeName&&function(n){var t=n.getAttribute?n.getAttribute(In):null,e=n.getAttribute?n.getAttribute(Rn):null;return t&&e}(n.target)){var r=Jt(At(n.target)),o=r.prefix,s=r.iconName;n.target.setAttribute(In,o||t),s&&n.target.setAttribute(Rn,s)}else(c=n.target)&&c.classList&&c.classList.contains&&c.classList.contains(it.replacementClass)&&i(n.target);var c}))}})),xn&&Ne.observe(c,{childList:!0,attributes:!0,characterData:!0,subtree:!0})}}function Ye(n){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{styleParser:!0},e=function(n){var t,e,r=n.getAttribute("data-prefix"),i=n.getAttribute("data-icon"),o=void 0!==n.innerText?n.innerText.trim():"",a=Jt(At(n));return a.prefix||(a.prefix=Vt()),r&&i&&(a.prefix=r,a.iconName=i),a.iconName&&a.prefix||(a.prefix&&o.length>0&&(a.iconName=(t=a.prefix,e=n.innerText,(Lt[t]||{})[e]||qt(a.prefix,_t(n.innerText)))),!a.iconName&&it.autoFetchSvg&&n.firstChild&&n.firstChild.nodeType===Node.TEXT_NODE&&(a.iconName=n.firstChild.data)),a}(n),r=e.iconName,i=e.prefix,o=e.rest,a=function(n){var t=ut(n.attributes).reduce((function(n,t){return"class"!==n.name&&"style"!==n.name&&(n[t.name]=t.value),n}),{}),e=n.getAttribute("title"),r=n.getAttribute("data-fa-title-id");return it.autoA11y&&(e?t["aria-labelledby"]="".concat(it.replacementClass,"-title-").concat(r||lt()):(t["aria-hidden"]="true",t.focusable="false")),t}(n),s=ie("parseNodeAttributes",{},n),c=t.styleParser?function(n){var t=n.getAttribute("style"),e=[];return t&&(e=t.split(";").reduce((function(n,t){var e=t.split(":"),r=e[0],i=e.slice(1);return r&&i.length>0&&(n[r]=i.join(":").trim()),n}),{})),e}(n):[];return J({iconName:r,title:n.getAttribute("title"),titleId:n.getAttribute("data-fa-title-id"),prefix:i,transform:st,mask:{iconName:null,prefix:null,rest:[]},maskId:null,symbol:!1,extra:{classes:o,styles:c,attributes:a}},s)}var Le=Ct.styles;function Ue(n){var t="nest"===it.autoReplaceSvg?Ye(n,{styleParser:!1}):Ye(n);return~t.extra.classes.indexOf(Zn)?ae("generateLayersText",n,t):ae("generateSvgReplacementMutation",n,t)}var Me=new Set;function Fe(n){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null;if(!xn)return Promise.resolve();var e=En.documentElement.classList,r=function(n){return e.add("".concat(Pn,"-").concat(n))},i=function(n){return e.remove("".concat(Pn,"-").concat(n))},o=it.autoFetchSvg?Me:Un.map((function(n){return"fa-".concat(n)})).concat(Object.keys(Le));o.includes("fa")||o.push("fa");var a=[".".concat(Zn,":not([").concat(Sn,"])")].concat(o.map((function(n){return".".concat(n,":not([").concat(Sn,"])")}))).join(", ");if(0===a.length)return Promise.resolve();var s=[];try{s=ut(n.querySelectorAll(a))}catch(n){}if(!(s.length>0))return Promise.resolve();r("pending"),i("complete");var c=xe.begin("onTree"),l=s.reduce((function(n,t){try{var e=Ue(t);e&&n.push(e)}catch(n){zn||"MissingIcon"===n.name&&console.error(n)}return n}),[]);return new Promise((function(n,e){Promise.all(l).then((function(e){Ie(e,(function(){r("active"),r("complete"),i("pending"),"function"==typeof t&&t(),c(),n()}))})).catch((function(n){c(),e(n)}))}))}function De(n){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null;Ue(n).then((function(n){n&&Ie([n],t)}))}Un.map((function(n){Me.add("fa-".concat(n))})),Object.keys(Fn[Yn]).map(Me.add.bind(Me)),Object.keys(Fn[Ln]).map(Me.add.bind(Me)),Me=rn(Me);var $e=function(n){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},e=t.transform,r=void 0===e?st:e,i=t.symbol,o=void 0!==i&&i,a=t.mask,s=void 0===a?null:a,c=t.maskId,l=void 0===c?null:c,u=t.title,A=void 0===u?null:u,d=t.titleId,f=void 0===d?null:d,p=t.classes,h=void 0===p?[]:p,m=t.attributes,g=void 0===m?{}:m,b=t.styles,y=void 0===b?{}:b;if(n){var E=n.prefix,C=n.iconName,B=n.icon;return de(J({type:"icon"},n),(function(){return oe("beforeDOMElementCreation",{iconDefinition:n,params:t}),it.autoA11y&&(A?g["aria-labelledby"]="".concat(it.replacementClass,"-title-").concat(f||lt()):(g["aria-hidden"]="true",g.focusable="false")),fe({icons:{main:me(B),mask:s?me(s.icon):{found:!1,width:null,height:null,icon:{}}},prefix:E,iconName:C,transform:J(J({},st),r),symbol:o,title:A,maskId:l,titleId:f,extra:{attributes:g,styles:y,classes:h}})}))}},We={mixout:function(){return{icon:(n=$e,function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=(t||{}).icon?t:se(t||{}),i=e.mask;return i&&(i=(i||{}).icon?i:se(i||{})),n(r,J(J({},e),{},{mask:i}))})};var n},hooks:function(){return{mutationObserverCallbacks:function(n){return n.treeCallback=Fe,n.nodeCallback=De,n}}},provides:function(n){n.i2svg=function(n){var t=n.node,e=void 0===t?En:t,r=n.callback;return Fe(e,void 0===r?function(){}:r)},n.generateSvgReplacementMutation=function(n,t){var e=t.iconName,r=t.title,i=t.titleId,o=t.prefix,a=t.transform,s=t.symbol,c=t.mask,l=t.maskId,u=t.extra;return new Promise((function(t,A){Promise.all([be(e,o),c.iconName?be(c.iconName,c.prefix):Promise.resolve({found:!1,width:512,height:512,icon:{}})]).then((function(c){var A=en(c,2),d=A[0],f=A[1];t([n,fe({icons:{main:d,mask:f},prefix:o,iconName:e,transform:a,symbol:s,maskId:l,title:r,titleId:i,extra:u,watchable:!0})])})).catch(A)}))},n.generateAbstractIcon=function(n){var t,e=n.children,r=n.attributes,i=n.main,o=n.transform,a=ft(n.styles);return a.length>0&&(r.style=a),pt(o)&&(t=ae("generateAbstractTransformGrouping",{main:i,transform:o,containerWidth:i.width,iconWidth:i.width})),e.push(t||i.icon),{children:e,attributes:r}}}},qe={mixout:function(){return{layer:function(n){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},e=t.classes,r=void 0===e?[]:e;return de({type:"layer"},(function(){oe("beforeDOMElementCreation",{assembler:n,params:t});var e=[];return n((function(n){Array.isArray(n)?n.map((function(n){e=e.concat(n.abstract)})):e=e.concat(n.abstract)})),[{tag:"span",attributes:{class:["".concat(it.cssPrefix,"-layers")].concat(rn(r)).join(" ")},children:e}]}))}}}},Ze={mixout:function(){return{counter:function(n){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},e=t.title,r=void 0===e?null:e,i=t.classes,o=void 0===i?[]:i,a=t.attributes,s=void 0===a?{}:a,c=t.styles,l=void 0===c?{}:c;return de({type:"counter",content:n},(function(){return oe("beforeDOMElementCreation",{content:n,params:t}),function(n){var t=n.content,e=n.title,r=n.extra,i=J(J(J({},r.attributes),e?{title:e}:{}),{},{class:r.classes.join(" ")}),o=ft(r.styles);o.length>0&&(i.style=o);var a=[];return a.push({tag:"span",attributes:i,children:[t]}),e&&a.push({tag:"span",attributes:{class:"sr-only"},children:[e]}),a}({content:n.toString(),title:r,extra:{attributes:s,styles:l,classes:["".concat(it.cssPrefix,"-layers-counter")].concat(rn(o))}})}))}}}},Xe={mixout:function(){return{text:function(n){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},e=t.transform,r=void 0===e?st:e,i=t.title,o=void 0===i?null:i,a=t.classes,s=void 0===a?[]:a,c=t.attributes,l=void 0===c?{}:c,u=t.styles,A=void 0===u?{}:u;return de({type:"text",content:n},(function(){return oe("beforeDOMElementCreation",{content:n,params:t}),pe({content:n,transform:J(J({},st),r),title:o,extra:{attributes:l,styles:A,classes:["".concat(it.cssPrefix,"-layers-text")].concat(rn(s))}})}))}}},provides:function(n){n.generateLayersText=function(n,t){var e=t.title,r=t.transform,i=t.extra,o=null,a=null;if(vn){var s=parseInt(getComputedStyle(n).fontSize,10),c=n.getBoundingClientRect();o=c.width/s,a=c.height/s}return it.autoA11y&&!e&&(i.attributes["aria-hidden"]="true"),Promise.resolve([n,pe({content:n.innerHTML,width:o,height:a,transform:r,title:e,extra:i,watchable:!0})])}}},Ve=new RegExp('"',"ug"),He=[1105920,1112319];function Ke(n,t){var e="".concat(jn).concat(t.replace(":","-"));return new Promise((function(r,i){if(null!==n.getAttribute(e))return r();var o,a,s,c=ut(n.children).filter((function(n){return n.getAttribute(On)===t}))[0],l=yn.getComputedStyle(n,t),u=l.getPropertyValue("font-family").match(Xn),A=l.getPropertyValue("font-weight"),d=l.getPropertyValue("content");if(c&&!u)return n.removeChild(c),r();if(u&&"none"!==d&&""!==d){var f=l.getPropertyValue("content"),p=~["Sharp"].indexOf(u[2])?Ln:Yn,h=~["Solid","Regular","Light","Thin","Duotone","Brands","Kit"].indexOf(u[2])?Dn[p][u[2].toLowerCase()]:Vn[p][A],m=function(n){var t,e,r,i,o=n.replace(Ve,""),a=(0,r=(t=o).length,(i=t.charCodeAt(0))>=55296&&i<=56319&&r>1&&(e=t.charCodeAt(1))>=56320&&e<=57343?1024*(i-55296)+e-56320+65536:i),s=a>=He[0]&&a<=He[1],c=2===o.length&&o[0]===o[1];return{value:_t(c?o[0]:o),isSecondary:s||c}}(f),g=m.value,b=m.isSecondary,y=u[0].startsWith("FontAwesome"),E=qt(h,g),C=E;if(y){var B=(a=Mt[o=g],s=qt("fas",o),a||(s?{prefix:"fas",iconName:s}:null)||{prefix:null,iconName:null});B.iconName&&B.prefix&&(E=B.iconName,h=B.prefix)}if(!E||b||c&&c.getAttribute(In)===h&&c.getAttribute(Rn)===C)r();else{n.setAttribute(e,C),c&&n.removeChild(c);var x={iconName:null,title:null,titleId:null,prefix:null,transform:st,symbol:!1,mask:{iconName:null,prefix:null,rest:[]},maskId:null,extra:{classes:[],styles:{},attributes:{}}},v=x.extra;v.attributes[On]=t,be(E,h).then((function(i){var o=fe(J(J({},x),{},{icons:{main:i,mask:Ht()},prefix:h,iconName:C,extra:v,watchable:!0})),a=En.createElementNS("http://www.w3.org/2000/svg","svg");"::before"===t?n.insertBefore(a,n.firstChild):n.appendChild(a),a.outerHTML=o.map((function(n){return vt(n)})).join("\n"),n.removeAttribute(e),r()})).catch(i)}}else r()}))}function Ge(n){return Promise.all([Ke(n,"::before"),Ke(n,"::after")])}function Je(n){return!(n.parentNode===document.head||~Nn.indexOf(n.tagName.toUpperCase())||n.getAttribute(On)||n.parentNode&&"svg"===n.parentNode.tagName)}function Qe(n){if(xn)return new Promise((function(t,e){var r=ut(n.querySelectorAll("*")).filter(Je).map(Ge),i=xe.begin("searchPseudoElements");Pe(),Promise.all(r).then((function(){i(),Te(),t()})).catch((function(){i(),Te(),e()}))}))}var nr=!1,tr=function(n){return n.toLowerCase().split(" ").reduce((function(n,t){var e=t.toLowerCase().split("-"),r=e[0],i=e.slice(1).join("-");if(r&&"h"===i)return n.flipX=!0,n;if(r&&"v"===i)return n.flipY=!0,n;if(i=parseFloat(i),isNaN(i))return n;switch(r){case"grow":n.size=n.size+i;break;case"shrink":n.size=n.size-i;break;case"left":n.x=n.x-i;break;case"right":n.x=n.x+i;break;case"up":n.y=n.y-i;break;case"down":n.y=n.y+i;break;case"rotate":n.rotate=n.rotate+i}return n}),{size:16,x:0,y:0,flipX:!1,flipY:!1,rotate:0})},er={mixout:function(){return{parse:{transform:function(n){return tr(n)}}}},hooks:function(){return{parseNodeAttributes:function(n,t){var e=t.getAttribute("data-fa-transform");return e&&(n.transform=tr(e)),n}}},provides:function(n){n.generateAbstractTransformGrouping=function(n){var t=n.main,e=n.transform,r=n.containerWidth,i=n.iconWidth,o={transform:"translate(".concat(r/2," 256)")},a="translate(".concat(32*e.x,", ").concat(32*e.y,") "),s="scale(".concat(e.size/16*(e.flipX?-1:1),", ").concat(e.size/16*(e.flipY?-1:1),") "),c="rotate(".concat(e.rotate," 0 0)"),l={outer:o,inner:{transform:"".concat(a," ").concat(s," ").concat(c)},path:{transform:"translate(".concat(i/2*-1," -256)")}};return{tag:"g",attributes:J({},l.outer),children:[{tag:"g",attributes:J({},l.inner),children:[{tag:t.icon.tag,children:t.icon.children,attributes:J(J({},t.icon.attributes),l.path)}]}]}}}},rr={x:0,y:0,width:"100%",height:"100%"};function ir(n){var t=!(arguments.length>1&&void 0!==arguments[1])||arguments[1];return n.attributes&&(n.attributes.fill||t)&&(n.attributes.fill="black"),n}var or,ar={hooks:function(){return{parseNodeAttributes:function(n,t){var e=t.getAttribute("data-fa-mask"),r=e?Jt(e.split(" ").map((function(n){return n.trim()}))):Ht();return r.prefix||(r.prefix=Vt()),n.mask=r,n.maskId=t.getAttribute("data-fa-mask-id"),n}}},provides:function(n){n.generateAbstractMask=function(n){var t,e=n.children,r=n.attributes,i=n.main,o=n.mask,a=n.maskId,s=n.transform,c=i.width,l=i.icon,u=o.width,A=o.icon,d=function(n){var t=n.transform,e=n.iconWidth,r={transform:"translate(".concat(n.containerWidth/2," 256)")},i="translate(".concat(32*t.x,", ").concat(32*t.y,") "),o="scale(".concat(t.size/16*(t.flipX?-1:1),", ").concat(t.size/16*(t.flipY?-1:1),") "),a="rotate(".concat(t.rotate," 0 0)");return{outer:r,inner:{transform:"".concat(i," ").concat(o," ").concat(a)},path:{transform:"translate(".concat(e/2*-1," -256)")}}}({transform:s,containerWidth:u,iconWidth:c}),f={tag:"rect",attributes:J(J({},rr),{},{fill:"white"})},p=l.children?{children:l.children.map(ir)}:{},h={tag:"g",attributes:J({},d.inner),children:[ir(J({tag:l.tag,attributes:J(J({},l.attributes),d.path)},p))]},m={tag:"g",attributes:J({},d.outer),children:[h]},g="mask-".concat(a||lt()),b="clip-".concat(a||lt()),y={tag:"mask",attributes:J(J({},rr),{},{id:g,maskUnits:"userSpaceOnUse",maskContentUnits:"userSpaceOnUse"}),children:[f,m]},E={tag:"defs",children:[{tag:"clipPath",attributes:{id:b},children:(t=A,"g"===t.tag?t.children:[t])},y]};return e.push(E,{tag:"rect",attributes:J({fill:"currentColor","clip-path":"url(#".concat(b,")"),mask:"url(#".concat(g,")")},rr)}),{children:e,attributes:r}}}},sr={provides:function(n){var t=!1;yn.matchMedia&&(t=yn.matchMedia("(prefers-reduced-motion: reduce)").matches),n.missingIconAbstract=function(){var n=[],e={fill:"currentColor"},r={attributeType:"XML",repeatCount:"indefinite",dur:"2s"};n.push({tag:"path",attributes:J(J({},e),{},{d:"M156.5,447.7l-12.6,29.5c-18.7-9.5-35.9-21.2-51.5-34.9l22.7-22.7C127.6,430.5,141.5,440,156.5,447.7z M40.6,272H8.5 c1.4,21.2,5.4,41.7,11.7,61.1L50,321.2C45.1,305.5,41.8,289,40.6,272z M40.6,240c1.4-18.8,5.2-37,11.1-54.1l-29.5-12.6 C14.7,194.3,10,216.7,8.5,240H40.6z M64.3,156.5c7.8-14.9,17.2-28.8,28.1-41.5L69.7,92.3c-13.7,15.6-25.5,32.8-34.9,51.5 L64.3,156.5z M397,419.6c-13.9,12-29.4,22.3-46.1,30.4l11.9,29.8c20.7-9.9,39.8-22.6,56.9-37.6L397,419.6z M115,92.4 c13.9-12,29.4-22.3,46.1-30.4l-11.9-29.8c-20.7,9.9-39.8,22.6-56.8,37.6L115,92.4z M447.7,355.5c-7.8,14.9-17.2,28.8-28.1,41.5 l22.7,22.7c13.7-15.6,25.5-32.9,34.9-51.5L447.7,355.5z M471.4,272c-1.4,18.8-5.2,37-11.1,54.1l29.5,12.6 c7.5-21.1,12.2-43.5,13.6-66.8H471.4z M321.2,462c-15.7,5-32.2,8.2-49.2,9.4v32.1c21.2-1.4,41.7-5.4,61.1-11.7L321.2,462z M240,471.4c-18.8-1.4-37-5.2-54.1-11.1l-12.6,29.5c21.1,7.5,43.5,12.2,66.8,13.6V471.4z M462,190.8c5,15.7,8.2,32.2,9.4,49.2h32.1 c-1.4-21.2-5.4-41.7-11.7-61.1L462,190.8z M92.4,397c-12-13.9-22.3-29.4-30.4-46.1l-29.8,11.9c9.9,20.7,22.6,39.8,37.6,56.9 L92.4,397z M272,40.6c18.8,1.4,36.9,5.2,54.1,11.1l12.6-29.5C317.7,14.7,295.3,10,272,8.5V40.6z M190.8,50 c15.7-5,32.2-8.2,49.2-9.4V8.5c-21.2,1.4-41.7,5.4-61.1,11.7L190.8,50z M442.3,92.3L419.6,115c12,13.9,22.3,29.4,30.5,46.1 l29.8-11.9C470,128.5,457.3,109.4,442.3,92.3z M397,92.4l22.7-22.7c-15.6-13.7-32.8-25.5-51.5-34.9l-12.6,29.5 C370.4,72.1,384.4,81.5,397,92.4z"})});var i=J(J({},r),{},{attributeName:"opacity"}),o={tag:"circle",attributes:J(J({},e),{},{cx:"256",cy:"364",r:"28"}),children:[]};return t||o.children.push({tag:"animate",attributes:J(J({},r),{},{attributeName:"r",values:"28;14;28;28;14;28;"})},{tag:"animate",attributes:J(J({},i),{},{values:"1;0;1;1;0;1;"})}),n.push(o),n.push({tag:"path",attributes:J(J({},e),{},{opacity:"1",d:"M263.7,312h-16c-6.6,0-12-5.4-12-12c0-71,77.4-63.9,77.4-107.8c0-20-17.8-40.2-57.4-40.2c-29.1,0-44.3,9.6-59.2,28.7 c-3.9,5-11.1,6-16.2,2.4l-13.1-9.2c-5.6-3.9-6.9-11.8-2.6-17.2c21.2-27.2,46.4-44.7,91.2-44.7c52.3,0,97.4,29.8,97.4,80.2 c0,67.6-77.4,63.5-77.4,107.8C275.7,306.6,270.3,312,263.7,312z"}),children:t?[]:[{tag:"animate",attributes:J(J({},i),{},{values:"1;0;0;0;0;1;"})}]}),t||n.push({tag:"path",attributes:J(J({},e),{},{opacity:"0",d:"M232.5,134.5l7,168c0.3,6.4,5.6,11.5,12,11.5h9c6.4,0,11.7-5.1,12-11.5l7-168c0.3-6.8-5.2-12.5-12-12.5h-23 C237.7,122,232.2,127.7,232.5,134.5z"}),children:[{tag:"animate",attributes:J(J({},i),{},{values:"0;0;1;1;0;0;"})}]}),{tag:"g",attributes:{class:"missing"},children:n}}}};or={mixoutsTo:ue}.mixoutsTo,ne=[yt,We,qe,Ze,Xe,{hooks:function(){return{mutationObserverCallbacks:function(n){return n.pseudoElementsCallback=Qe,n}}},provides:function(n){n.pseudoElements2svg=function(n){var t=n.node,e=void 0===t?En:t;it.searchPseudoElements&&Qe(e)}}},{mixout:function(){return{dom:{unwatch:function(){Pe(),nr=!0}}}},hooks:function(){return{bootstrap:function(){ze(ie("mutationObserverCallbacks",{}))},noAuto:function(){Ne&&Ne.disconnect()},watch:function(n){var t=n.observeMutationsRoot;nr?Te():ze(ie("mutationObserverCallbacks",{observeMutationsRoot:t}))}}}},er,ar,sr,{hooks:function(){return{parseNodeAttributes:function(n,t){var e=t.getAttribute("data-fa-symbol"),r=null!==e&&(""===e||e);return n.symbol=r,n}}}}],te={},Object.keys(ee).forEach((function(n){-1===re.indexOf(n)&&delete ee[n]})),ne.forEach((function(n){var t=n.mixout?n.mixout():{};if(Object.keys(t).forEach((function(n){"function"==typeof t[n]&&(or[n]=t[n]),"object"===Q(t[n])&&Object.keys(t[n]).forEach((function(e){or[n]||(or[n]={}),or[n][e]=t[n][e]}))})),n.hooks){var e=n.hooks();Object.keys(e).forEach((function(n){te[n]||(te[n]=[]),te[n].push(e[n])}))}n.provides&&n.provides(ee)}));var cr=ue.parse,lr=ue.icon,ur=i(615),Ar=i.n(ur),dr=i(378);function fr(n,t){var e=Object.keys(n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(n);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(n,t).enumerable}))),e.push.apply(e,r)}return e}function pr(n){for(var t=1;t<arguments.length;t++){var e=null!=arguments[t]?arguments[t]:{};t%2?fr(Object(e),!0).forEach((function(t){mr(n,t,e[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(e)):fr(Object(e)).forEach((function(t){Object.defineProperty(n,t,Object.getOwnPropertyDescriptor(e,t))}))}return n}function hr(n){return hr="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(n){return typeof n}:function(n){return n&&"function"==typeof Symbol&&n.constructor===Symbol&&n!==Symbol.prototype?"symbol":typeof n},hr(n)}function mr(n,t,e){return t in n?Object.defineProperty(n,t,{value:e,enumerable:!0,configurable:!0,writable:!0}):n[t]=e,n}function gr(n){return function(n){if(Array.isArray(n))return br(n)}(n)||function(n){if("undefined"!=typeof Symbol&&null!=n[Symbol.iterator]||null!=n["@@iterator"])return Array.from(n)}(n)||function(n,t){if(n){if("string"==typeof n)return br(n,t);var e=Object.prototype.toString.call(n).slice(8,-1);return"Object"===e&&n.constructor&&(e=n.constructor.name),"Map"===e||"Set"===e?Array.from(n):"Arguments"===e||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(e)?br(n,t):void 0}}(n)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function br(n,t){(null==t||t>n.length)&&(t=n.length);for(var e=0,r=new Array(t);e<t;e++)r[e]=n[e];return r}function yr(n){return t=n,(t-=0)==t?n:(n=n.replace(/[\-_\s]+(.)?/g,(function(n,t){return t?t.toUpperCase():""}))).substr(0,1).toLowerCase()+n.substr(1);var t}var Er=["style"],Cr=!1;try{Cr=!0}catch(n){}function Br(n){return n&&"object"===hr(n)&&n.prefix&&n.iconName&&n.icon?n:cr.icon?cr.icon(n):null===n?null:n&&"object"===hr(n)&&n.prefix&&n.iconName?n:Array.isArray(n)&&2===n.length?{prefix:n[0],iconName:n[1]}:"string"==typeof n?{prefix:"fas",iconName:n}:void 0}function xr(n,t){return Array.isArray(t)&&t.length>0||!Array.isArray(t)&&t?mr({},n,t):{}}var vr=dr.forwardRef((function(n,t){var e=n.icon,r=n.mask,i=n.symbol,o=n.className,a=n.title,s=n.titleId,c=n.maskId,l=Br(e),u=xr("classes",[].concat(gr(function(n){var t,e=n.beat,r=n.fade,i=n.beatFade,o=n.bounce,a=n.shake,s=n.flash,c=n.spin,l=n.spinPulse,u=n.spinReverse,A=n.pulse,d=n.fixedWidth,f=n.inverse,p=n.border,h=n.listItem,m=n.flip,g=n.size,b=n.rotation,y=n.pull,E=(mr(t={"fa-beat":e,"fa-fade":r,"fa-beat-fade":i,"fa-bounce":o,"fa-shake":a,"fa-flash":s,"fa-spin":c,"fa-spin-reverse":u,"fa-spin-pulse":l,"fa-pulse":A,"fa-fw":d,"fa-inverse":f,"fa-border":p,"fa-li":h,"fa-flip":!0===m,"fa-flip-horizontal":"horizontal"===m||"both"===m,"fa-flip-vertical":"vertical"===m||"both"===m},"fa-".concat(g),null!=g),mr(t,"fa-rotate-".concat(b),null!=b&&0!==b),mr(t,"fa-pull-".concat(y),null!=y),mr(t,"fa-swap-opacity",n.swapOpacity),t);return Object.keys(E).map((function(n){return E[n]?n:null})).filter((function(n){return n}))}(n)),gr(o.split(" ")))),A=xr("transform","string"==typeof n.transform?cr.transform(n.transform):n.transform),d=xr("mask",Br(r)),f=lr(l,pr(pr(pr(pr({},u),A),d),{},{symbol:i,title:a,titleId:s,maskId:c}));if(!f)return function(){var n;!Cr&&console&&"function"==typeof console.error&&(n=console).error.apply(n,arguments)}("Could not find icon",l),null;var p=f.abstract,h={ref:t};return Object.keys(n).forEach((function(t){vr.defaultProps.hasOwnProperty(t)||(h[t]=n[t])})),wr(p[0],h)}));vr.displayName="FontAwesomeIcon",vr.propTypes={beat:Ar().bool,border:Ar().bool,beatFade:Ar().bool,bounce:Ar().bool,className:Ar().string,fade:Ar().bool,flash:Ar().bool,mask:Ar().oneOfType([Ar().object,Ar().array,Ar().string]),maskId:Ar().string,fixedWidth:Ar().bool,inverse:Ar().bool,flip:Ar().oneOf([!0,!1,"horizontal","vertical","both"]),icon:Ar().oneOfType([Ar().object,Ar().array,Ar().string]),listItem:Ar().bool,pull:Ar().oneOf(["right","left"]),pulse:Ar().bool,rotation:Ar().oneOf([0,90,180,270]),shake:Ar().bool,size:Ar().oneOf(["2xs","xs","sm","lg","xl","2xl","1x","2x","3x","4x","5x","6x","7x","8x","9x","10x"]),spin:Ar().bool,spinPulse:Ar().bool,spinReverse:Ar().bool,symbol:Ar().oneOfType([Ar().bool,Ar().string]),title:Ar().string,titleId:Ar().string,transform:Ar().oneOfType([Ar().string,Ar().object]),swapOpacity:Ar().bool},vr.defaultProps={border:!1,className:"",mask:null,maskId:null,fixedWidth:!1,inverse:!1,flip:!1,icon:null,listItem:!1,pull:null,pulse:!1,rotation:null,size:null,spin:!1,spinPulse:!1,spinReverse:!1,beat:!1,fade:!1,beatFade:!1,bounce:!1,shake:!1,symbol:!1,title:"",titleId:null,transform:null,swapOpacity:!1};var wr=function n(t,e){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};if("string"==typeof e)return e;var i=(e.children||[]).map((function(e){return n(t,e)})),o=Object.keys(e.attributes||{}).reduce((function(n,t){var r=e.attributes[t];switch(t){case"class":n.attrs.className=r,delete e.attributes.class;break;case"style":n.attrs.style=r.split(";").map((function(n){return n.trim()})).filter((function(n){return n})).reduce((function(n,t){var e,r=t.indexOf(":"),i=yr(t.slice(0,r)),o=t.slice(r+1).trim();return i.startsWith("webkit")?n[(e=i,e.charAt(0).toUpperCase()+e.slice(1))]=o:n[i]=o,n}),{});break;default:0===t.indexOf("aria-")||0===t.indexOf("data-")?n.attrs[t.toLowerCase()]=r:n.attrs[yr(t)]=r}return n}),{attrs:{}}),a=r.style,s=void 0===a?{}:a,c=function(n,t){if(null==n)return{};var e,r,i=function(n,t){if(null==n)return{};var e,r,i={},o=Object.keys(n);for(r=0;r<o.length;r++)e=o[r],t.indexOf(e)>=0||(i[e]=n[e]);return i}(n,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(n);for(r=0;r<o.length;r++)e=o[r],t.indexOf(e)>=0||Object.prototype.propertyIsEnumerable.call(n,e)&&(i[e]=n[e])}return i}(r,Er);return o.attrs.style=pr(pr({},o.attrs.style),s),t.apply(void 0,[e.tag,pr(pr({},o.attrs),c)].concat(gr(i)))}.bind(null,dr.createElement);i(823);const kr="4.26.0";let _r,Sr,Or,jr,Ir,Rr,Pr,Tr,Nr,zr=!1,Yr=null,Lr=null,Ur=null,Mr=null;class Fr{constructor(n){this.body=n}get[Symbol.toStringTag](){return"MultipartBody"}}_r||function(n,t={auto:!1}){if(zr)throw new Error(`you must \`import 'openai/shims/${n.kind}'\` before importing anything else from openai`);if(_r)throw new Error(`can't \`import 'openai/shims/${n.kind}'\` after \`import 'openai/shims/${_r}'\``);zr=t.auto,_r=n.kind,Sr=n.fetch,Yr=n.Request,Lr=n.Response,Ur=n.Headers,Or=n.FormData,Mr=n.Blob,jr=n.File,Ir=n.ReadableStream,Rr=n.getMultipartRequestOptions,Pr=n.getDefaultAgent,Tr=n.fileFromPath,Nr=n.isFsReadStream}(function({manuallyImported:n}={}){const t=n?"You may need to use polyfills":"Add one of these imports before your first `import … from 'openai'`:\n- `import 'openai/shims/node'` (if you're running on Node)\n- `import 'openai/shims/web'` (otherwise)\n";let e,r,i,o;try{e=fetch,r=Request,i=Response,o=Headers}catch(n){throw new Error(`this environment is missing the following Web Fetch API type: ${n.message}. ${t}`)}return{kind:"web",fetch:e,Request:r,Response:i,Headers:o,FormData:"undefined"!=typeof FormData?FormData:class{constructor(){throw new Error(`file uploads aren't supported in this environment yet as 'FormData' is undefined. ${t}`)}},Blob:"undefined"!=typeof Blob?Blob:class{constructor(){throw new Error(`file uploads aren't supported in this environment yet as 'Blob' is undefined. ${t}`)}},File:"undefined"!=typeof File?File:class{constructor(){throw new Error(`file uploads aren't supported in this environment yet as 'File' is undefined. ${t}`)}},ReadableStream:"undefined"!=typeof ReadableStream?ReadableStream:class{constructor(){throw new Error(`streaming isn't supported in this environment yet as 'ReadableStream' is undefined. ${t}`)}},getMultipartRequestOptions:async(n,t)=>({...t,body:new Fr(n)}),getDefaultAgent:n=>{},fileFromPath:()=>{throw new Error("The `fileFromPath` function is only supported in Node. See the README for more details: https://www.github.com/openai/openai-node#file-uploads")},isFsReadStream:n=>!1}}(),{auto:!0});class Dr extends Error{}class $r extends Dr{constructor(n,t,e,r){super(`${$r.makeMessage(n,t,e)}`),this.status=n,this.headers=r;const i=t;this.error=i,this.code=i?.code,this.param=i?.param,this.type=i?.type}static makeMessage(n,t,e){const r=t?.message?"string"==typeof t.message?t.message:JSON.stringify(t.message):t?JSON.stringify(t):e;return n&&r?`${n} ${r}`:n?`${n} status code (no body)`:r||"(no status code or body)"}static generate(n,t,e,r){if(!n)return new qr({cause:Ri(t)});const i=t?.error;return 400===n?new Xr(n,i,e,r):401===n?new Vr(n,i,e,r):403===n?new Hr(n,i,e,r):404===n?new Kr(n,i,e,r):409===n?new Gr(n,i,e,r):422===n?new Jr(n,i,e,r):429===n?new Qr(n,i,e,r):n>=500?new ni(n,i,e,r):new $r(n,i,e,r)}}class Wr extends $r{constructor({message:n}={}){super(void 0,void 0,n||"Request was aborted.",void 0),this.status=void 0}}class qr extends $r{constructor({message:n,cause:t}){super(void 0,void 0,n||"Connection error.",void 0),this.status=void 0,t&&(this.cause=t)}}class Zr extends qr{constructor({message:n}={}){super({message:n??"Request timed out."})}}class Xr extends $r{constructor(){super(...arguments),this.status=400}}class Vr extends $r{constructor(){super(...arguments),this.status=401}}class Hr extends $r{constructor(){super(...arguments),this.status=403}}class Kr extends $r{constructor(){super(...arguments),this.status=404}}class Gr extends $r{constructor(){super(...arguments),this.status=409}}class Jr extends $r{constructor(){super(...arguments),this.status=422}}class Qr extends $r{constructor(){super(...arguments),this.status=429}}class ni extends $r{}class ti{constructor(n,t){this.iterator=n,this.controller=t}static fromSSEResponse(n,t){let e=!1;const r=new ei;return new ti((async function*(){if(e)throw new Error("Cannot iterate over a consumed stream, use `.tee()` to split the stream.");e=!0;let i=!1;try{for await(const e of async function*(){if(!n.body)throw t.abort(),new Dr("Attempted to iterate over a response with no body");const e=new ri,i=ii(n.body);for await(const n of i)for(const t of e.decode(n)){const n=r.decode(t);n&&(yield n)}for(const n of e.flush()){const t=r.decode(n);t&&(yield t)}}())if(!i)if(e.data.startsWith("[DONE]"))i=!0;else if(null===e.event){let n;try{n=JSON.parse(e.data)}catch(n){throw console.error("Could not parse message into JSON:",e.data),console.error("From chunk:",e.raw),n}if(n&&n.error)throw new $r(void 0,n.error,void 0,void 0);yield n}i=!0}catch(n){if(n instanceof Error&&"AbortError"===n.name)return;throw n}finally{i||t.abort()}}),t)}static fromReadableStream(n,t){let e=!1;return new ti((async function*(){if(e)throw new Error("Cannot iterate over a consumed stream, use `.tee()` to split the stream.");e=!0;let r=!1;try{for await(const t of async function*(){const t=new ri,e=ii(n);for await(const n of e)for(const e of t.decode(n))yield e;for(const n of t.flush())yield n}())r||t&&(yield JSON.parse(t));r=!0}catch(n){if(n instanceof Error&&"AbortError"===n.name)return;throw n}finally{r||t.abort()}}),t)}[Symbol.asyncIterator](){return this.iterator()}tee(){const n=[],t=[],e=this.iterator(),r=r=>({next:()=>{if(0===r.length){const r=e.next();n.push(r),t.push(r)}return r.shift()}});return[new ti((()=>r(n)),this.controller),new ti((()=>r(t)),this.controller)]}toReadableStream(){const n=this;let t;const e=new TextEncoder;return new Ir({async start(){t=n[Symbol.asyncIterator]()},async pull(n){try{const{value:r,done:i}=await t.next();if(i)return n.close();const o=e.encode(JSON.stringify(r)+"\n");n.enqueue(o)}catch(t){n.error(t)}},async cancel(){await(t.return?.())}})}}class ei{constructor(){this.event=null,this.data=[],this.chunks=[]}decode(n){if(n.endsWith("\r")&&(n=n.substring(0,n.length-1)),!n){if(!this.event&&!this.data.length)return null;const n={event:this.event,data:this.data.join("\n"),raw:this.chunks};return this.event=null,this.data=[],this.chunks=[],n}if(this.chunks.push(n),n.startsWith(":"))return null;let[t,e,r]=function(n,t){const e=n.indexOf(":");return-1!==e?[n.substring(0,e),":",n.substring(e+1)]:[n,"",""]}(n);return r.startsWith(" ")&&(r=r.substring(1)),"event"===t?this.event=r:"data"===t&&this.data.push(r),null}}class ri{constructor(){this.buffer=[],this.trailingCR=!1}decode(n){let t=this.decodeText(n);if(this.trailingCR&&(t="\r"+t,this.trailingCR=!1),t.endsWith("\r")&&(this.trailingCR=!0,t=t.slice(0,-1)),!t)return[];const e=ri.NEWLINE_CHARS.has(t[t.length-1]||"");let r=t.split(ri.NEWLINE_REGEXP);return 1!==r.length||e?(this.buffer.length>0&&(r=[this.buffer.join("")+r[0],...r.slice(1)],this.buffer=[]),e||(this.buffer=[r.pop()||""]),r):(this.buffer.push(r[0]),[])}decodeText(n){if(null==n)return"";if("string"==typeof n)return n;if("undefined"!=typeof Buffer){if(n instanceof Buffer)return n.toString();if(n instanceof Uint8Array)return Buffer.from(n).toString();throw new Dr(`Unexpected: received non-Uint8Array (${n.constructor.name}) stream chunk in an environment with a global "Buffer" defined, which this library assumes to be Node. Please report this error.`)}if("undefined"!=typeof TextDecoder){if(n instanceof Uint8Array||n instanceof ArrayBuffer)return this.textDecoder??(this.textDecoder=new TextDecoder("utf8")),this.textDecoder.decode(n);throw new Dr(`Unexpected: received non-Uint8Array/ArrayBuffer (${n.constructor.name}) in a web platform. Please report this error.`)}throw new Dr("Unexpected: neither Buffer nor TextDecoder are available as globals. Please report this error.")}flush(){if(!this.buffer.length&&!this.trailingCR)return[];const n=[this.buffer.join("")];return this.buffer=[],this.trailingCR=!1,n}}function ii(n){if(n[Symbol.asyncIterator])return n;const t=n.getReader();return{async next(){try{const n=await t.read();return n?.done&&t.releaseLock(),n}catch(n){throw t.releaseLock(),n}},async return(){const n=t.cancel();return t.releaseLock(),await n,{done:!0,value:void 0}},[Symbol.asyncIterator](){return this}}}ri.NEWLINE_CHARS=new Set(["\n","\r","\v","\f","","","","","\u2028","\u2029"]),ri.NEWLINE_REGEXP=/\r\n|[\n\r\x0b\x0c\x1c\x1d\x1e\x85\u2028\u2029]/g;const oi=n=>null!=n&&"object"==typeof n&&"string"==typeof n.url&&"function"==typeof n.blob,ai=n=>null!=n&&"object"==typeof n&&"number"==typeof n.size&&"string"==typeof n.type&&"function"==typeof n.text&&"function"==typeof n.slice&&"function"==typeof n.arrayBuffer;async function si(n,t,e={}){if(n=await n,oi(n)){const r=await n.blob();return t||(t=new URL(n.url).pathname.split(/[\\/]/).pop()??"unknown_file"),new jr([r],t,e)}const r=await async function(n){let t=[];if("string"==typeof n||ArrayBuffer.isView(n)||n instanceof ArrayBuffer)t.push(n);else if(ai(n))t.push(await n.arrayBuffer());else{if(!li(n))throw new Error(`Unexpected data type: ${typeof n}; constructor: ${n?.constructor?.name}; props: ${function(n){return`[${Object.getOwnPropertyNames(n).map((n=>`"${n}"`)).join(", ")}]`}(n)}`);for await(const e of n)t.push(e)}return t}(n);if(t||(t=function(n){return ci(n.name)||ci(n.filename)||ci(n.path)?.split(/[\\/]/).pop()}(n)??"unknown_file"),!e.type){const n=r[0]?.type;"string"==typeof n&&(e={...e,type:n})}return new jr(r,t,e)}const ci=n=>"string"==typeof n?n:"undefined"!=typeof Buffer&&n instanceof Buffer?String(n):void 0,li=n=>null!=n&&"object"==typeof n&&"function"==typeof n[Symbol.asyncIterator],ui=n=>n&&"object"==typeof n&&n.body&&"MultipartBody"===n[Symbol.toStringTag],Ai=async n=>{const t=await di(n.body);return Rr(t,n)},di=async n=>{const t=new Or;return await Promise.all(Object.entries(n||{}).map((([n,e])=>fi(t,n,e)))),t},fi=async(n,t,e)=>{if(void 0!==e){if(null==e)throw new TypeError(`Received null for "${t}"; to pass null in FormData, you must use the string 'null'`);if("string"==typeof e||"number"==typeof e||"boolean"==typeof e)n.append(t,String(e));else if((n=>(n=>null!=n&&"object"==typeof n&&"string"==typeof n.name&&"number"==typeof n.lastModified&&ai(n))(n)||oi(n)||Nr(n))(e)){const r=await si(e);n.append(t,r)}else if(Array.isArray(e))await Promise.all(e.map((e=>fi(n,t+"[]",e))));else{if("object"!=typeof e)throw new TypeError(`Invalid value given to form, expected a string, number, boolean, object, Array, File or Blob but got ${e} instead`);await Promise.all(Object.entries(e).map((([e,r])=>fi(n,`${t}[${e}]`,r))))}}};var pi;async function hi(n){const{response:t}=n;if(n.options.stream)return Yi("response",t.status,t.url,t.headers,t.body),n.options.__streamClass?n.options.__streamClass.fromSSEResponse(t,n.controller):ti.fromSSEResponse(t,n.controller);if(204===t.status)return null;if(n.options.__binaryResponse)return t;const e=t.headers.get("content-type");if(e?.includes("application/json")){const n=await t.json();return Yi("response",t.status,t.url,t.headers,n),n}const r=await t.text();return Yi("response",t.status,t.url,t.headers,r),r}class mi extends Promise{constructor(n,t=hi){super((n=>{n(null)})),this.responsePromise=n,this.parseResponse=t}_thenUnwrap(n){return new mi(this.responsePromise,(async t=>n(await this.parseResponse(t))))}asResponse(){return this.responsePromise.then((n=>n.response))}async withResponse(){const[n,t]=await Promise.all([this.parse(),this.asResponse()]);return{data:n,response:t}}parse(){return this.parsedPromise||(this.parsedPromise=this.responsePromise.then(this.parseResponse)),this.parsedPromise}then(n,t){return this.parse().then(n,t)}catch(n){return this.parse().catch(n)}finally(n){return this.parse().finally(n)}}class gi{constructor({baseURL:n,maxRetries:t=2,timeout:e=6e5,httpAgent:r,fetch:i}){this.baseURL=n,this.maxRetries=Ii("maxRetries",t),this.timeout=Ii("timeout",e),this.httpAgent=r,this.fetch=i??Sr}authHeaders(n){return{}}defaultHeaders(n){return{Accept:"application/json","Content-Type":"application/json","User-Agent":this.getUserAgent(),...ki(),...this.authHeaders(n)}}validateHeaders(n,t){}defaultIdempotencyKey(){return`stainless-node-retry-${Li()}`}get(n,t){return this.methodRequest("get",n,t)}post(n,t){return this.methodRequest("post",n,t)}patch(n,t){return this.methodRequest("patch",n,t)}put(n,t){return this.methodRequest("put",n,t)}delete(n,t){return this.methodRequest("delete",n,t)}methodRequest(n,t,e){return this.request(Promise.resolve(e).then((e=>({method:n,path:t,...e}))))}getAPIList(n,t,e){return this.requestAPIList(t,{method:"get",path:n,...e})}calculateContentLength(n){if("string"==typeof n){if("undefined"!=typeof Buffer)return Buffer.byteLength(n,"utf8").toString();if("undefined"!=typeof TextEncoder)return(new TextEncoder).encode(n).length.toString()}return null}buildRequest(n){const{method:t,path:e,query:r,headers:i={}}=n,o=ui(n.body)?n.body.body:n.body?JSON.stringify(n.body,null,2):null,a=this.calculateContentLength(o),s=this.buildURL(e,r);"timeout"in n&&Ii("timeout",n.timeout);const c=n.timeout??this.timeout,l=n.httpAgent??this.httpAgent??Pr(s),u=c+1e3;return"number"==typeof l?.options?.timeout&&u>(l.options.timeout??0)&&(l.options.timeout=u),this.idempotencyHeader&&"get"!==t&&(n.idempotencyKey||(n.idempotencyKey=this.defaultIdempotencyKey()),i[this.idempotencyHeader]=n.idempotencyKey),{req:{method:t,...o&&{body:o},headers:this.buildHeaders({options:n,headers:i,contentLength:a}),...l&&{agent:l},signal:n.signal??null},url:s,timeout:c}}buildHeaders({options:n,headers:t,contentLength:e}){const r={};return e&&(r["content-length"]=e),zi(r,this.defaultHeaders(n)),zi(r,t),ui(n.body)&&"node"!==_r&&delete r["content-type"],this.validateHeaders(r,t),r}async prepareOptions(n){}async prepareRequest(n,{url:t,options:e}){}parseHeaders(n){return n?Symbol.iterator in n?Object.fromEntries(Array.from(n).map((n=>[...n]))):{...n}:{}}makeStatusError(n,t,e,r){return $r.generate(n,t,e,r)}request(n,t=null){return new mi(this.makeRequest(n,t))}async makeRequest(n,t){const e=await n;null==t&&(t=e.maxRetries??this.maxRetries),await this.prepareOptions(e);const{req:r,url:i,timeout:o}=this.buildRequest(e);if(await this.prepareRequest(r,{url:i,options:e}),Yi("request",i,e,r.headers),e.signal?.aborted)throw new Wr;const a=new AbortController,s=await this.fetchWithTimeout(i,r,o,a).catch(Ri);if(s instanceof Error){if(e.signal?.aborted)throw new Wr;if(t)return this.retryRequest(e,t);if("AbortError"===s.name)throw new Zr;throw new qr({cause:s})}const c=Ei(s.headers);if(!s.ok){if(t&&this.shouldRetry(s))return Yi(`response (error; retrying, ${t} attempts remaining)`,s.status,i,c),this.retryRequest(e,t,c);const n=await s.text().catch((n=>Ri(n).message)),r=_i(n),o=r?void 0:n;throw Yi(`response (error; ${t?"(error; no more retries left)":"(error; not retryable)"})`,s.status,i,c,o),this.makeStatusError(s.status,r,o,c)}return{response:s,options:e,controller:a}}requestAPIList(n,t){const e=this.makeRequest(t,null);return new yi(this,e,n)}buildURL(n,t){const e=Oi(n)?new URL(n):new URL(this.baseURL+(this.baseURL.endsWith("/")&&n.startsWith("/")?n.slice(1):n)),r=this.defaultQuery();return Ti(r)||(t={...r,...t}),"object"==typeof t&&t&&!Array.isArray(t)&&(e.search=this.stringifyQuery(t)),e.toString()}stringifyQuery(n){return Object.entries(n).filter((([n,t])=>void 0!==t)).map((([n,t])=>{if("string"==typeof t||"number"==typeof t||"boolean"==typeof t)return`${encodeURIComponent(n)}=${encodeURIComponent(t)}`;if(null===t)return`${encodeURIComponent(n)}=`;throw new Dr(`Cannot stringify type ${typeof t}; Expected string, number, boolean, or null. If you need to pass nested query parameters, you can manually encode them, e.g. { query: { 'foo[key1]': value1, 'foo[key2]': value2 } }, and please open a GitHub issue requesting better support for your use case.`)})).join("&")}async fetchWithTimeout(n,t,e,r){const{signal:i,...o}=t||{};i&&i.addEventListener("abort",(()=>r.abort()));const a=setTimeout((()=>r.abort()),e);return this.getRequestClient().fetch.call(void 0,n,{signal:r.signal,...o}).finally((()=>{clearTimeout(a)}))}getRequestClient(){return{fetch:this.fetch}}shouldRetry(n){const t=n.headers.get("x-should-retry");return"true"===t||"false"!==t&&(408===n.status||409===n.status||429===n.status||n.status>=500)}async retryRequest(n,t,e){let r;const i=e?.["retry-after-ms"];if(i){const n=parseFloat(i);Number.isNaN(n)||(r=n)}const o=e?.["retry-after"];if(o&&!r){const n=parseFloat(o);r=Number.isNaN(n)?Date.parse(o)-Date.now():1e3*n}if(!(r&&0<=r&&r<6e4)){const e=n.maxRetries??this.maxRetries;r=this.calculateDefaultRetryTimeoutMillis(t,e)}return await ji(r),this.makeRequest(n,t-1)}calculateDefaultRetryTimeoutMillis(n,t){const e=t-n;return Math.min(.5*Math.pow(2,e),8)*(1-.25*Math.random())*1e3}getUserAgent(){return`${this.constructor.name}/JS ${kr}`}}class bi{constructor(n,t,e,r){pi.set(this,void 0),function(n,t,e,r,i){if("m"===r)throw new TypeError("Private method is not writable");if("a"===r&&!i)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof t?n!==t||!i:!t.has(n))throw new TypeError("Cannot write private member to an object whose class did not declare it");"a"===r?i.call(n,e):i?i.value=e:t.set(n,e)}(this,pi,n,"f"),this.options=r,this.response=t,this.body=e}hasNextPage(){return!!this.getPaginatedItems().length&&null!=this.nextPageInfo()}async getNextPage(){const n=this.nextPageInfo();if(!n)throw new Dr("No next page expected; please check `.hasNextPage()` before calling `.getNextPage()`.");const t={...this.options};if("params"in n&&"object"==typeof t.query)t.query={...t.query,...n.params};else if("url"in n){const e=[...Object.entries(t.query||{}),...n.url.searchParams.entries()];for(const[t,r]of e)n.url.searchParams.set(t,r);t.query=void 0,t.path=n.url.toString()}return await function(n,t,e,r){if("a"===e&&!r)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof t?n!==t||!r:!t.has(n))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===e?r:"a"===e?r.call(n):r?r.value:t.get(n)}(this,pi,"f").requestAPIList(this.constructor,t)}async*iterPages(){let n=this;for(yield n;n.hasNextPage();)n=await n.getNextPage(),yield n}async*[(pi=new WeakMap,Symbol.asyncIterator)](){for await(const n of this.iterPages())for(const t of n.getPaginatedItems())yield t}}class yi extends mi{constructor(n,t,e){super(t,(async t=>new e(n,t.response,await hi(t),t.options)))}async*[Symbol.asyncIterator](){const n=await(this);for await(const t of n)yield t}}const Ei=n=>new Proxy(Object.fromEntries(n.entries()),{get(n,t){const e=t.toString();return n[e.toLowerCase()]||n[e]}}),Ci={method:!0,path:!0,query:!0,body:!0,headers:!0,maxRetries:!0,stream:!0,timeout:!0,httpAgent:!0,signal:!0,idempotencyKey:!0,__binaryResponse:!0,__streamClass:!0},Bi=n=>"object"==typeof n&&null!==n&&!Ti(n)&&Object.keys(n).every((n=>Ni(Ci,n))),xi=n=>"x32"===n?"x32":"x86_64"===n||"x64"===n?"x64":"arm"===n?"arm":"aarch64"===n||"arm64"===n?"arm64":n?`other:${n}`:"unknown",vi=n=>(n=n.toLowerCase()).includes("ios")?"iOS":"android"===n?"Android":"darwin"===n?"MacOS":"win32"===n?"Windows":"freebsd"===n?"FreeBSD":"openbsd"===n?"OpenBSD":"linux"===n?"Linux":n?`Other:${n}`:"Unknown";let wi;const ki=()=>wi??(wi=(()=>{if("undefined"!=typeof Deno&&null!=Deno.build)return{"X-Stainless-Lang":"js","X-Stainless-Package-Version":kr,"X-Stainless-OS":vi(Deno.build.os),"X-Stainless-Arch":xi(Deno.build.arch),"X-Stainless-Runtime":"deno","X-Stainless-Runtime-Version":Deno.version};if("undefined"!=typeof EdgeRuntime)return{"X-Stainless-Lang":"js","X-Stainless-Package-Version":kr,"X-Stainless-OS":"Unknown","X-Stainless-Arch":`other:${EdgeRuntime}`,"X-Stainless-Runtime":"edge","X-Stainless-Runtime-Version":process.version};if("[object process]"===Object.prototype.toString.call("undefined"!=typeof process?process:0))return{"X-Stainless-Lang":"js","X-Stainless-Package-Version":kr,"X-Stainless-OS":vi(process.platform),"X-Stainless-Arch":xi(process.arch),"X-Stainless-Runtime":"node","X-Stainless-Runtime-Version":process.version};const n=function(){if("undefined"==typeof navigator||!navigator)return null;const n=[{key:"edge",pattern:/Edge(?:\W+(\d+)\.(\d+)(?:\.(\d+))?)?/},{key:"ie",pattern:/MSIE(?:\W+(\d+)\.(\d+)(?:\.(\d+))?)?/},{key:"ie",pattern:/Trident(?:.*rv\:(\d+)\.(\d+)(?:\.(\d+))?)?/},{key:"chrome",pattern:/Chrome(?:\W+(\d+)\.(\d+)(?:\.(\d+))?)?/},{key:"firefox",pattern:/Firefox(?:\W+(\d+)\.(\d+)(?:\.(\d+))?)?/},{key:"safari",pattern:/(?:Version\W+(\d+)\.(\d+)(?:\.(\d+))?)?(?:\W+Mobile\S*)?\W+Safari/}];for(const{key:t,pattern:e}of n){const n=e.exec(navigator.userAgent);if(n)return{browser:t,version:`${n[1]||0}.${n[2]||0}.${n[3]||0}`}}return null}();return n?{"X-Stainless-Lang":"js","X-Stainless-Package-Version":kr,"X-Stainless-OS":"Unknown","X-Stainless-Arch":"unknown","X-Stainless-Runtime":`browser:${n.browser}`,"X-Stainless-Runtime-Version":n.version}:{"X-Stainless-Lang":"js","X-Stainless-Package-Version":kr,"X-Stainless-OS":"Unknown","X-Stainless-Arch":"unknown","X-Stainless-Runtime":"unknown","X-Stainless-Runtime-Version":"unknown"}})()),_i=n=>{try{return JSON.parse(n)}catch(n){return}},Si=new RegExp("^(?:[a-z]+:)?//","i"),Oi=n=>Si.test(n),ji=n=>new Promise((t=>setTimeout(t,n))),Ii=(n,t)=>{if("number"!=typeof t||!Number.isInteger(t))throw new Dr(`${n} must be an integer`);if(t<0)throw new Dr(`${n} must be a positive integer`);return t},Ri=n=>n instanceof Error?n:new Error(n),Pi=n=>"undefined"!=typeof process?process.env?.[n]?.trim()??void 0:"undefined"!=typeof Deno?Deno.env?.get?.(n)?.trim():void 0;function Ti(n){if(!n)return!0;for(const t in n)return!1;return!0}function Ni(n,t){return Object.prototype.hasOwnProperty.call(n,t)}function zi(n,t){for(const e in t){if(!Ni(t,e))continue;const r=e.toLowerCase();if(!r)continue;const i=t[e];null===i?delete n[r]:void 0!==i&&(n[r]=i)}}function Yi(n,...t){"undefined"!=typeof process&&"true"===process.env.DEBUG&&console.log(`OpenAI:DEBUG:${n}`,...t)}const Li=()=>"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,(n=>{const t=16*Math.random()|0;return("x"===n?t:3&t|8).toString(16)}));class Ui extends bi{constructor(n,t,e,r){super(n,t,e,r),this.data=e.data||[],this.object=e.object}getPaginatedItems(){return this.data??[]}nextPageParams(){return null}nextPageInfo(){return null}}class Mi extends bi{constructor(n,t,e,r){super(n,t,e,r),this.data=e.data||[]}getPaginatedItems(){return this.data??[]}nextPageParams(){const n=this.nextPageInfo();if(!n)return null;if("params"in n)return n.params;const t=Object.fromEntries(n.url.searchParams);return Object.keys(t).length?t:null}nextPageInfo(){const n=this.getPaginatedItems();if(!n.length)return null;const t=n[n.length-1]?.id;return t?{params:{after:t}}:null}}class Fi{constructor(n){this._client=n}}class Di extends Fi{create(n,t){return this._client.post("/completions",{body:n,...t,stream:n.stream??!1})}}Di||(Di={});class $i extends Fi{create(n,t){return this._client.post("/chat/completions",{body:n,...t,stream:n.stream??!1})}}$i||($i={});class Wi extends Fi{constructor(){super(...arguments),this.completions=new $i(this._client)}}!function(n){n.Completions=$i}(Wi||(Wi={}));class qi extends Fi{create(n,t){return this._client.post("/embeddings",{body:n,...t})}}qi||(qi={});class Zi extends Fi{create(n,t){return this._client.post("/files",Ai({body:n,...t}))}retrieve(n,t){return this._client.get(`/files/${n}`,t)}list(n={},t){return Bi(n)?this.list({},n):this._client.getAPIList("/files",Xi,{query:n,...t})}del(n,t){return this._client.delete(`/files/${n}`,t)}content(n,t){return this._client.get(`/files/${n}/content`,{...t,__binaryResponse:!0})}retrieveContent(n,t){return this._client.get(`/files/${n}/content`,{...t,headers:{Accept:"application/json",...t?.headers}})}async waitForProcessing(n,{pollInterval:t=5e3,maxWait:e=18e5}={}){const r=new Set(["processed","error","deleted"]),i=Date.now();let o=await this.retrieve(n);for(;!o.status||!r.has(o.status);)if(await ji(t),o=await this.retrieve(n),Date.now()-i>e)throw new Zr({message:`Giving up on waiting for file ${n} to finish processing after ${e} milliseconds.`});return o}}class Xi extends Ui{}!function(n){n.FileObjectsPage=Xi}(Zi||(Zi={}));class Vi extends Fi{createVariation(n,t){return this._client.post("/images/variations",Ai({body:n,...t}))}edit(n,t){return this._client.post("/images/edits",Ai({body:n,...t}))}generate(n,t){return this._client.post("/images/generations",{body:n,...t})}}Vi||(Vi={});class Hi extends Fi{create(n,t){return this._client.post("/audio/speech",{body:n,...t,__binaryResponse:!0})}}Hi||(Hi={});class Ki extends Fi{create(n,t){return this._client.post("/audio/transcriptions",Ai({body:n,...t}))}}Ki||(Ki={});class Gi extends Fi{create(n,t){return this._client.post("/audio/translations",Ai({body:n,...t}))}}Gi||(Gi={});class Ji extends Fi{constructor(){super(...arguments),this.transcriptions=new Ki(this._client),this.translations=new Gi(this._client),this.speech=new Hi(this._client)}}!function(n){n.Transcriptions=Ki,n.Translations=Gi,n.Speech=Hi}(Ji||(Ji={}));class Qi extends Fi{create(n,t){return this._client.post("/moderations",{body:n,...t})}}Qi||(Qi={});class no extends Fi{retrieve(n,t){return this._client.get(`/models/${n}`,t)}list(n){return this._client.getAPIList("/models",to,n)}del(n,t){return this._client.delete(`/models/${n}`,t)}}class to extends Ui{}!function(n){n.ModelsPage=to}(no||(no={}));class eo extends Fi{create(n,t){return this._client.post("/fine_tuning/jobs",{body:n,...t})}retrieve(n,t){return this._client.get(`/fine_tuning/jobs/${n}`,t)}list(n={},t){return Bi(n)?this.list({},n):this._client.getAPIList("/fine_tuning/jobs",ro,{query:n,...t})}cancel(n,t){return this._client.post(`/fine_tuning/jobs/${n}/cancel`,t)}listEvents(n,t={},e){return Bi(t)?this.listEvents(n,{},t):this._client.getAPIList(`/fine_tuning/jobs/${n}/events`,io,{query:t,...e})}}class ro extends Mi{}class io extends Mi{}!function(n){n.FineTuningJobsPage=ro,n.FineTuningJobEventsPage=io}(eo||(eo={}));class oo extends Fi{constructor(){super(...arguments),this.jobs=new eo(this._client)}}!function(n){n.Jobs=eo,n.FineTuningJobsPage=ro,n.FineTuningJobEventsPage=io}(oo||(oo={}));class ao extends Fi{create(n,t,e){return this._client.post(`/assistants/${n}/files`,{body:t,...e,headers:{"OpenAI-Beta":"assistants=v1",...e?.headers}})}retrieve(n,t,e){return this._client.get(`/assistants/${n}/files/${t}`,{...e,headers:{"OpenAI-Beta":"assistants=v1",...e?.headers}})}list(n,t={},e){return Bi(t)?this.list(n,{},t):this._client.getAPIList(`/assistants/${n}/files`,so,{query:t,...e,headers:{"OpenAI-Beta":"assistants=v1",...e?.headers}})}del(n,t,e){return this._client.delete(`/assistants/${n}/files/${t}`,{...e,headers:{"OpenAI-Beta":"assistants=v1",...e?.headers}})}}class so extends Mi{}!function(n){n.AssistantFilesPage=so}(ao||(ao={}));class co extends Fi{constructor(){super(...arguments),this.files=new ao(this._client)}create(n,t){return this._client.post("/assistants",{body:n,...t,headers:{"OpenAI-Beta":"assistants=v1",...t?.headers}})}retrieve(n,t){return this._client.get(`/assistants/${n}`,{...t,headers:{"OpenAI-Beta":"assistants=v1",...t?.headers}})}update(n,t,e){return this._client.post(`/assistants/${n}`,{body:t,...e,headers:{"OpenAI-Beta":"assistants=v1",...e?.headers}})}list(n={},t){return Bi(n)?this.list({},n):this._client.getAPIList("/assistants",lo,{query:n,...t,headers:{"OpenAI-Beta":"assistants=v1",...t?.headers}})}del(n,t){return this._client.delete(`/assistants/${n}`,{...t,headers:{"OpenAI-Beta":"assistants=v1",...t?.headers}})}}class lo extends Mi{}function uo(n){return"function"==typeof n.parse}!function(n){n.AssistantsPage=lo,n.Files=ao,n.AssistantFilesPage=so}(co||(co={}));const Ao=n=>"assistant"===n?.role,fo=n=>"function"===n?.role,po=n=>"tool"===n?.role;var ho,mo,go,bo,yo,Eo,Co,Bo,xo,vo,wo,ko,_o,So,Oo,jo,Io,Ro,Po,To,No=function(n,t,e,r,i){if("m"===r)throw new TypeError("Private method is not writable");if("a"===r&&!i)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof t?n!==t||!i:!t.has(n))throw new TypeError("Cannot write private member to an object whose class did not declare it");return"a"===r?i.call(n,e):i?i.value=e:t.set(n,e),e},zo=function(n,t,e,r){if("a"===e&&!r)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof t?n!==t||!r:!t.has(n))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===e?r:"a"===e?r.call(n):r?r.value:t.get(n)};const Yo=10;class Lo{constructor(){ho.add(this),this.controller=new AbortController,mo.set(this,void 0),go.set(this,(()=>{})),bo.set(this,(()=>{})),yo.set(this,void 0),Eo.set(this,(()=>{})),Co.set(this,(()=>{})),Bo.set(this,{}),this._chatCompletions=[],this.messages=[],xo.set(this,!1),vo.set(this,!1),wo.set(this,!1),ko.set(this,!1),Ro.set(this,(n=>{if(No(this,vo,!0,"f"),n instanceof Error&&"AbortError"===n.name&&(n=new Wr),n instanceof Wr)return No(this,wo,!0,"f"),this._emit("abort",n);if(n instanceof Dr)return this._emit("error",n);if(n instanceof Error){const t=new Dr(n.message);return t.cause=n,this._emit("error",t)}return this._emit("error",new Dr(String(n)))})),No(this,mo,new Promise(((n,t)=>{No(this,go,n,"f"),No(this,bo,t,"f")})),"f"),No(this,yo,new Promise(((n,t)=>{No(this,Eo,n,"f"),No(this,Co,t,"f")})),"f"),zo(this,mo,"f").catch((()=>{})),zo(this,yo,"f").catch((()=>{}))}_run(n){setTimeout((()=>{n().then((()=>{this._emitFinal(),this._emit("end")}),zo(this,Ro,"f"))}),0)}_addChatCompletion(n){this._chatCompletions.push(n),this._emit("chatCompletion",n);const t=n.choices[0]?.message;return t&&this._addMessage(t),n}_addMessage(n,t=!0){if("content"in n||(n.content=null),this.messages.push(n),t)if(this._emit("message",n),(fo(n)||po(n))&&n.content)this._emit("functionCallResult",n.content);else if(Ao(n)&&n.function_call)this._emit("functionCall",n.function_call);else if(Ao(n)&&n.tool_calls)for(const t of n.tool_calls)"function"===t.type&&this._emit("functionCall",t.function)}_connected(){this.ended||(zo(this,go,"f").call(this),this._emit("connect"))}get ended(){return zo(this,xo,"f")}get errored(){return zo(this,vo,"f")}get aborted(){return zo(this,wo,"f")}abort(){this.controller.abort()}on(n,t){return(zo(this,Bo,"f")[n]||(zo(this,Bo,"f")[n]=[])).push({listener:t}),this}off(n,t){const e=zo(this,Bo,"f")[n];if(!e)return this;const r=e.findIndex((n=>n.listener===t));return r>=0&&e.splice(r,1),this}once(n,t){return(zo(this,Bo,"f")[n]||(zo(this,Bo,"f")[n]=[])).push({listener:t,once:!0}),this}emitted(n){return new Promise(((t,e)=>{No(this,ko,!0,"f"),"error"!==n&&this.once("error",e),this.once(n,t)}))}async done(){No(this,ko,!0,"f"),await zo(this,yo,"f")}async finalChatCompletion(){await this.done();const n=this._chatCompletions[this._chatCompletions.length-1];if(!n)throw new Dr("stream ended without producing a ChatCompletion");return n}async finalContent(){return await this.done(),zo(this,ho,"m",_o).call(this)}async finalMessage(){return await this.done(),zo(this,ho,"m",So).call(this)}async finalFunctionCall(){return await this.done(),zo(this,ho,"m",Oo).call(this)}async finalFunctionCallResult(){return await this.done(),zo(this,ho,"m",jo).call(this)}async totalUsage(){return await this.done(),zo(this,ho,"m",Io).call(this)}allChatCompletions(){return[...this._chatCompletions]}_emit(n,...t){if(zo(this,xo,"f"))return;"end"===n&&(No(this,xo,!0,"f"),zo(this,Eo,"f").call(this));const e=zo(this,Bo,"f")[n];if(e&&(zo(this,Bo,"f")[n]=e.filter((n=>!n.once)),e.forEach((({listener:n})=>n(...t)))),"abort"===n){const n=t[0];return zo(this,ko,"f")||e?.length||Promise.reject(n),zo(this,bo,"f").call(this,n),zo(this,Co,"f").call(this,n),void this._emit("end")}if("error"===n){const n=t[0];zo(this,ko,"f")||e?.length||Promise.reject(n),zo(this,bo,"f").call(this,n),zo(this,Co,"f").call(this,n),this._emit("end")}}_emitFinal(){const n=this._chatCompletions[this._chatCompletions.length-1];n&&this._emit("finalChatCompletion",n);const t=zo(this,ho,"m",So).call(this);t&&this._emit("finalMessage",t);const e=zo(this,ho,"m",_o).call(this);e&&this._emit("finalContent",e);const r=zo(this,ho,"m",Oo).call(this);r&&this._emit("finalFunctionCall",r);const i=zo(this,ho,"m",jo).call(this);null!=i&&this._emit("finalFunctionCallResult",i),this._chatCompletions.some((n=>n.usage))&&this._emit("totalUsage",zo(this,ho,"m",Io).call(this))}async _createChatCompletion(n,t,e){const r=e?.signal;r&&(r.aborted&&this.controller.abort(),r.addEventListener("abort",(()=>this.controller.abort()))),zo(this,ho,"m",Po).call(this,t);const i=await n.create({...t,stream:!1},{...e,signal:this.controller.signal});return this._connected(),this._addChatCompletion(i)}async _runChatCompletion(n,t,e){for(const n of t.messages)this._addMessage(n,!1);return await this._createChatCompletion(n,t,e)}async _runFunctions(n,t,e){const r="function",{function_call:i="auto",stream:o,...a}=t,s="string"!=typeof i&&i?.name,{maxChatCompletions:c=Yo}=e||{},l={};for(const n of t.functions)l[n.name||n.function.name]=n;const u=t.functions.map((n=>({name:n.name||n.function.name,parameters:n.parameters,description:n.description})));for(const n of t.messages)this._addMessage(n,!1);for(let t=0;t<c;++t){const t=await this._createChatCompletion(n,{...a,function_call:i,functions:u,messages:[...this.messages]},e),o=t.choices[0]?.message;if(!o)throw new Dr("missing message in ChatCompletion response");if(!o.function_call)return;const{name:c,arguments:A}=o.function_call,d=l[c];if(!d){const n=`Invalid function_call: ${JSON.stringify(c)}. Available options are: ${u.map((n=>JSON.stringify(n.name))).join(", ")}. Please try again`;this._addMessage({role:r,name:c,content:n});continue}if(s&&s!==c){const n=`Invalid function_call: ${JSON.stringify(c)}. ${JSON.stringify(s)} requested. Please try again`;this._addMessage({role:r,name:c,content:n});continue}let f;try{f=uo(d)?await d.parse(A):A}catch(n){this._addMessage({role:r,name:c,content:n instanceof Error?n.message:String(n)});continue}const p=await d.function(f,this),h=zo(this,ho,"m",To).call(this,p);if(this._addMessage({role:r,name:c,content:h}),s)return}}async _runTools(n,t,e){const r="tool",{tool_choice:i="auto",stream:o,...a}=t,s="string"!=typeof i&&i?.function?.name,{maxChatCompletions:c=Yo}=e||{},l={};for(const n of t.tools)"function"===n.type&&(l[n.function.name||n.function.function.name]=n.function);const u="tools"in t?t.tools.map((n=>"function"===n.type?{type:"function",function:{name:n.function.name||n.function.function.name,parameters:n.function.parameters,description:n.function.description}}:n)):void 0;for(const n of t.messages)this._addMessage(n,!1);for(let t=0;t<c;++t){const t=await this._createChatCompletion(n,{...a,tool_choice:i,tools:u,messages:[...this.messages]},e),o=t.choices[0]?.message;if(!o)throw new Dr("missing message in ChatCompletion response");if(!o.tool_calls)return;for(const n of o.tool_calls){if("function"!==n.type)continue;const t=n.id,{name:e,arguments:i}=n.function,o=l[e];if(!o){const n=`Invalid tool_call: ${JSON.stringify(e)}. Available options are: ${u.map((n=>JSON.stringify(n.function.name))).join(", ")}. Please try again`;this._addMessage({role:r,tool_call_id:t,content:n});continue}if(s&&s!==e){const n=`Invalid tool_call: ${JSON.stringify(e)}. ${JSON.stringify(s)} requested. Please try again`;this._addMessage({role:r,tool_call_id:t,content:n});continue}let a;try{a=uo(o)?await o.parse(i):i}catch(n){const e=n instanceof Error?n.message:String(n);this._addMessage({role:r,tool_call_id:t,content:e});continue}const c=await o.function(a,this),A=zo(this,ho,"m",To).call(this,c);if(this._addMessage({role:r,tool_call_id:t,content:A}),s)return}}}}mo=new WeakMap,go=new WeakMap,bo=new WeakMap,yo=new WeakMap,Eo=new WeakMap,Co=new WeakMap,Bo=new WeakMap,xo=new WeakMap,vo=new WeakMap,wo=new WeakMap,ko=new WeakMap,Ro=new WeakMap,ho=new WeakSet,_o=function(){return zo(this,ho,"m",So).call(this).content??null},So=function(){let n=this.messages.length;for(;n-- >0;){const t=this.messages[n];if(Ao(t))return{...t,content:t.content??null}}throw new Dr("stream ended without producing a ChatCompletionMessage with role=assistant")},Oo=function(){for(let n=this.messages.length-1;n>=0;n--){const t=this.messages[n];if(Ao(t)&&t?.function_call)return t.function_call;if(Ao(t)&&t?.tool_calls?.length)return t.tool_calls.at(-1)?.function}},jo=function(){for(let n=this.messages.length-1;n>=0;n--){const t=this.messages[n];if(fo(t)&&null!=t.content)return t.content;if(po(t)&&null!=t.content&&this.messages.some((n=>"assistant"===n.role&&n.tool_calls?.some((n=>"function"===n.type&&n.id===t.tool_call_id)))))return t.content}},Io=function(){const n={completion_tokens:0,prompt_tokens:0,total_tokens:0};for(const{usage:t}of this._chatCompletions)t&&(n.completion_tokens+=t.completion_tokens,n.prompt_tokens+=t.prompt_tokens,n.total_tokens+=t.total_tokens);return n},Po=function(n){if(null!=n.n&&n.n>1)throw new Dr("ChatCompletion convenience helpers only support n=1 at this time. To use n>1, please use chat.completions.create() directly.")},To=function(n){return"string"==typeof n?n:void 0===n?"undefined":JSON.stringify(n)};class Uo extends Lo{static runFunctions(n,t,e){const r=new Uo,i={...e,headers:{...e?.headers,"X-Stainless-Helper-Method":"runFunctions"}};return r._run((()=>r._runFunctions(n,t,i))),r}static runTools(n,t,e){const r=new Uo,i={...e,headers:{...e?.headers,"X-Stainless-Helper-Method":"runTools"}};return r._run((()=>r._runTools(n,t,i))),r}_addMessage(n){super._addMessage(n),Ao(n)&&n.content&&this._emit("content",n.content)}}var Mo,Fo,Do,$o,Wo,qo,Zo,Xo,Vo=function(n,t,e,r){if("a"===e&&!r)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof t?n!==t||!r:!t.has(n))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===e?r:"a"===e?r.call(n):r?r.value:t.get(n)},Ho=function(n,t,e,r,i){if("m"===r)throw new TypeError("Private method is not writable");if("a"===r&&!i)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof t?n!==t||!i:!t.has(n))throw new TypeError("Cannot write private member to an object whose class did not declare it");return"a"===r?i.call(n,e):i?i.value=e:t.set(n,e),e};class Ko extends Lo{constructor(){super(...arguments),Mo.add(this),Fo.set(this,void 0)}get currentChatCompletionSnapshot(){return Vo(this,Fo,"f")}static fromReadableStream(n){const t=new Ko;return t._run((()=>t._fromReadableStream(n))),t}static createChatCompletion(n,t,e){const r=new Ko;return r._run((()=>r._runChatCompletion(n,{...t,stream:!0},{...e,headers:{...e?.headers,"X-Stainless-Helper-Method":"stream"}}))),r}async _createChatCompletion(n,t,e){const r=e?.signal;r&&(r.aborted&&this.controller.abort(),r.addEventListener("abort",(()=>this.controller.abort()))),Vo(this,Mo,"m",Do).call(this);const i=await n.create({...t,stream:!0},{...e,signal:this.controller.signal});this._connected();for await(const n of i)Vo(this,Mo,"m",$o).call(this,n);if(i.controller.signal?.aborted)throw new Wr;return this._addChatCompletion(Vo(this,Mo,"m",Wo).call(this))}async _fromReadableStream(n,t){const e=t?.signal;e&&(e.aborted&&this.controller.abort(),e.addEventListener("abort",(()=>this.controller.abort()))),Vo(this,Mo,"m",Do).call(this),this._connected();const r=ti.fromReadableStream(n,this.controller);let i;for await(const n of r)i&&i!==n.id&&this._addChatCompletion(Vo(this,Mo,"m",Wo).call(this)),Vo(this,Mo,"m",$o).call(this,n),i=n.id;if(r.controller.signal?.aborted)throw new Wr;return this._addChatCompletion(Vo(this,Mo,"m",Wo).call(this))}[(Fo=new WeakMap,Mo=new WeakSet,Do=function(){this.ended||Ho(this,Fo,void 0,"f")},$o=function(n){if(this.ended)return;const t=Vo(this,Mo,"m",qo).call(this,n);this._emit("chunk",n,t);const e=n.choices[0]?.delta?.content,r=t.choices[0]?.message;null!=e&&"assistant"===r?.role&&r?.content&&this._emit("content",e,r.content)},Wo=function(){if(this.ended)throw new Dr("stream has ended, this shouldn't happen");const n=Vo(this,Fo,"f");if(!n)throw new Dr("request ended without sending any chunks");return Ho(this,Fo,void 0,"f"),function(n){const{id:t,choices:e,created:r,model:i,system_fingerprint:o,...a}=n;return{...a,id:t,choices:e.map((({message:t,finish_reason:e,index:r,logprobs:i,...o})=>{if(!e)throw new Dr(`missing finish_reason for choice ${r}`);const{content:a=null,function_call:s,tool_calls:c,...l}=t,u=t.role;if(!u)throw new Dr(`missing role for choice ${r}`);if(s){const{arguments:n,name:t}=s;if(null==n)throw new Dr(`missing function_call.arguments for choice ${r}`);if(!t)throw new Dr(`missing function_call.name for choice ${r}`);return{...o,message:{content:a,function_call:{arguments:n,name:t},role:u},finish_reason:e,index:r,logprobs:i}}return c?{...o,index:r,finish_reason:e,logprobs:i,message:{...l,role:u,content:a,tool_calls:c.map(((t,e)=>{const{function:i,type:o,id:a,...s}=t,{arguments:c,name:l,...u}=i||{};if(null==a)throw new Dr(`missing choices[${r}].tool_calls[${e}].id\n${Go(n)}`);if(null==o)throw new Dr(`missing choices[${r}].tool_calls[${e}].type\n${Go(n)}`);if(null==l)throw new Dr(`missing choices[${r}].tool_calls[${e}].function.name\n${Go(n)}`);if(null==c)throw new Dr(`missing choices[${r}].tool_calls[${e}].function.arguments\n${Go(n)}`);return{...s,id:a,type:o,function:{...u,name:l,arguments:c}}}))}}:{...o,message:{...l,content:a,role:u},finish_reason:e,index:r,logprobs:i}})),created:r,model:i,object:"chat.completion",...o?{system_fingerprint:o}:{}}}(n)},qo=function(n){var t,e,r;let i=Vo(this,Fo,"f");const{choices:o,...a}=n;i?Object.assign(i,a):i=Ho(this,Fo,{...a,choices:[]},"f");for(const{delta:o,finish_reason:a,index:s,logprobs:c=null,...l}of n.choices){let n=i.choices[s];if(n||(n=i.choices[s]={finish_reason:a,index:s,message:{},logprobs:c,...l}),c)if(n.logprobs){const{content:e,...r}=c;Object.assign(n.logprobs,r),e&&((t=n.logprobs).content??(t.content=[]),n.logprobs.content.push(...e))}else n.logprobs=Object.assign({},c);if(a&&(n.finish_reason=a),Object.assign(n,l),!o)continue;const{content:u,function_call:A,role:d,tool_calls:f,...p}=o;if(Object.assign(n.message,p),u&&(n.message.content=(n.message.content||"")+u),d&&(n.message.role=d),A&&(n.message.function_call?(A.name&&(n.message.function_call.name=A.name),A.arguments&&((e=n.message.function_call).arguments??(e.arguments=""),n.message.function_call.arguments+=A.arguments)):n.message.function_call=A),f){n.message.tool_calls||(n.message.tool_calls=[]);for(const{index:t,id:e,type:i,function:o,...a}of f){const s=(r=n.message.tool_calls)[t]??(r[t]={});Object.assign(s,a),e&&(s.id=e),i&&(s.type=i),o&&(s.function??(s.function={arguments:""})),o?.name&&(s.function.name=o.name),o?.arguments&&(s.function.arguments+=o.arguments)}}}return i},Symbol.asyncIterator)](){const n=[],t=[];let e=!1;return this.on("chunk",(e=>{const r=t.shift();r?r(e):n.push(e)})),this.on("end",(()=>{e=!0;for(const n of t)n(void 0);t.length=0})),{next:async()=>n.length?{value:n.shift(),done:!1}:e?{value:void 0,done:!0}:new Promise((n=>t.push(n))).then((n=>n?{value:n,done:!1}:{value:void 0,done:!0}))}}toReadableStream(){return new ti(this[Symbol.asyncIterator].bind(this),this.controller).toReadableStream()}}function Go(n){return JSON.stringify(n)}class Jo extends Ko{static fromReadableStream(n){const t=new Jo;return t._run((()=>t._fromReadableStream(n))),t}static runFunctions(n,t,e){const r=new Jo,i={...e,headers:{...e?.headers,"X-Stainless-Helper-Method":"runFunctions"}};return r._run((()=>r._runFunctions(n,t,i))),r}static runTools(n,t,e){const r=new Jo,i={...e,headers:{...e?.headers,"X-Stainless-Helper-Method":"runTools"}};return r._run((()=>r._runTools(n,t,i))),r}}class Qo extends Fi{runFunctions(n,t){return n.stream?Jo.runFunctions(this._client.chat.completions,n,t):Uo.runFunctions(this._client.chat.completions,n,t)}runTools(n,t){return n.stream?Jo.runTools(this._client.chat.completions,n,t):Uo.runTools(this._client.chat.completions,n,t)}stream(n,t){return Ko.createChatCompletion(this._client.chat.completions,n,t)}}class na extends Fi{constructor(){super(...arguments),this.completions=new Qo(this._client)}}!function(n){n.Completions=Qo}(na||(na={}));class ta extends Fi{retrieve(n,t,e,r){return this._client.get(`/threads/${n}/messages/${t}/files/${e}`,{...r,headers:{"OpenAI-Beta":"assistants=v1",...r?.headers}})}list(n,t,e={},r){return Bi(e)?this.list(n,t,{},e):this._client.getAPIList(`/threads/${n}/messages/${t}/files`,ea,{query:e,...r,headers:{"OpenAI-Beta":"assistants=v1",...r?.headers}})}}class ea extends Mi{}!function(n){n.MessageFilesPage=ea}(ta||(ta={}));class ra extends Fi{constructor(){super(...arguments),this.files=new ta(this._client)}create(n,t,e){return this._client.post(`/threads/${n}/messages`,{body:t,...e,headers:{"OpenAI-Beta":"assistants=v1",...e?.headers}})}retrieve(n,t,e){return this._client.get(`/threads/${n}/messages/${t}`,{...e,headers:{"OpenAI-Beta":"assistants=v1",...e?.headers}})}update(n,t,e,r){return this._client.post(`/threads/${n}/messages/${t}`,{body:e,...r,headers:{"OpenAI-Beta":"assistants=v1",...r?.headers}})}list(n,t={},e){return Bi(t)?this.list(n,{},t):this._client.getAPIList(`/threads/${n}/messages`,ia,{query:t,...e,headers:{"OpenAI-Beta":"assistants=v1",...e?.headers}})}}class ia extends Mi{}(Xo=ra||(ra={})).ThreadMessagesPage=ia,Xo.Files=ta,Xo.MessageFilesPage=ea;class oa extends Fi{retrieve(n,t,e,r){return this._client.get(`/threads/${n}/runs/${t}/steps/${e}`,{...r,headers:{"OpenAI-Beta":"assistants=v1",...r?.headers}})}list(n,t,e={},r){return Bi(e)?this.list(n,t,{},e):this._client.getAPIList(`/threads/${n}/runs/${t}/steps`,aa,{query:e,...r,headers:{"OpenAI-Beta":"assistants=v1",...r?.headers}})}}class aa extends Mi{}!function(n){n.RunStepsPage=aa}(oa||(oa={}));class sa extends Fi{constructor(){super(...arguments),this.steps=new oa(this._client)}create(n,t,e){return this._client.post(`/threads/${n}/runs`,{body:t,...e,headers:{"OpenAI-Beta":"assistants=v1",...e?.headers}})}retrieve(n,t,e){return this._client.get(`/threads/${n}/runs/${t}`,{...e,headers:{"OpenAI-Beta":"assistants=v1",...e?.headers}})}update(n,t,e,r){return this._client.post(`/threads/${n}/runs/${t}`,{body:e,...r,headers:{"OpenAI-Beta":"assistants=v1",...r?.headers}})}list(n,t={},e){return Bi(t)?this.list(n,{},t):this._client.getAPIList(`/threads/${n}/runs`,ca,{query:t,...e,headers:{"OpenAI-Beta":"assistants=v1",...e?.headers}})}cancel(n,t,e){return this._client.post(`/threads/${n}/runs/${t}/cancel`,{...e,headers:{"OpenAI-Beta":"assistants=v1",...e?.headers}})}submitToolOutputs(n,t,e,r){return this._client.post(`/threads/${n}/runs/${t}/submit_tool_outputs`,{body:e,...r,headers:{"OpenAI-Beta":"assistants=v1",...r?.headers}})}}class ca extends Mi{}!function(n){n.RunsPage=ca,n.Steps=oa,n.RunStepsPage=aa}(sa||(sa={}));class la extends Fi{constructor(){super(...arguments),this.runs=new sa(this._client),this.messages=new ra(this._client)}create(n={},t){return Bi(n)?this.create({},n):this._client.post("/threads",{body:n,...t,headers:{"OpenAI-Beta":"assistants=v1",...t?.headers}})}retrieve(n,t){return this._client.get(`/threads/${n}`,{...t,headers:{"OpenAI-Beta":"assistants=v1",...t?.headers}})}update(n,t,e){return this._client.post(`/threads/${n}`,{body:t,...e,headers:{"OpenAI-Beta":"assistants=v1",...e?.headers}})}del(n,t){return this._client.delete(`/threads/${n}`,{...t,headers:{"OpenAI-Beta":"assistants=v1",...t?.headers}})}createAndRun(n,t){return this._client.post("/threads/runs",{body:n,...t,headers:{"OpenAI-Beta":"assistants=v1",...t?.headers}})}}!function(n){n.Runs=sa,n.RunsPage=ca,n.Messages=ra,n.ThreadMessagesPage=ia}(la||(la={}));class ua extends Fi{constructor(){super(...arguments),this.chat=new na(this._client),this.assistants=new co(this._client),this.threads=new la(this._client)}}!function(n){n.Chat=na,n.Assistants=co,n.AssistantsPage=lo,n.Threads=la}(ua||(ua={}));class Aa extends gi{constructor({baseURL:n=Pi("OPENAI_BASE_URL"),apiKey:t=Pi("OPENAI_API_KEY"),organization:e=Pi("OPENAI_ORG_ID")??null,...r}={}){if(void 0===t)throw new Dr("The OPENAI_API_KEY environment variable is missing or empty; either provide it, or instantiate the OpenAI client with an apiKey option, like new OpenAI({ apiKey: 'My API Key' }).");const i={apiKey:t,organization:e,...r,baseURL:n||"https://api.openai.com/v1"};if(!i.dangerouslyAllowBrowser&&"undefined"!=typeof window&&void 0!==window.document&&"undefined"!=typeof navigator)throw new Dr("It looks like you're running in a browser-like environment.\n\nThis is disabled by default, as it risks exposing your secret API credentials to attackers.\nIf you understand the risks and have appropriate mitigations in place,\nyou can set the `dangerouslyAllowBrowser` option to `true`, e.g.,\n\nnew OpenAI({ apiKey, dangerouslyAllowBrowser: true });\n\nhttps://help.openai.com/en/articles/5112595-best-practices-for-api-key-safety\n");super({baseURL:i.baseURL,timeout:i.timeout??6e5,httpAgent:i.httpAgent,maxRetries:i.maxRetries,fetch:i.fetch}),this.completions=new Di(this),this.chat=new Wi(this),this.embeddings=new qi(this),this.files=new Zi(this),this.images=new Vi(this),this.audio=new Ji(this),this.moderations=new Qi(this),this.models=new no(this),this.fineTuning=new oo(this),this.beta=new ua(this),this._options=i,this.apiKey=t,this.organization=e}defaultQuery(){return this._options.defaultQuery}defaultHeaders(n){return{...super.defaultHeaders(n),"OpenAI-Organization":this.organization,...this._options.defaultHeaders}}authHeaders(n){return{Authorization:`Bearer ${this.apiKey}`}}}Zo=Aa,Aa.OpenAI=Zo,Aa.OpenAIError=Dr,Aa.APIError=$r,Aa.APIConnectionError=qr,Aa.APIConnectionTimeoutError=Zr,Aa.APIUserAbortError=Wr,Aa.NotFoundError=Kr,Aa.ConflictError=Gr,Aa.RateLimitError=Qr,Aa.BadRequestError=Xr,Aa.AuthenticationError=Vr,Aa.InternalServerError=ni,Aa.PermissionDeniedError=Hr,Aa.UnprocessableEntityError=Jr;const{OpenAIError:da,APIError:fa,APIConnectionError:pa,APIConnectionTimeoutError:ha,APIUserAbortError:ma,NotFoundError:ga,ConflictError:ba,RateLimitError:ya,BadRequestError:Ea,AuthenticationError:Ca,InternalServerError:Ba,PermissionDeniedError:xa,UnprocessableEntityError:va}=n;!function(n){n.toFile=si,n.fileFromPath=Tr,n.Page=Ui,n.CursorPage=Mi,n.Completions=Di,n.Chat=Wi,n.Embeddings=qi,n.Files=Zi,n.FileObjectsPage=Xi,n.Images=Vi,n.Audio=Ji,n.Moderations=Qi,n.Models=no,n.ModelsPage=to,n.FineTuning=oo,n.Beta=ua}(Aa||(Aa={})),new Aa({apiKey:"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",dangerouslyAllowBrowser:!0});const wa=Object.create(null);wa.open="0",wa.close="1",wa.ping="2",wa.pong="3",wa.message="4",wa.upgrade="5",wa.noop="6";const ka=Object.create(null);Object.keys(wa).forEach((n=>{ka[wa[n]]=n}));const _a={type:"error",data:"parser error"},Sa="function"==typeof Blob||"undefined"!=typeof Blob&&"[object BlobConstructor]"===Object.prototype.toString.call(Blob),Oa="function"==typeof ArrayBuffer,ja=n=>"function"==typeof ArrayBuffer.isView?ArrayBuffer.isView(n):n&&n.buffer instanceof ArrayBuffer,Ia=({type:n,data:t},e,r)=>Sa&&t instanceof Blob?e?r(t):Ra(t,r):Oa&&(t instanceof ArrayBuffer||ja(t))?e?r(t):Ra(new Blob([t]),r):r(wa[n]+(t||"")),Ra=(n,t)=>{const e=new FileReader;return e.onload=function(){const n=e.result.split(",")[1];t("b"+(n||""))},e.readAsDataURL(n)};function Pa(n){return n instanceof Uint8Array?n:n instanceof ArrayBuffer?new Uint8Array(n):new Uint8Array(n.buffer,n.byteOffset,n.byteLength)}let Ta;const Na="undefined"==typeof Uint8Array?[]:new Uint8Array(256);for(let n=0;n<64;n++)Na["ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/".charCodeAt(n)]=n;const za="function"==typeof ArrayBuffer,Ya=(n,t)=>{if("string"!=typeof n)return{type:"message",data:Ua(n,t)};const e=n.charAt(0);return"b"===e?{type:"message",data:La(n.substring(1),t)}:ka[e]?n.length>1?{type:ka[e],data:n.substring(1)}:{type:ka[e]}:_a},La=(n,t)=>{if(za){const e=(n=>{let t,e,r,i,o,a=.75*n.length,s=n.length,c=0;"="===n[n.length-1]&&(a--,"="===n[n.length-2]&&a--);const l=new ArrayBuffer(a),u=new Uint8Array(l);for(t=0;t<s;t+=4)e=Na[n.charCodeAt(t)],r=Na[n.charCodeAt(t+1)],i=Na[n.charCodeAt(t+2)],o=Na[n.charCodeAt(t+3)],u[c++]=e<<2|r>>4,u[c++]=(15&r)<<4|i>>2,u[c++]=(3&i)<<6|63&o;return l})(n);return Ua(e,t)}return{base64:!0,data:n}},Ua=(n,t)=>"blob"===t?n instanceof Blob?n:new Blob([n]):n instanceof ArrayBuffer?n:n.buffer,Ma=String.fromCharCode(30);let Fa;function Da(n){return n.reduce(((n,t)=>n+t.length),0)}function $a(n,t){if(n[0].length===t)return n.shift();const e=new Uint8Array(t);let r=0;for(let i=0;i<t;i++)e[i]=n[0][r++],r===n[0].length&&(n.shift(),r=0);return n.length&&r<n[0].length&&(n[0]=n[0].slice(r)),e}function Wa(n){if(n)return function(n){for(var t in Wa.prototype)n[t]=Wa.prototype[t];return n}(n)}Wa.prototype.on=Wa.prototype.addEventListener=function(n,t){return this._callbacks=this._callbacks||{},(this._callbacks["$"+n]=this._callbacks["$"+n]||[]).push(t),this},Wa.prototype.once=function(n,t){function e(){this.off(n,e),t.apply(this,arguments)}return e.fn=t,this.on(n,e),this},Wa.prototype.off=Wa.prototype.removeListener=Wa.prototype.removeAllListeners=Wa.prototype.removeEventListener=function(n,t){if(this._callbacks=this._callbacks||{},0==arguments.length)return this._callbacks={},this;var e,r=this._callbacks["$"+n];if(!r)return this;if(1==arguments.length)return delete this._callbacks["$"+n],this;for(var i=0;i<r.length;i++)if((e=r[i])===t||e.fn===t){r.splice(i,1);break}return 0===r.length&&delete this._callbacks["$"+n],this},Wa.prototype.emit=function(n){this._callbacks=this._callbacks||{};for(var t=new Array(arguments.length-1),e=this._callbacks["$"+n],r=1;r<arguments.length;r++)t[r-1]=arguments[r];if(e){r=0;for(var i=(e=e.slice(0)).length;r<i;++r)e[r].apply(this,t)}return this},Wa.prototype.emitReserved=Wa.prototype.emit,Wa.prototype.listeners=function(n){return this._callbacks=this._callbacks||{},this._callbacks["$"+n]||[]},Wa.prototype.hasListeners=function(n){return!!this.listeners(n).length};const qa="undefined"!=typeof self?self:"undefined"!=typeof window?window:Function("return this")();function Za(n,...t){return t.reduce(((t,e)=>(n.hasOwnProperty(e)&&(t[e]=n[e]),t)),{})}const Xa=qa.setTimeout,Va=qa.clearTimeout;function Ha(n,t){t.useNativeTimers?(n.setTimeoutFn=Xa.bind(qa),n.clearTimeoutFn=Va.bind(qa)):(n.setTimeoutFn=qa.setTimeout.bind(qa),n.clearTimeoutFn=qa.clearTimeout.bind(qa))}class Ka extends Error{constructor(n,t,e){super(n),this.description=t,this.context=e,this.type="TransportError"}}class Ga extends Wa{constructor(n){super(),this.writable=!1,Ha(this,n),this.opts=n,this.query=n.query,this.socket=n.socket}onError(n,t,e){return super.emitReserved("error",new Ka(n,t,e)),this}open(){return this.readyState="opening",this.doOpen(),this}close(){return"opening"!==this.readyState&&"open"!==this.readyState||(this.doClose(),this.onClose()),this}send(n){"open"===this.readyState&&this.write(n)}onOpen(){this.readyState="open",this.writable=!0,super.emitReserved("open")}onData(n){const t=Ya(n,this.socket.binaryType);this.onPacket(t)}onPacket(n){super.emitReserved("packet",n)}onClose(n){this.readyState="closed",super.emitReserved("close",n)}pause(n){}createUri(n,t={}){return n+"://"+this._hostname()+this._port()+this.opts.path+this._query(t)}_hostname(){const n=this.opts.hostname;return-1===n.indexOf(":")?n:"["+n+"]"}_port(){return this.opts.port&&(this.opts.secure&&Number(443!==this.opts.port)||!this.opts.secure&&80!==Number(this.opts.port))?":"+this.opts.port:""}_query(n){const t=function(n){let t="";for(let e in n)n.hasOwnProperty(e)&&(t.length&&(t+="&"),t+=encodeURIComponent(e)+"="+encodeURIComponent(n[e]));return t}(n);return t.length?"?"+t:""}}const Ja="0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-_".split(""),Qa=64,ns={};let ts,es=0,rs=0;function is(n){let t="";do{t=Ja[n%Qa]+t,n=Math.floor(n/Qa)}while(n>0);return t}function os(){const n=is(+new Date);return n!==ts?(es=0,ts=n):n+"."+is(es++)}for(;rs<Qa;rs++)ns[Ja[rs]]=rs;let as=!1;try{as="undefined"!=typeof XMLHttpRequest&&"withCredentials"in new XMLHttpRequest}catch(n){}const ss=as;function cs(n){const t=n.xdomain;try{if("undefined"!=typeof XMLHttpRequest&&(!t||ss))return new XMLHttpRequest}catch(n){}if(!t)try{return new(qa[["Active"].concat("Object").join("X")])("Microsoft.XMLHTTP")}catch(n){}}function ls(){}const us=null!=new cs({xdomain:!1}).responseType;class As extends Wa{constructor(n,t){super(),Ha(this,t),this.opts=t,this.method=t.method||"GET",this.uri=n,this.data=void 0!==t.data?t.data:null,this.create()}create(){var n;const t=Za(this.opts,"agent","pfx","key","passphrase","cert","ca","ciphers","rejectUnauthorized","autoUnref");t.xdomain=!!this.opts.xd;const e=this.xhr=new cs(t);try{e.open(this.method,this.uri,!0);try{if(this.opts.extraHeaders){e.setDisableHeaderCheck&&e.setDisableHeaderCheck(!0);for(let n in this.opts.extraHeaders)this.opts.extraHeaders.hasOwnProperty(n)&&e.setRequestHeader(n,this.opts.extraHeaders[n])}}catch(n){}if("POST"===this.method)try{e.setRequestHeader("Content-type","text/plain;charset=UTF-8")}catch(n){}try{e.setRequestHeader("Accept","*/*")}catch(n){}null===(n=this.opts.cookieJar)||void 0===n||n.addCookies(e),"withCredentials"in e&&(e.withCredentials=this.opts.withCredentials),this.opts.requestTimeout&&(e.timeout=this.opts.requestTimeout),e.onreadystatechange=()=>{var n;3===e.readyState&&(null===(n=this.opts.cookieJar)||void 0===n||n.parseCookies(e)),4===e.readyState&&(200===e.status||1223===e.status?this.onLoad():this.setTimeoutFn((()=>{this.onError("number"==typeof e.status?e.status:0)}),0))},e.send(this.data)}catch(n){return void this.setTimeoutFn((()=>{this.onError(n)}),0)}"undefined"!=typeof document&&(this.index=As.requestsCount++,As.requests[this.index]=this)}onError(n){this.emitReserved("error",n,this.xhr),this.cleanup(!0)}cleanup(n){if(void 0!==this.xhr&&null!==this.xhr){if(this.xhr.onreadystatechange=ls,n)try{this.xhr.abort()}catch(n){}"undefined"!=typeof document&&delete As.requests[this.index],this.xhr=null}}onLoad(){const n=this.xhr.responseText;null!==n&&(this.emitReserved("data",n),this.emitReserved("success"),this.cleanup())}abort(){this.cleanup()}}function ds(){for(let n in As.requests)As.requests.hasOwnProperty(n)&&As.requests[n].abort()}As.requestsCount=0,As.requests={},"undefined"!=typeof document&&("function"==typeof attachEvent?attachEvent("onunload",ds):"function"==typeof addEventListener&&addEventListener("onpagehide"in qa?"pagehide":"unload",ds,!1));const fs="function"==typeof Promise&&"function"==typeof Promise.resolve?n=>Promise.resolve().then(n):(n,t)=>t(n,0),ps=qa.WebSocket||qa.MozWebSocket,hs="undefined"!=typeof navigator&&"string"==typeof navigator.product&&"reactnative"===navigator.product.toLowerCase(),ms={websocket:class extends Ga{constructor(n){super(n),this.supportsBinary=!n.forceBase64}get name(){return"websocket"}doOpen(){if(!this.check())return;const n=this.uri(),t=this.opts.protocols,e=hs?{}:Za(this.opts,"agent","perMessageDeflate","pfx","key","passphrase","cert","ca","ciphers","rejectUnauthorized","localAddress","protocolVersion","origin","maxPayload","family","checkServerIdentity");this.opts.extraHeaders&&(e.headers=this.opts.extraHeaders);try{this.ws=hs?new ps(n,t,e):t?new ps(n,t):new ps(n)}catch(n){return this.emitReserved("error",n)}this.ws.binaryType=this.socket.binaryType,this.addEventListeners()}addEventListeners(){this.ws.onopen=()=>{this.opts.autoUnref&&this.ws._socket.unref(),this.onOpen()},this.ws.onclose=n=>this.onClose({description:"websocket connection closed",context:n}),this.ws.onmessage=n=>this.onData(n.data),this.ws.onerror=n=>this.onError("websocket error",n)}write(n){this.writable=!1;for(let t=0;t<n.length;t++){const e=n[t],r=t===n.length-1;Ia(e,this.supportsBinary,(n=>{try{this.ws.send(n)}catch(n){}r&&fs((()=>{this.writable=!0,this.emitReserved("drain")}),this.setTimeoutFn)}))}}doClose(){void 0!==this.ws&&(this.ws.close(),this.ws=null)}uri(){const n=this.opts.secure?"wss":"ws",t=this.query||{};return this.opts.timestampRequests&&(t[this.opts.timestampParam]=os()),this.supportsBinary||(t.b64=1),this.createUri(n,t)}check(){return!!ps}},webtransport:class extends Ga{get name(){return"webtransport"}doOpen(){"function"==typeof WebTransport&&(this.transport=new WebTransport(this.createUri("https"),this.opts.transportOptions[this.name]),this.transport.closed.then((()=>{this.onClose()})).catch((n=>{this.onError("webtransport error",n)})),this.transport.ready.then((()=>{this.transport.createBidirectionalStream().then((n=>{const t=function(n,t){Fa||(Fa=new TextDecoder);const e=[];let r=0,i=-1,o=!1;return new TransformStream({transform(a,s){for(e.push(a);;){if(0===r){if(Da(e)<1)break;const n=$a(e,1);o=128==(128&n[0]),i=127&n[0],r=i<126?3:126===i?1:2}else if(1===r){if(Da(e)<2)break;const n=$a(e,2);i=new DataView(n.buffer,n.byteOffset,n.length).getUint16(0),r=3}else if(2===r){if(Da(e)<8)break;const n=$a(e,8),t=new DataView(n.buffer,n.byteOffset,n.length),o=t.getUint32(0);if(o>Math.pow(2,21)-1){s.enqueue(_a);break}i=o*Math.pow(2,32)+t.getUint32(4),r=3}else{if(Da(e)<i)break;const n=$a(e,i);s.enqueue(Ya(o?n:Fa.decode(n),t)),r=0}if(0===i||i>n){s.enqueue(_a);break}}}})}(Number.MAX_SAFE_INTEGER,this.socket.binaryType),e=n.readable.pipeThrough(t).getReader(),r=new TransformStream({transform(n,t){!function(n,t){Sa&&n.data instanceof Blob?n.data.arrayBuffer().then(Pa).then(t):Oa&&(n.data instanceof ArrayBuffer||ja(n.data))?t(Pa(n.data)):Ia(n,!1,(n=>{Ta||(Ta=new TextEncoder),t(Ta.encode(n))}))}(n,(e=>{const r=e.length;let i;if(r<126)i=new Uint8Array(1),new DataView(i.buffer).setUint8(0,r);else if(r<65536){i=new Uint8Array(3);const n=new DataView(i.buffer);n.setUint8(0,126),n.setUint16(1,r)}else{i=new Uint8Array(9);const n=new DataView(i.buffer);n.setUint8(0,127),n.setBigUint64(1,BigInt(r))}n.data&&"string"!=typeof n.data&&(i[0]|=128),t.enqueue(i),t.enqueue(e)}))}});r.readable.pipeTo(n.writable),this.writer=r.writable.getWriter();const i=()=>{e.read().then((({done:n,value:t})=>{n||(this.onPacket(t),i())})).catch((n=>{}))};i();const o={type:"open"};this.query.sid&&(o.data=`{"sid":"${this.query.sid}"}`),this.writer.write(o).then((()=>this.onOpen()))}))})))}write(n){this.writable=!1;for(let t=0;t<n.length;t++){const e=n[t],r=t===n.length-1;this.writer.write(e).then((()=>{r&&fs((()=>{this.writable=!0,this.emitReserved("drain")}),this.setTimeoutFn)}))}}doClose(){var n;null===(n=this.transport)||void 0===n||n.close()}},polling:class extends Ga{constructor(n){if(super(n),this.polling=!1,"undefined"!=typeof location){const t="https:"===location.protocol;let e=location.port;e||(e=t?"443":"80"),this.xd="undefined"!=typeof location&&n.hostname!==location.hostname||e!==n.port}const t=n&&n.forceBase64;this.supportsBinary=us&&!t,this.opts.withCredentials&&(this.cookieJar=void 0)}get name(){return"polling"}doOpen(){this.poll()}pause(n){this.readyState="pausing";const t=()=>{this.readyState="paused",n()};if(this.polling||!this.writable){let n=0;this.polling&&(n++,this.once("pollComplete",(function(){--n||t()}))),this.writable||(n++,this.once("drain",(function(){--n||t()})))}else t()}poll(){this.polling=!0,this.doPoll(),this.emitReserved("poll")}onData(n){((n,t)=>{const e=n.split(Ma),r=[];for(let n=0;n<e.length;n++){const i=Ya(e[n],t);if(r.push(i),"error"===i.type)break}return r})(n,this.socket.binaryType).forEach((n=>{if("opening"===this.readyState&&"open"===n.type&&this.onOpen(),"close"===n.type)return this.onClose({description:"transport closed by the server"}),!1;this.onPacket(n)})),"closed"!==this.readyState&&(this.polling=!1,this.emitReserved("pollComplete"),"open"===this.readyState&&this.poll())}doClose(){const n=()=>{this.write([{type:"close"}])};"open"===this.readyState?n():this.once("open",n)}write(n){this.writable=!1,((n,t)=>{const e=n.length,r=new Array(e);let i=0;n.forEach(((n,o)=>{Ia(n,!1,(n=>{r[o]=n,++i===e&&t(r.join(Ma))}))}))})(n,(n=>{this.doWrite(n,(()=>{this.writable=!0,this.emitReserved("drain")}))}))}uri(){const n=this.opts.secure?"https":"http",t=this.query||{};return!1!==this.opts.timestampRequests&&(t[this.opts.timestampParam]=os()),this.supportsBinary||t.sid||(t.b64=1),this.createUri(n,t)}request(n={}){return Object.assign(n,{xd:this.xd,cookieJar:this.cookieJar},this.opts),new As(this.uri(),n)}doWrite(n,t){const e=this.request({method:"POST",data:n});e.on("success",t),e.on("error",((n,t)=>{this.onError("xhr post error",n,t)}))}doPoll(){const n=this.request();n.on("data",this.onData.bind(this)),n.on("error",((n,t)=>{this.onError("xhr poll error",n,t)})),this.pollXhr=n}}},gs=/^(?:(?![^:@\/?#]+:[^:@\/]*@)(http|https|ws|wss):\/\/)?((?:(([^:@\/?#]*)(?::([^:@\/?#]*))?)?@)?((?:[a-f0-9]{0,4}:){2,7}[a-f0-9]{0,4}|[^:\/?#]*)(?::(\d*))?)(((\/(?:[^?#](?![^?#\/]*\.[^?#\/.]+(?:[?#]|$)))*\/?)?([^?#\/]*))(?:\?([^#]*))?(?:#(.*))?)/,bs=["source","protocol","authority","userInfo","user","password","host","port","relative","path","directory","file","query","anchor"];function ys(n){if(n.length>2e3)throw"URI too long";const t=n,e=n.indexOf("["),r=n.indexOf("]");-1!=e&&-1!=r&&(n=n.substring(0,e)+n.substring(e,r).replace(/:/g,";")+n.substring(r,n.length));let i=gs.exec(n||""),o={},a=14;for(;a--;)o[bs[a]]=i[a]||"";return-1!=e&&-1!=r&&(o.source=t,o.host=o.host.substring(1,o.host.length-1).replace(/;/g,":"),o.authority=o.authority.replace("[","").replace("]","").replace(/;/g,":"),o.ipv6uri=!0),o.pathNames=function(n,t){const e=t.replace(/\/{2,9}/g,"/").split("/");return"/"!=t.slice(0,1)&&0!==t.length||e.splice(0,1),"/"==t.slice(-1)&&e.splice(e.length-1,1),e}(0,o.path),o.queryKey=function(n,t){const e={};return t.replace(/(?:^|&)([^&=]*)=?([^&]*)/g,(function(n,t,r){t&&(e[t]=r)})),e}(0,o.query),o}class Es extends Wa{constructor(n,t={}){super(),this.binaryType="arraybuffer",this.writeBuffer=[],n&&"object"==typeof n&&(t=n,n=null),n?(n=ys(n),t.hostname=n.host,t.secure="https"===n.protocol||"wss"===n.protocol,t.port=n.port,n.query&&(t.query=n.query)):t.host&&(t.hostname=ys(t.host).host),Ha(this,t),this.secure=null!=t.secure?t.secure:"undefined"!=typeof location&&"https:"===location.protocol,t.hostname&&!t.port&&(t.port=this.secure?"443":"80"),this.hostname=t.hostname||("undefined"!=typeof location?location.hostname:"localhost"),this.port=t.port||("undefined"!=typeof location&&location.port?location.port:this.secure?"443":"80"),this.transports=t.transports||["polling","websocket","webtransport"],this.writeBuffer=[],this.prevBufferLen=0,this.opts=Object.assign({path:"/engine.io",agent:!1,withCredentials:!1,upgrade:!0,timestampParam:"t",rememberUpgrade:!1,addTrailingSlash:!0,rejectUnauthorized:!0,perMessageDeflate:{threshold:1024},transportOptions:{},closeOnBeforeunload:!1},t),this.opts.path=this.opts.path.replace(/\/$/,"")+(this.opts.addTrailingSlash?"/":""),"string"==typeof this.opts.query&&(this.opts.query=function(n){let t={},e=n.split("&");for(let n=0,r=e.length;n<r;n++){let r=e[n].split("=");t[decodeURIComponent(r[0])]=decodeURIComponent(r[1])}return t}(this.opts.query)),this.id=null,this.upgrades=null,this.pingInterval=null,this.pingTimeout=null,this.pingTimeoutTimer=null,"function"==typeof addEventListener&&(this.opts.closeOnBeforeunload&&(this.beforeunloadEventListener=()=>{this.transport&&(this.transport.removeAllListeners(),this.transport.close())},addEventListener("beforeunload",this.beforeunloadEventListener,!1)),"localhost"!==this.hostname&&(this.offlineEventListener=()=>{this.onClose("transport close",{description:"network connection lost"})},addEventListener("offline",this.offlineEventListener,!1))),this.open()}createTransport(n){const t=Object.assign({},this.opts.query);t.EIO=4,t.transport=n,this.id&&(t.sid=this.id);const e=Object.assign({},this.opts,{query:t,socket:this,hostname:this.hostname,secure:this.secure,port:this.port},this.opts.transportOptions[n]);return new ms[n](e)}open(){let n;if(this.opts.rememberUpgrade&&Es.priorWebsocketSuccess&&-1!==this.transports.indexOf("websocket"))n="websocket";else{if(0===this.transports.length)return void this.setTimeoutFn((()=>{this.emitReserved("error","No transports available")}),0);n=this.transports[0]}this.readyState="opening";try{n=this.createTransport(n)}catch(n){return this.transports.shift(),void this.open()}n.open(),this.setTransport(n)}setTransport(n){this.transport&&this.transport.removeAllListeners(),this.transport=n,n.on("drain",this.onDrain.bind(this)).on("packet",this.onPacket.bind(this)).on("error",this.onError.bind(this)).on("close",(n=>this.onClose("transport close",n)))}probe(n){let t=this.createTransport(n),e=!1;Es.priorWebsocketSuccess=!1;const r=()=>{e||(t.send([{type:"ping",data:"probe"}]),t.once("packet",(n=>{if(!e)if("pong"===n.type&&"probe"===n.data){if(this.upgrading=!0,this.emitReserved("upgrading",t),!t)return;Es.priorWebsocketSuccess="websocket"===t.name,this.transport.pause((()=>{e||"closed"!==this.readyState&&(l(),this.setTransport(t),t.send([{type:"upgrade"}]),this.emitReserved("upgrade",t),t=null,this.upgrading=!1,this.flush())}))}else{const n=new Error("probe error");n.transport=t.name,this.emitReserved("upgradeError",n)}})))};function i(){e||(e=!0,l(),t.close(),t=null)}const o=n=>{const e=new Error("probe error: "+n);e.transport=t.name,i(),this.emitReserved("upgradeError",e)};function a(){o("transport closed")}function s(){o("socket closed")}function c(n){t&&n.name!==t.name&&i()}const l=()=>{t.removeListener("open",r),t.removeListener("error",o),t.removeListener("close",a),this.off("close",s),this.off("upgrading",c)};t.once("open",r),t.once("error",o),t.once("close",a),this.once("close",s),this.once("upgrading",c),-1!==this.upgrades.indexOf("webtransport")&&"webtransport"!==n?this.setTimeoutFn((()=>{e||t.open()}),200):t.open()}onOpen(){if(this.readyState="open",Es.priorWebsocketSuccess="websocket"===this.transport.name,this.emitReserved("open"),this.flush(),"open"===this.readyState&&this.opts.upgrade){let n=0;const t=this.upgrades.length;for(;n<t;n++)this.probe(this.upgrades[n])}}onPacket(n){if("opening"===this.readyState||"open"===this.readyState||"closing"===this.readyState)switch(this.emitReserved("packet",n),this.emitReserved("heartbeat"),this.resetPingTimeout(),n.type){case"open":this.onHandshake(JSON.parse(n.data));break;case"ping":this.sendPacket("pong"),this.emitReserved("ping"),this.emitReserved("pong");break;case"error":const t=new Error("server error");t.code=n.data,this.onError(t);break;case"message":this.emitReserved("data",n.data),this.emitReserved("message",n.data)}}onHandshake(n){this.emitReserved("handshake",n),this.id=n.sid,this.transport.query.sid=n.sid,this.upgrades=this.filterUpgrades(n.upgrades),this.pingInterval=n.pingInterval,this.pingTimeout=n.pingTimeout,this.maxPayload=n.maxPayload,this.onOpen(),"closed"!==this.readyState&&this.resetPingTimeout()}resetPingTimeout(){this.clearTimeoutFn(this.pingTimeoutTimer),this.pingTimeoutTimer=this.setTimeoutFn((()=>{this.onClose("ping timeout")}),this.pingInterval+this.pingTimeout),this.opts.autoUnref&&this.pingTimeoutTimer.unref()}onDrain(){this.writeBuffer.splice(0,this.prevBufferLen),this.prevBufferLen=0,0===this.writeBuffer.length?this.emitReserved("drain"):this.flush()}flush(){if("closed"!==this.readyState&&this.transport.writable&&!this.upgrading&&this.writeBuffer.length){const n=this.getWritablePackets();this.transport.send(n),this.prevBufferLen=n.length,this.emitReserved("flush")}}getWritablePackets(){if(!(this.maxPayload&&"polling"===this.transport.name&&this.writeBuffer.length>1))return this.writeBuffer;let n=1;for(let e=0;e<this.writeBuffer.length;e++){const r=this.writeBuffer[e].data;if(r&&(n+="string"==typeof(t=r)?function(n){let t=0,e=0;for(let r=0,i=n.length;r<i;r++)t=n.charCodeAt(r),t<128?e+=1:t<2048?e+=2:t<55296||t>=57344?e+=3:(r++,e+=4);return e}(t):Math.ceil(1.33*(t.byteLength||t.size))),e>0&&n>this.maxPayload)return this.writeBuffer.slice(0,e);n+=2}var t;return this.writeBuffer}write(n,t,e){return this.sendPacket("message",n,t,e),this}send(n,t,e){return this.sendPacket("message",n,t,e),this}sendPacket(n,t,e,r){if("function"==typeof t&&(r=t,t=void 0),"function"==typeof e&&(r=e,e=null),"closing"===this.readyState||"closed"===this.readyState)return;(e=e||{}).compress=!1!==e.compress;const i={type:n,data:t,options:e};this.emitReserved("packetCreate",i),this.writeBuffer.push(i),r&&this.once("flush",r),this.flush()}close(){const n=()=>{this.onClose("forced close"),this.transport.close()},t=()=>{this.off("upgrade",t),this.off("upgradeError",t),n()},e=()=>{this.once("upgrade",t),this.once("upgradeError",t)};return"opening"!==this.readyState&&"open"!==this.readyState||(this.readyState="closing",this.writeBuffer.length?this.once("drain",(()=>{this.upgrading?e():n()})):this.upgrading?e():n()),this}onError(n){Es.priorWebsocketSuccess=!1,this.emitReserved("error",n),this.onClose("transport error",n)}onClose(n,t){"opening"!==this.readyState&&"open"!==this.readyState&&"closing"!==this.readyState||(this.clearTimeoutFn(this.pingTimeoutTimer),this.transport.removeAllListeners("close"),this.transport.close(),this.transport.removeAllListeners(),"function"==typeof removeEventListener&&(removeEventListener("beforeunload",this.beforeunloadEventListener,!1),removeEventListener("offline",this.offlineEventListener,!1)),this.readyState="closed",this.id=null,this.emitReserved("close",n,t),this.writeBuffer=[],this.prevBufferLen=0)}filterUpgrades(n){const t=[];let e=0;const r=n.length;for(;e<r;e++)~this.transports.indexOf(n[e])&&t.push(n[e]);return t}}Es.protocol=4,Es.protocol;const Cs="function"==typeof ArrayBuffer,Bs=n=>"function"==typeof ArrayBuffer.isView?ArrayBuffer.isView(n):n.buffer instanceof ArrayBuffer,xs=Object.prototype.toString,vs="function"==typeof Blob||"undefined"!=typeof Blob&&"[object BlobConstructor]"===xs.call(Blob),ws="function"==typeof File||"undefined"!=typeof File&&"[object FileConstructor]"===xs.call(File);function ks(n){return Cs&&(n instanceof ArrayBuffer||Bs(n))||vs&&n instanceof Blob||ws&&n instanceof File}function _s(n,t){if(!n||"object"!=typeof n)return!1;if(Array.isArray(n)){for(let t=0,e=n.length;t<e;t++)if(_s(n[t]))return!0;return!1}if(ks(n))return!0;if(n.toJSON&&"function"==typeof n.toJSON&&1===arguments.length)return _s(n.toJSON(),!0);for(const t in n)if(Object.prototype.hasOwnProperty.call(n,t)&&_s(n[t]))return!0;return!1}function Ss(n){const t=[],e=n.data,r=n;return r.data=Os(e,t),r.attachments=t.length,{packet:r,buffers:t}}function Os(n,t){if(!n)return n;if(ks(n)){const e={_placeholder:!0,num:t.length};return t.push(n),e}if(Array.isArray(n)){const e=new Array(n.length);for(let r=0;r<n.length;r++)e[r]=Os(n[r],t);return e}if("object"==typeof n&&!(n instanceof Date)){const e={};for(const r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=Os(n[r],t));return e}return n}function js(n,t){return n.data=Is(n.data,t),delete n.attachments,n}function Is(n,t){if(!n)return n;if(n&&!0===n._placeholder){if("number"==typeof n.num&&n.num>=0&&n.num<t.length)return t[n.num];throw new Error("illegal attachments")}if(Array.isArray(n))for(let e=0;e<n.length;e++)n[e]=Is(n[e],t);else if("object"==typeof n)for(const e in n)Object.prototype.hasOwnProperty.call(n,e)&&(n[e]=Is(n[e],t));return n}const Rs=["connect","connect_error","disconnect","disconnecting","newListener","removeListener"],Ps=5;var Ts;!function(n){n[n.CONNECT=0]="CONNECT",n[n.DISCONNECT=1]="DISCONNECT",n[n.EVENT=2]="EVENT",n[n.ACK=3]="ACK",n[n.CONNECT_ERROR=4]="CONNECT_ERROR",n[n.BINARY_EVENT=5]="BINARY_EVENT",n[n.BINARY_ACK=6]="BINARY_ACK"}(Ts||(Ts={}));class Ns{constructor(n){this.replacer=n}encode(n){return n.type!==Ts.EVENT&&n.type!==Ts.ACK||!_s(n)?[this.encodeAsString(n)]:this.encodeAsBinary({type:n.type===Ts.EVENT?Ts.BINARY_EVENT:Ts.BINARY_ACK,nsp:n.nsp,data:n.data,id:n.id})}encodeAsString(n){let t=""+n.type;return n.type!==Ts.BINARY_EVENT&&n.type!==Ts.BINARY_ACK||(t+=n.attachments+"-"),n.nsp&&"/"!==n.nsp&&(t+=n.nsp+","),null!=n.id&&(t+=n.id),null!=n.data&&(t+=JSON.stringify(n.data,this.replacer)),t}encodeAsBinary(n){const t=Ss(n),e=this.encodeAsString(t.packet),r=t.buffers;return r.unshift(e),r}}function zs(n){return"[object Object]"===Object.prototype.toString.call(n)}class Ys extends Wa{constructor(n){super(),this.reviver=n}add(n){let t;if("string"==typeof n){if(this.reconstructor)throw new Error("got plaintext data when reconstructing a packet");t=this.decodeString(n);const e=t.type===Ts.BINARY_EVENT;e||t.type===Ts.BINARY_ACK?(t.type=e?Ts.EVENT:Ts.ACK,this.reconstructor=new Ls(t),0===t.attachments&&super.emitReserved("decoded",t)):super.emitReserved("decoded",t)}else{if(!ks(n)&&!n.base64)throw new Error("Unknown type: "+n);if(!this.reconstructor)throw new Error("got binary data when not reconstructing a packet");t=this.reconstructor.takeBinaryData(n),t&&(this.reconstructor=null,super.emitReserved("decoded",t))}}decodeString(n){let t=0;const e={type:Number(n.charAt(0))};if(void 0===Ts[e.type])throw new Error("unknown packet type "+e.type);if(e.type===Ts.BINARY_EVENT||e.type===Ts.BINARY_ACK){const r=t+1;for(;"-"!==n.charAt(++t)&&t!=n.length;);const i=n.substring(r,t);if(i!=Number(i)||"-"!==n.charAt(t))throw new Error("Illegal attachments");e.attachments=Number(i)}if("/"===n.charAt(t+1)){const r=t+1;for(;++t&&","!==n.charAt(t)&&t!==n.length;);e.nsp=n.substring(r,t)}else e.nsp="/";const r=n.charAt(t+1);if(""!==r&&Number(r)==r){const r=t+1;for(;++t;){const e=n.charAt(t);if(null==e||Number(e)!=e){--t;break}if(t===n.length)break}e.id=Number(n.substring(r,t+1))}if(n.charAt(++t)){const r=this.tryParse(n.substr(t));if(!Ys.isPayloadValid(e.type,r))throw new Error("invalid payload");e.data=r}return e}tryParse(n){try{return JSON.parse(n,this.reviver)}catch(n){return!1}}static isPayloadValid(n,t){switch(n){case Ts.CONNECT:return zs(t);case Ts.DISCONNECT:return void 0===t;case Ts.CONNECT_ERROR:return"string"==typeof t||zs(t);case Ts.EVENT:case Ts.BINARY_EVENT:return Array.isArray(t)&&("number"==typeof t[0]||"string"==typeof t[0]&&-1===Rs.indexOf(t[0]));case Ts.ACK:case Ts.BINARY_ACK:return Array.isArray(t)}}destroy(){this.reconstructor&&(this.reconstructor.finishedReconstruction(),this.reconstructor=null)}}class Ls{constructor(n){this.packet=n,this.buffers=[],this.reconPack=n}takeBinaryData(n){if(this.buffers.push(n),this.buffers.length===this.reconPack.attachments){const n=js(this.reconPack,this.buffers);return this.finishedReconstruction(),n}return null}finishedReconstruction(){this.reconPack=null,this.buffers=[]}}function Us(n,t,e){return n.on(t,e),function(){n.off(t,e)}}const Ms=Object.freeze({connect:1,connect_error:1,disconnect:1,disconnecting:1,newListener:1,removeListener:1});class Fs extends Wa{constructor(n,t,e){super(),this.connected=!1,this.recovered=!1,this.receiveBuffer=[],this.sendBuffer=[],this._queue=[],this._queueSeq=0,this.ids=0,this.acks={},this.flags={},this.io=n,this.nsp=t,e&&e.auth&&(this.auth=e.auth),this._opts=Object.assign({},e),this.io._autoConnect&&this.open()}get disconnected(){return!this.connected}subEvents(){if(this.subs)return;const n=this.io;this.subs=[Us(n,"open",this.onopen.bind(this)),Us(n,"packet",this.onpacket.bind(this)),Us(n,"error",this.onerror.bind(this)),Us(n,"close",this.onclose.bind(this))]}get active(){return!!this.subs}connect(){return this.connected||(this.subEvents(),this.io._reconnecting||this.io.open(),"open"===this.io._readyState&&this.onopen()),this}open(){return this.connect()}send(...n){return n.unshift("message"),this.emit.apply(this,n),this}emit(n,...t){if(Ms.hasOwnProperty(n))throw new Error('"'+n.toString()+'" is a reserved event name');if(t.unshift(n),this._opts.retries&&!this.flags.fromQueue&&!this.flags.volatile)return this._addToQueue(t),this;const e={type:Ts.EVENT,data:t,options:{}};if(e.options.compress=!1!==this.flags.compress,"function"==typeof t[t.length-1]){const n=this.ids++,r=t.pop();this._registerAckCallback(n,r),e.id=n}const r=this.io.engine&&this.io.engine.transport&&this.io.engine.transport.writable;return this.flags.volatile&&(!r||!this.connected)||(this.connected?(this.notifyOutgoingListeners(e),this.packet(e)):this.sendBuffer.push(e)),this.flags={},this}_registerAckCallback(n,t){var e;const r=null!==(e=this.flags.timeout)&&void 0!==e?e:this._opts.ackTimeout;if(void 0===r)return void(this.acks[n]=t);const i=this.io.setTimeoutFn((()=>{delete this.acks[n];for(let t=0;t<this.sendBuffer.length;t++)this.sendBuffer[t].id===n&&this.sendBuffer.splice(t,1);t.call(this,new Error("operation has timed out"))}),r);this.acks[n]=(...n)=>{this.io.clearTimeoutFn(i),t.apply(this,[null,...n])}}emitWithAck(n,...t){const e=void 0!==this.flags.timeout||void 0!==this._opts.ackTimeout;return new Promise(((r,i)=>{t.push(((n,t)=>e?n?i(n):r(t):r(n))),this.emit(n,...t)}))}_addToQueue(n){let t;"function"==typeof n[n.length-1]&&(t=n.pop());const e={id:this._queueSeq++,tryCount:0,pending:!1,args:n,flags:Object.assign({fromQueue:!0},this.flags)};n.push(((n,...r)=>{if(e===this._queue[0])return null!==n?e.tryCount>this._opts.retries&&(this._queue.shift(),t&&t(n)):(this._queue.shift(),t&&t(null,...r)),e.pending=!1,this._drainQueue()})),this._queue.push(e),this._drainQueue()}_drainQueue(n=!1){if(!this.connected||0===this._queue.length)return;const t=this._queue[0];t.pending&&!n||(t.pending=!0,t.tryCount++,this.flags=t.flags,this.emit.apply(this,t.args))}packet(n){n.nsp=this.nsp,this.io._packet(n)}onopen(){"function"==typeof this.auth?this.auth((n=>{this._sendConnectPacket(n)})):this._sendConnectPacket(this.auth)}_sendConnectPacket(n){this.packet({type:Ts.CONNECT,data:this._pid?Object.assign({pid:this._pid,offset:this._lastOffset},n):n})}onerror(n){this.connected||this.emitReserved("connect_error",n)}onclose(n,t){this.connected=!1,delete this.id,this.emitReserved("disconnect",n,t)}onpacket(n){if(n.nsp===this.nsp)switch(n.type){case Ts.CONNECT:n.data&&n.data.sid?this.onconnect(n.data.sid,n.data.pid):this.emitReserved("connect_error",new Error("It seems you are trying to reach a Socket.IO server in v2.x with a v3.x client, but they are not compatible (more information here: https://socket.io/docs/v3/migrating-from-2-x-to-3-0/)"));break;case Ts.EVENT:case Ts.BINARY_EVENT:this.onevent(n);break;case Ts.ACK:case Ts.BINARY_ACK:this.onack(n);break;case Ts.DISCONNECT:this.ondisconnect();break;case Ts.CONNECT_ERROR:this.destroy();const t=new Error(n.data.message);t.data=n.data.data,this.emitReserved("connect_error",t)}}onevent(n){const t=n.data||[];null!=n.id&&t.push(this.ack(n.id)),this.connected?this.emitEvent(t):this.receiveBuffer.push(Object.freeze(t))}emitEvent(n){if(this._anyListeners&&this._anyListeners.length){const t=this._anyListeners.slice();for(const e of t)e.apply(this,n)}super.emit.apply(this,n),this._pid&&n.length&&"string"==typeof n[n.length-1]&&(this._lastOffset=n[n.length-1])}ack(n){const t=this;let e=!1;return function(...r){e||(e=!0,t.packet({type:Ts.ACK,id:n,data:r}))}}onack(n){const t=this.acks[n.id];"function"==typeof t&&(t.apply(this,n.data),delete this.acks[n.id])}onconnect(n,t){this.id=n,this.recovered=t&&this._pid===t,this._pid=t,this.connected=!0,this.emitBuffered(),this.emitReserved("connect"),this._drainQueue(!0)}emitBuffered(){this.receiveBuffer.forEach((n=>this.emitEvent(n))),this.receiveBuffer=[],this.sendBuffer.forEach((n=>{this.notifyOutgoingListeners(n),this.packet(n)})),this.sendBuffer=[]}ondisconnect(){this.destroy(),this.onclose("io server disconnect")}destroy(){this.subs&&(this.subs.forEach((n=>n())),this.subs=void 0),this.io._destroy(this)}disconnect(){return this.connected&&this.packet({type:Ts.DISCONNECT}),this.destroy(),this.connected&&this.onclose("io client disconnect"),this}close(){return this.disconnect()}compress(n){return this.flags.compress=n,this}get volatile(){return this.flags.volatile=!0,this}timeout(n){return this.flags.timeout=n,this}onAny(n){return this._anyListeners=this._anyListeners||[],this._anyListeners.push(n),this}prependAny(n){return this._anyListeners=this._anyListeners||[],this._anyListeners.unshift(n),this}offAny(n){if(!this._anyListeners)return this;if(n){const t=this._anyListeners;for(let e=0;e<t.length;e++)if(n===t[e])return t.splice(e,1),this}else this._anyListeners=[];return this}listenersAny(){return this._anyListeners||[]}onAnyOutgoing(n){return this._anyOutgoingListeners=this._anyOutgoingListeners||[],this._anyOutgoingListeners.push(n),this}prependAnyOutgoing(n){return this._anyOutgoingListeners=this._anyOutgoingListeners||[],this._anyOutgoingListeners.unshift(n),this}offAnyOutgoing(n){if(!this._anyOutgoingListeners)return this;if(n){const t=this._anyOutgoingListeners;for(let e=0;e<t.length;e++)if(n===t[e])return t.splice(e,1),this}else this._anyOutgoingListeners=[];return this}listenersAnyOutgoing(){return this._anyOutgoingListeners||[]}notifyOutgoingListeners(n){if(this._anyOutgoingListeners&&this._anyOutgoingListeners.length){const t=this._anyOutgoingListeners.slice();for(const e of t)e.apply(this,n.data)}}}function Ds(n){n=n||{},this.ms=n.min||100,this.max=n.max||1e4,this.factor=n.factor||2,this.jitter=n.jitter>0&&n.jitter<=1?n.jitter:0,this.attempts=0}Ds.prototype.duration=function(){var n=this.ms*Math.pow(this.factor,this.attempts++);if(this.jitter){var t=Math.random(),e=Math.floor(t*this.jitter*n);n=0==(1&Math.floor(10*t))?n-e:n+e}return 0|Math.min(n,this.max)},Ds.prototype.reset=function(){this.attempts=0},Ds.prototype.setMin=function(n){this.ms=n},Ds.prototype.setMax=function(n){this.max=n},Ds.prototype.setJitter=function(n){this.jitter=n};class $s extends Wa{constructor(n,e){var r;super(),this.nsps={},this.subs=[],n&&"object"==typeof n&&(e=n,n=void 0),(e=e||{}).path=e.path||"/socket.io",this.opts=e,Ha(this,e),this.reconnection(!1!==e.reconnection),this.reconnectionAttempts(e.reconnectionAttempts||1/0),this.reconnectionDelay(e.reconnectionDelay||1e3),this.reconnectionDelayMax(e.reconnectionDelayMax||5e3),this.randomizationFactor(null!==(r=e.randomizationFactor)&&void 0!==r?r:.5),this.backoff=new Ds({min:this.reconnectionDelay(),max:this.reconnectionDelayMax(),jitter:this.randomizationFactor()}),this.timeout(null==e.timeout?2e4:e.timeout),this._readyState="closed",this.uri=n;const i=e.parser||t;this.encoder=new i.Encoder,this.decoder=new i.Decoder,this._autoConnect=!1!==e.autoConnect,this._autoConnect&&this.open()}reconnection(n){return arguments.length?(this._reconnection=!!n,this):this._reconnection}reconnectionAttempts(n){return void 0===n?this._reconnectionAttempts:(this._reconnectionAttempts=n,this)}reconnectionDelay(n){var t;return void 0===n?this._reconnectionDelay:(this._reconnectionDelay=n,null===(t=this.backoff)||void 0===t||t.setMin(n),this)}randomizationFactor(n){var t;return void 0===n?this._randomizationFactor:(this._randomizationFactor=n,null===(t=this.backoff)||void 0===t||t.setJitter(n),this)}reconnectionDelayMax(n){var t;return void 0===n?this._reconnectionDelayMax:(this._reconnectionDelayMax=n,null===(t=this.backoff)||void 0===t||t.setMax(n),this)}timeout(n){return arguments.length?(this._timeout=n,this):this._timeout}maybeReconnectOnOpen(){!this._reconnecting&&this._reconnection&&0===this.backoff.attempts&&this.reconnect()}open(n){if(~this._readyState.indexOf("open"))return this;this.engine=new Es(this.uri,this.opts);const t=this.engine,e=this;this._readyState="opening",this.skipReconnect=!1;const r=Us(t,"open",(function(){e.onopen(),n&&n()})),i=t=>{this.cleanup(),this._readyState="closed",this.emitReserved("error",t),n?n(t):this.maybeReconnectOnOpen()},o=Us(t,"error",i);if(!1!==this._timeout){const n=this._timeout,e=this.setTimeoutFn((()=>{r(),i(new Error("timeout")),t.close()}),n);this.opts.autoUnref&&e.unref(),this.subs.push((()=>{this.clearTimeoutFn(e)}))}return this.subs.push(r),this.subs.push(o),this}connect(n){return this.open(n)}onopen(){this.cleanup(),this._readyState="open",this.emitReserved("open");const n=this.engine;this.subs.push(Us(n,"ping",this.onping.bind(this)),Us(n,"data",this.ondata.bind(this)),Us(n,"error",this.onerror.bind(this)),Us(n,"close",this.onclose.bind(this)),Us(this.decoder,"decoded",this.ondecoded.bind(this)))}onping(){this.emitReserved("ping")}ondata(n){try{this.decoder.add(n)}catch(n){this.onclose("parse error",n)}}ondecoded(n){fs((()=>{this.emitReserved("packet",n)}),this.setTimeoutFn)}onerror(n){this.emitReserved("error",n)}socket(n,t){let e=this.nsps[n];return e?this._autoConnect&&!e.active&&e.connect():(e=new Fs(this,n,t),this.nsps[n]=e),e}_destroy(n){const t=Object.keys(this.nsps);for(const n of t)if(this.nsps[n].active)return;this._close()}_packet(n){const t=this.encoder.encode(n);for(let e=0;e<t.length;e++)this.engine.write(t[e],n.options)}cleanup(){this.subs.forEach((n=>n())),this.subs.length=0,this.decoder.destroy()}_close(){this.skipReconnect=!0,this._reconnecting=!1,this.onclose("forced close"),this.engine&&this.engine.close()}disconnect(){return this._close()}onclose(n,t){this.cleanup(),this.backoff.reset(),this._readyState="closed",this.emitReserved("close",n,t),this._reconnection&&!this.skipReconnect&&this.reconnect()}reconnect(){if(this._reconnecting||this.skipReconnect)return this;const n=this;if(this.backoff.attempts>=this._reconnectionAttempts)this.backoff.reset(),this.emitReserved("reconnect_failed"),this._reconnecting=!1;else{const t=this.backoff.duration();this._reconnecting=!0;const e=this.setTimeoutFn((()=>{n.skipReconnect||(this.emitReserved("reconnect_attempt",n.backoff.attempts),n.skipReconnect||n.open((t=>{t?(n._reconnecting=!1,n.reconnect(),this.emitReserved("reconnect_error",t)):n.onreconnect()})))}),t);this.opts.autoUnref&&e.unref(),this.subs.push((()=>{this.clearTimeoutFn(e)}))}}onreconnect(){const n=this.backoff.attempts;this._reconnecting=!1,this.backoff.reset(),this.emitReserved("reconnect",n)}}const Ws={};function qs(n,t){"object"==typeof n&&(t=n,n=void 0);const e=function(n,t="",e){let r=n;e=e||"undefined"!=typeof location&&location,null==n&&(n=e.protocol+"//"+e.host),"string"==typeof n&&("/"===n.charAt(0)&&(n="/"===n.charAt(1)?e.protocol+n:e.host+n),/^(https?|wss?):\/\//.test(n)||(n=void 0!==e?e.protocol+"//"+n:"https://"+n),r=ys(n)),r.port||(/^(http|ws)$/.test(r.protocol)?r.port="80":/^(http|ws)s$/.test(r.protocol)&&(r.port="443")),r.path=r.path||"/";const i=-1!==r.host.indexOf(":")?"["+r.host+"]":r.host;return r.id=r.protocol+"://"+i+":"+r.port+t,r.href=r.protocol+"://"+i+(e&&e.port===r.port?"":":"+r.port),r}(n,(t=t||{}).path||"/socket.io"),r=e.source,i=e.id,o=e.path,a=Ws[i]&&o in Ws[i].nsps;let s;return t.forceNew||t["force new connection"]||!1===t.multiplex||a?s=new $s(r,t):(Ws[i]||(Ws[i]=new $s(r,t)),s=Ws[i]),e.query&&!t.query&&(t.query=e.queryKey),s.socket(e.path,t)}Object.assign(qs,{Manager:$s,Socket:Fs,io:qs,connect:qs}),qs("http://localhost:3001")})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,